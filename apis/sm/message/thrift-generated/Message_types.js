//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.PresenceSharingLevel = {
  '0' : 'FULL',
  'FULL' : 0,
  '1' : 'SIMPLE',
  'SIMPLE' : 1
};
ttypes.RosterEntryOperation = {
  '0' : 'ADD',
  'ADD' : 0,
  '1' : 'DELETE',
  'DELETE' : 1,
  '2' : 'MODIFY',
  'MODIFY' : 2
};
ttypes.AliasType = {
  '0' : 'GRCP',
  'GRCP' : 0,
  '2' : 'EMAIL',
  'EMAIL' : 2
};
ttypes.AttributeEditability = {
  '1' : 'NONE',
  'NONE' : 1,
  '2' : 'TIGHT',
  'TIGHT' : 2,
  '3' : 'LOOSE',
  'LOOSE' : 3
};
ttypes.AttributeVisibility = {
  '1' : 'PUBLIC',
  'PUBLIC' : 1,
  '2' : 'COMPANY',
  'COMPANY' : 2
};
var UserNameStruct = module.exports.UserNameStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field firstName is unset!');
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastName is unset!');
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserNameStruct.prototype = {};
UserNameStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNameStruct.prototype.write = function(output) {
  output.writeStructBegin('UserNameStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 1);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 2);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 3);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 5);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserStruct = module.exports.UserStruct = function(args) {
  this.userId = null;
  this.grcpAlias = null;
  this.userName = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
    if (args.grcpAlias !== undefined && args.grcpAlias !== null) {
      this.grcpAlias = args.grcpAlias;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field grcpAlias is unset!');
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = new ttypes.UserNameStruct(args.userName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userName is unset!');
    }
  }
};
UserStruct.prototype = {};
UserStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.grcpAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userName = new ttypes.UserNameStruct();
        this.userName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStruct.prototype.write = function(output) {
  output.writeStructBegin('UserStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.grcpAlias !== null && this.grcpAlias !== undefined) {
    output.writeFieldBegin('grcpAlias', Thrift.Type.STRING, 2);
    output.writeString(this.grcpAlias);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRUCT, 3);
    this.userName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AvatarSetStruct = module.exports.AvatarSetStruct = function(args) {
  this.sourceImageMimeType = null;
  this.sourceImage = null;
  this.avatarMimeType = null;
  this.avatarImage = null;
  this.avatarThumbnailMimeType = null;
  this.avatarThumbnailImage = null;
  if (args) {
    if (args.sourceImageMimeType !== undefined && args.sourceImageMimeType !== null) {
      this.sourceImageMimeType = args.sourceImageMimeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceImageMimeType is unset!');
    }
    if (args.sourceImage !== undefined && args.sourceImage !== null) {
      this.sourceImage = args.sourceImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceImage is unset!');
    }
    if (args.avatarMimeType !== undefined && args.avatarMimeType !== null) {
      this.avatarMimeType = args.avatarMimeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avatarMimeType is unset!');
    }
    if (args.avatarImage !== undefined && args.avatarImage !== null) {
      this.avatarImage = args.avatarImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avatarImage is unset!');
    }
    if (args.avatarThumbnailMimeType !== undefined && args.avatarThumbnailMimeType !== null) {
      this.avatarThumbnailMimeType = args.avatarThumbnailMimeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avatarThumbnailMimeType is unset!');
    }
    if (args.avatarThumbnailImage !== undefined && args.avatarThumbnailImage !== null) {
      this.avatarThumbnailImage = args.avatarThumbnailImage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field avatarThumbnailImage is unset!');
    }
  }
};
AvatarSetStruct.prototype = {};
AvatarSetStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceImageMimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sourceImage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.avatarMimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.avatarImage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.avatarThumbnailMimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.avatarThumbnailImage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarSetStruct.prototype.write = function(output) {
  output.writeStructBegin('AvatarSetStruct');
  if (this.sourceImageMimeType !== null && this.sourceImageMimeType !== undefined) {
    output.writeFieldBegin('sourceImageMimeType', Thrift.Type.STRING, 1);
    output.writeString(this.sourceImageMimeType);
    output.writeFieldEnd();
  }
  if (this.sourceImage !== null && this.sourceImage !== undefined) {
    output.writeFieldBegin('sourceImage', Thrift.Type.STRING, 2);
    output.writeString(this.sourceImage);
    output.writeFieldEnd();
  }
  if (this.avatarMimeType !== null && this.avatarMimeType !== undefined) {
    output.writeFieldBegin('avatarMimeType', Thrift.Type.STRING, 3);
    output.writeString(this.avatarMimeType);
    output.writeFieldEnd();
  }
  if (this.avatarImage !== null && this.avatarImage !== undefined) {
    output.writeFieldBegin('avatarImage', Thrift.Type.STRING, 4);
    output.writeString(this.avatarImage);
    output.writeFieldEnd();
  }
  if (this.avatarThumbnailMimeType !== null && this.avatarThumbnailMimeType !== undefined) {
    output.writeFieldBegin('avatarThumbnailMimeType', Thrift.Type.STRING, 5);
    output.writeString(this.avatarThumbnailMimeType);
    output.writeFieldEnd();
  }
  if (this.avatarThumbnailImage !== null && this.avatarThumbnailImage !== undefined) {
    output.writeFieldBegin('avatarThumbnailImage', Thrift.Type.STRING, 6);
    output.writeString(this.avatarThumbnailImage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AvatarStruct = module.exports.AvatarStruct = function(args) {
  this.mimeType = null;
  this.version = null;
  this.image = null;
  this.defaultAvatar = null;
  if (args) {
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.defaultAvatar !== undefined && args.defaultAvatar !== null) {
      this.defaultAvatar = args.defaultAvatar;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field defaultAvatar is unset!');
    }
  }
};
AvatarStruct.prototype = {};
AvatarStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.defaultAvatar = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarStruct.prototype.write = function(output) {
  output.writeStructBegin('AvatarStruct');
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 1);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 3);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.defaultAvatar !== null && this.defaultAvatar !== undefined) {
    output.writeFieldBegin('defaultAvatar', Thrift.Type.BOOL, 4);
    output.writeBool(this.defaultAvatar);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RosterEntryStruct = module.exports.RosterEntryStruct = function(args) {
  this.grcpOrSipId = null;
  this.systemTags = null;
  this.userTags = null;
  this.presenceSharing = null;
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.nickname = null;
  this.companyName = null;
  this.versionUpdated = null;
  this.deleted = null;
  this.enabled = null;
  this.avatarVersion = null;
  if (args) {
    if (args.grcpOrSipId !== undefined && args.grcpOrSipId !== null) {
      this.grcpOrSipId = args.grcpOrSipId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field grcpOrSipId is unset!');
    }
    if (args.systemTags !== undefined && args.systemTags !== null) {
      this.systemTags = Thrift.copyList(args.systemTags, [null]);
    }
    if (args.userTags !== undefined && args.userTags !== null) {
      this.userTags = Thrift.copyList(args.userTags, [null]);
    }
    if (args.presenceSharing !== undefined && args.presenceSharing !== null) {
      this.presenceSharing = args.presenceSharing;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field presenceSharing is unset!');
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.nickname !== undefined && args.nickname !== null) {
      this.nickname = args.nickname;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.versionUpdated !== undefined && args.versionUpdated !== null) {
      this.versionUpdated = args.versionUpdated;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.enabled !== undefined && args.enabled !== null) {
      this.enabled = args.enabled;
    }
    if (args.avatarVersion !== undefined && args.avatarVersion !== null) {
      this.avatarVersion = args.avatarVersion;
    }
  }
};
RosterEntryStruct.prototype = {};
RosterEntryStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.grcpOrSipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.systemTags = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.systemTags.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.userTags = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString();
          this.userTags.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.presenceSharing = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.versionUpdated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.deleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.avatarVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RosterEntryStruct.prototype.write = function(output) {
  output.writeStructBegin('RosterEntryStruct');
  if (this.grcpOrSipId !== null && this.grcpOrSipId !== undefined) {
    output.writeFieldBegin('grcpOrSipId', Thrift.Type.STRING, 1);
    output.writeString(this.grcpOrSipId);
    output.writeFieldEnd();
  }
  if (this.systemTags !== null && this.systemTags !== undefined) {
    output.writeFieldBegin('systemTags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.systemTags.length);
    for (var iter8 in this.systemTags) {
      if (this.systemTags.hasOwnProperty(iter8)) {
        iter8 = this.systemTags[iter8];
        output.writeString(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userTags !== null && this.userTags !== undefined) {
    output.writeFieldBegin('userTags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.userTags.length);
    for (var iter9 in this.userTags) {
      if (this.userTags.hasOwnProperty(iter9)) {
        iter9 = this.userTags[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.presenceSharing !== null && this.presenceSharing !== undefined) {
    output.writeFieldBegin('presenceSharing', Thrift.Type.I32, 4);
    output.writeI32(this.presenceSharing);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 5);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 6);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 7);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 8);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 9);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.versionUpdated !== null && this.versionUpdated !== undefined) {
    output.writeFieldBegin('versionUpdated', Thrift.Type.I64, 10);
    output.writeI64(this.versionUpdated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.BOOL, 11);
    output.writeBool(this.deleted);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 12);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.avatarVersion !== null && this.avatarVersion !== undefined) {
    output.writeFieldBegin('avatarVersion', Thrift.Type.I32, 13);
    output.writeI32(this.avatarVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RosterStruct = module.exports.RosterStruct = function(args) {
  this.version = null;
  this.entries = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.entries !== undefined && args.entries !== null) {
      this.entries = Thrift.copyList(args.entries, [ttypes.RosterEntryStruct]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entries is unset!');
    }
  }
};
RosterStruct.prototype = {};
RosterStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.entries = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.RosterEntryStruct();
          elem13.read(input);
          this.entries.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RosterStruct.prototype.write = function(output) {
  output.writeStructBegin('RosterStruct');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.entries !== null && this.entries !== undefined) {
    output.writeFieldBegin('entries', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.entries.length);
    for (var iter14 in this.entries) {
      if (this.entries.hasOwnProperty(iter14)) {
        iter14 = this.entries[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RosterEntryDeltaStruct = module.exports.RosterEntryDeltaStruct = function(args) {
  this.operation = null;
  this.rosterEntry = null;
  if (args) {
    if (args.operation !== undefined && args.operation !== null) {
      this.operation = args.operation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operation is unset!');
    }
    if (args.rosterEntry !== undefined && args.rosterEntry !== null) {
      this.rosterEntry = new ttypes.RosterEntryStruct(args.rosterEntry);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rosterEntry is unset!');
    }
  }
};
RosterEntryDeltaStruct.prototype = {};
RosterEntryDeltaStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.operation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rosterEntry = new ttypes.RosterEntryStruct();
        this.rosterEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RosterEntryDeltaStruct.prototype.write = function(output) {
  output.writeStructBegin('RosterEntryDeltaStruct');
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.I32, 1);
    output.writeI32(this.operation);
    output.writeFieldEnd();
  }
  if (this.rosterEntry !== null && this.rosterEntry !== undefined) {
    output.writeFieldBegin('rosterEntry', Thrift.Type.STRUCT, 2);
    this.rosterEntry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaggedStringStruct = module.exports.TaggedStringStruct = function(args) {
  this.tags = null;
  this.value = null;
  if (args) {
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tags is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
TaggedStringStruct.prototype = {};
TaggedStringStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readString();
          this.tags.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaggedStringStruct.prototype.write = function(output) {
  output.writeStructBegin('TaggedStringStruct');
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter19 in this.tags) {
      if (this.tags.hasOwnProperty(iter19)) {
        iter19 = this.tags[iter19];
        output.writeString(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AliasStruct = module.exports.AliasStruct = function(args) {
  this.aliasType = null;
  this.aliasValue = null;
  if (args) {
    if (args.aliasType !== undefined && args.aliasType !== null) {
      this.aliasType = args.aliasType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aliasType is unset!');
    }
    if (args.aliasValue !== undefined && args.aliasValue !== null) {
      this.aliasValue = args.aliasValue;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aliasValue is unset!');
    }
  }
};
AliasStruct.prototype = {};
AliasStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.aliasType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.aliasValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AliasStruct.prototype.write = function(output) {
  output.writeStructBegin('AliasStruct');
  if (this.aliasType !== null && this.aliasType !== undefined) {
    output.writeFieldBegin('aliasType', Thrift.Type.I32, 1);
    output.writeI32(this.aliasType);
    output.writeFieldEnd();
  }
  if (this.aliasValue !== null && this.aliasValue !== undefined) {
    output.writeFieldBegin('aliasValue', Thrift.Type.STRING, 2);
    output.writeString(this.aliasValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportsToStruct = module.exports.ReportsToStruct = function(args) {
  this.userId = null;
  this.firstName = null;
  this.lastName = null;
  this.isEnabled = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.isEnabled !== undefined && args.isEnabled !== null) {
      this.isEnabled = args.isEnabled;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
ReportsToStruct.prototype = {};
ReportsToStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportsToStruct.prototype.write = function(output) {
  output.writeStructBegin('ReportsToStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.isEnabled !== null && this.isEnabled !== undefined) {
    output.writeFieldBegin('isEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.isEnabled);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 6);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeSettingStruct = module.exports.UserProfileAttributeSettingStruct = function(args) {
  this.visibility = null;
  this.editability = null;
  if (args) {
    if (args.visibility !== undefined && args.visibility !== null) {
      this.visibility = args.visibility;
    }
    if (args.editability !== undefined && args.editability !== null) {
      this.editability = args.editability;
    }
  }
};
UserProfileAttributeSettingStruct.prototype = {};
UserProfileAttributeSettingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.visibility = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.editability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeSettingStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeSettingStruct');
  if (this.visibility !== null && this.visibility !== undefined) {
    output.writeFieldBegin('visibility', Thrift.Type.I32, 1);
    output.writeI32(this.visibility);
    output.writeFieldEnd();
  }
  if (this.editability !== null && this.editability !== undefined) {
    output.writeFieldBegin('editability', Thrift.Type.I32, 2);
    output.writeI32(this.editability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeValueStruct = module.exports.UserProfileAttributeValueStruct = function(args) {
  this.profileValue = null;
  this.profileAttributeSettings = null;
  if (args) {
    if (args.profileValue !== undefined && args.profileValue !== null) {
      this.profileValue = args.profileValue;
    }
    if (args.profileAttributeSettings !== undefined && args.profileAttributeSettings !== null) {
      this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct(args.profileAttributeSettings);
    }
  }
};
UserProfileAttributeValueStruct.prototype = {};
UserProfileAttributeValueStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profileValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.profileAttributeSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeValueStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeValueStruct');
  if (this.profileValue !== null && this.profileValue !== undefined) {
    output.writeFieldBegin('profileValue', Thrift.Type.STRING, 1);
    output.writeString(this.profileValue);
    output.writeFieldEnd();
  }
  if (this.profileAttributeSettings !== null && this.profileAttributeSettings !== undefined) {
    output.writeFieldBegin('profileAttributeSettings', Thrift.Type.STRUCT, 2);
    this.profileAttributeSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeCollectionValueStruct = module.exports.UserProfileAttributeCollectionValueStruct = function(args) {
  this.profileValues = null;
  this.profileAttributeSettings = null;
  if (args) {
    if (args.profileValues !== undefined && args.profileValues !== null) {
      this.profileValues = Thrift.copyList(args.profileValues, [null]);
    }
    if (args.profileAttributeSettings !== undefined && args.profileAttributeSettings !== null) {
      this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct(args.profileAttributeSettings);
    }
  }
};
UserProfileAttributeCollectionValueStruct.prototype = {};
UserProfileAttributeCollectionValueStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.profileValues = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString();
          this.profileValues.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.profileAttributeSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeCollectionValueStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeCollectionValueStruct');
  if (this.profileValues !== null && this.profileValues !== undefined) {
    output.writeFieldBegin('profileValues', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.profileValues.length);
    for (var iter24 in this.profileValues) {
      if (this.profileValues.hasOwnProperty(iter24)) {
        iter24 = this.profileValues[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.profileAttributeSettings !== null && this.profileAttributeSettings !== undefined) {
    output.writeFieldBegin('profileAttributeSettings', Thrift.Type.STRUCT, 2);
    this.profileAttributeSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileUserSetAttributesStruct = module.exports.UserProfileUserSetAttributesStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.customerUserId = null;
  this.jobTitle = null;
  this.workPhone = null;
  this.mobilePhone = null;
  this.homePhone = null;
  this.reportsToUser = null;
  this.location = null;
  this.obsolete_nickname = null;
  this.reportsToEditability = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = new ttypes.UserProfileAttributeValueStruct(args.firstName);
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = new ttypes.UserProfileAttributeValueStruct(args.lastName);
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = new ttypes.UserProfileAttributeValueStruct(args.customerUserId);
    }
    if (args.jobTitle !== undefined && args.jobTitle !== null) {
      this.jobTitle = new ttypes.UserProfileAttributeValueStruct(args.jobTitle);
    }
    if (args.workPhone !== undefined && args.workPhone !== null) {
      this.workPhone = new ttypes.UserProfileAttributeValueStruct(args.workPhone);
    }
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = new ttypes.UserProfileAttributeValueStruct(args.mobilePhone);
    }
    if (args.homePhone !== undefined && args.homePhone !== null) {
      this.homePhone = new ttypes.UserProfileAttributeValueStruct(args.homePhone);
    }
    if (args.reportsToUser !== undefined && args.reportsToUser !== null) {
      this.reportsToUser = new ttypes.ReportsToStruct(args.reportsToUser);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.UserProfileAttributeValueStruct(args.location);
    }
    if (args.obsolete_nickname !== undefined && args.obsolete_nickname !== null) {
      this.obsolete_nickname = new ttypes.UserProfileAttributeValueStruct(args.obsolete_nickname);
    }
    if (args.reportsToEditability !== undefined && args.reportsToEditability !== null) {
      this.reportsToEditability = args.reportsToEditability;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = new ttypes.UserProfileAttributeValueStruct(args.addressLine1);
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = new ttypes.UserProfileAttributeValueStruct(args.addressLine2);
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = new ttypes.UserProfileAttributeValueStruct(args.city);
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = new ttypes.UserProfileAttributeValueStruct(args.province);
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = new ttypes.UserProfileAttributeValueStruct(args.postalCode);
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = new ttypes.UserProfileAttributeValueStruct(args.country);
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = new ttypes.UserProfileAttributeValueStruct(args.email);
    }
  }
};
UserProfileUserSetAttributesStruct.prototype = {};
UserProfileUserSetAttributesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.firstName = new ttypes.UserProfileAttributeValueStruct();
        this.firstName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastName = new ttypes.UserProfileAttributeValueStruct();
        this.lastName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerUserId = new ttypes.UserProfileAttributeValueStruct();
        this.customerUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobTitle = new ttypes.UserProfileAttributeValueStruct();
        this.jobTitle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.workPhone = new ttypes.UserProfileAttributeValueStruct();
        this.workPhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobilePhone = new ttypes.UserProfileAttributeValueStruct();
        this.mobilePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.homePhone = new ttypes.UserProfileAttributeValueStruct();
        this.homePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportsToUser = new ttypes.ReportsToStruct();
        this.reportsToUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.UserProfileAttributeValueStruct();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.obsolete_nickname = new ttypes.UserProfileAttributeValueStruct();
        this.obsolete_nickname.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.reportsToEditability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine1 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine2 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.city = new ttypes.UserProfileAttributeValueStruct();
        this.city.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.province = new ttypes.UserProfileAttributeValueStruct();
        this.province.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.postalCode = new ttypes.UserProfileAttributeValueStruct();
        this.postalCode.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.country = new ttypes.UserProfileAttributeValueStruct();
        this.country.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.email = new ttypes.UserProfileAttributeValueStruct();
        this.email.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileUserSetAttributesStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileUserSetAttributesStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRUCT, 1);
    this.firstName.write(output);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRUCT, 2);
    this.lastName.write(output);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRUCT, 3);
    this.customerUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.jobTitle !== null && this.jobTitle !== undefined) {
    output.writeFieldBegin('jobTitle', Thrift.Type.STRUCT, 4);
    this.jobTitle.write(output);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRUCT, 5);
    this.workPhone.write(output);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRUCT, 6);
    this.mobilePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.homePhone !== null && this.homePhone !== undefined) {
    output.writeFieldBegin('homePhone', Thrift.Type.STRUCT, 7);
    this.homePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToUser !== null && this.reportsToUser !== undefined) {
    output.writeFieldBegin('reportsToUser', Thrift.Type.STRUCT, 8);
    this.reportsToUser.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 9);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.obsolete_nickname !== null && this.obsolete_nickname !== undefined) {
    output.writeFieldBegin('obsolete_nickname', Thrift.Type.STRUCT, 10);
    this.obsolete_nickname.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToEditability !== null && this.reportsToEditability !== undefined) {
    output.writeFieldBegin('reportsToEditability', Thrift.Type.I32, 11);
    output.writeI32(this.reportsToEditability);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRUCT, 12);
    this.addressLine1.write(output);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRUCT, 13);
    this.addressLine2.write(output);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRUCT, 14);
    this.city.write(output);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRUCT, 15);
    this.province.write(output);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRUCT, 16);
    this.postalCode.write(output);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRUCT, 17);
    this.country.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRUCT, 19);
    this.email.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicProfileStruct = module.exports.PublicProfileStruct = function(args) {
  this.version = null;
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.companyName = null;
  this.jobTitle = null;
  this.timeZone = null;
  this.phoneNumbers = null;
  this.aliases = null;
  this.companyLegalName = null;
  this.legalEntityName = null;
  this.legalEntityIdentifier = null;
  this.companyId = null;
  this.userId = null;
  this.userSetAttributes = null;
  this.grid = null;
  this.directReports = null;
  this.isDirectReportsTruncated = null;
  this.companyAddressLine1 = null;
  this.companyAddressLine2 = null;
  this.companyCity = null;
  this.companyProvince = null;
  this.companyPostalCode = null;
  this.companyCountry = null;
  this.companyPhoneNumber = null;
  this.companyEmail = null;
  this.companyDateModified = null;
  this.profileVersion = null;
  this.profilePolicyVersion = null;
  this.email = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.jobTitle !== undefined && args.jobTitle !== null) {
      this.jobTitle = args.jobTitle;
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    }
    if (args.phoneNumbers !== undefined && args.phoneNumbers !== null) {
      this.phoneNumbers = Thrift.copyList(args.phoneNumbers, [ttypes.TaggedStringStruct]);
    }
    if (args.aliases !== undefined && args.aliases !== null) {
      this.aliases = Thrift.copyList(args.aliases, [ttypes.AliasStruct]);
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.legalEntityName !== undefined && args.legalEntityName !== null) {
      this.legalEntityName = args.legalEntityName;
    }
    if (args.legalEntityIdentifier !== undefined && args.legalEntityIdentifier !== null) {
      this.legalEntityIdentifier = args.legalEntityIdentifier;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userSetAttributes !== undefined && args.userSetAttributes !== null) {
      this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct(args.userSetAttributes);
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
    if (args.directReports !== undefined && args.directReports !== null) {
      this.directReports = Thrift.copyList(args.directReports, [ttypes.ReportsToStruct]);
    }
    if (args.isDirectReportsTruncated !== undefined && args.isDirectReportsTruncated !== null) {
      this.isDirectReportsTruncated = args.isDirectReportsTruncated;
    }
    if (args.companyAddressLine1 !== undefined && args.companyAddressLine1 !== null) {
      this.companyAddressLine1 = args.companyAddressLine1;
    }
    if (args.companyAddressLine2 !== undefined && args.companyAddressLine2 !== null) {
      this.companyAddressLine2 = args.companyAddressLine2;
    }
    if (args.companyCity !== undefined && args.companyCity !== null) {
      this.companyCity = args.companyCity;
    }
    if (args.companyProvince !== undefined && args.companyProvince !== null) {
      this.companyProvince = args.companyProvince;
    }
    if (args.companyPostalCode !== undefined && args.companyPostalCode !== null) {
      this.companyPostalCode = args.companyPostalCode;
    }
    if (args.companyCountry !== undefined && args.companyCountry !== null) {
      this.companyCountry = args.companyCountry;
    }
    if (args.companyPhoneNumber !== undefined && args.companyPhoneNumber !== null) {
      this.companyPhoneNumber = args.companyPhoneNumber;
    }
    if (args.companyEmail !== undefined && args.companyEmail !== null) {
      this.companyEmail = args.companyEmail;
    }
    if (args.companyDateModified !== undefined && args.companyDateModified !== null) {
      this.companyDateModified = args.companyDateModified;
    }
    if (args.profileVersion !== undefined && args.profileVersion !== null) {
      this.profileVersion = args.profileVersion;
    }
    if (args.profilePolicyVersion !== undefined && args.profilePolicyVersion !== null) {
      this.profilePolicyVersion = args.profilePolicyVersion;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
PublicProfileStruct.prototype = {};
PublicProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.jobTitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.phoneNumbers = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.TaggedStringStruct();
          elem28.read(input);
          this.phoneNumbers.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.aliases = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = new ttypes.AliasStruct();
          elem32.read(input);
          this.aliases.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct();
        this.userSetAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        this.directReports = [];
        var _rtmp334 = input.readListBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var elem36 = null;
          elem36 = new ttypes.ReportsToStruct();
          elem36.read(input);
          this.directReports.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectReportsTruncated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.companyCity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.companyProvince = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.companyPostalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.companyCountry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.companyPhoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.companyEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.I64) {
        this.companyDateModified = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.profileVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I64) {
        this.profilePolicyVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('PublicProfileStruct');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 4);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 6);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.jobTitle !== null && this.jobTitle !== undefined) {
    output.writeFieldBegin('jobTitle', Thrift.Type.STRING, 7);
    output.writeString(this.jobTitle);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 8);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.phoneNumbers !== null && this.phoneNumbers !== undefined) {
    output.writeFieldBegin('phoneNumbers', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.phoneNumbers.length);
    for (var iter37 in this.phoneNumbers) {
      if (this.phoneNumbers.hasOwnProperty(iter37)) {
        iter37 = this.phoneNumbers[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aliases !== null && this.aliases !== undefined) {
    output.writeFieldBegin('aliases', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.aliases.length);
    for (var iter38 in this.aliases) {
      if (this.aliases.hasOwnProperty(iter38)) {
        iter38 = this.aliases[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 11);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.legalEntityName !== null && this.legalEntityName !== undefined) {
    output.writeFieldBegin('legalEntityName', Thrift.Type.STRING, 12);
    output.writeString(this.legalEntityName);
    output.writeFieldEnd();
  }
  if (this.legalEntityIdentifier !== null && this.legalEntityIdentifier !== undefined) {
    output.writeFieldBegin('legalEntityIdentifier', Thrift.Type.STRING, 13);
    output.writeString(this.legalEntityIdentifier);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 14);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 15);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userSetAttributes !== null && this.userSetAttributes !== undefined) {
    output.writeFieldBegin('userSetAttributes', Thrift.Type.STRUCT, 16);
    this.userSetAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 17);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.directReports !== null && this.directReports !== undefined) {
    output.writeFieldBegin('directReports', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.STRUCT, this.directReports.length);
    for (var iter39 in this.directReports) {
      if (this.directReports.hasOwnProperty(iter39)) {
        iter39 = this.directReports[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isDirectReportsTruncated !== null && this.isDirectReportsTruncated !== undefined) {
    output.writeFieldBegin('isDirectReportsTruncated', Thrift.Type.BOOL, 20);
    output.writeBool(this.isDirectReportsTruncated);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine1 !== null && this.companyAddressLine1 !== undefined) {
    output.writeFieldBegin('companyAddressLine1', Thrift.Type.STRING, 21);
    output.writeString(this.companyAddressLine1);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine2 !== null && this.companyAddressLine2 !== undefined) {
    output.writeFieldBegin('companyAddressLine2', Thrift.Type.STRING, 22);
    output.writeString(this.companyAddressLine2);
    output.writeFieldEnd();
  }
  if (this.companyCity !== null && this.companyCity !== undefined) {
    output.writeFieldBegin('companyCity', Thrift.Type.STRING, 23);
    output.writeString(this.companyCity);
    output.writeFieldEnd();
  }
  if (this.companyProvince !== null && this.companyProvince !== undefined) {
    output.writeFieldBegin('companyProvince', Thrift.Type.STRING, 24);
    output.writeString(this.companyProvince);
    output.writeFieldEnd();
  }
  if (this.companyPostalCode !== null && this.companyPostalCode !== undefined) {
    output.writeFieldBegin('companyPostalCode', Thrift.Type.STRING, 25);
    output.writeString(this.companyPostalCode);
    output.writeFieldEnd();
  }
  if (this.companyCountry !== null && this.companyCountry !== undefined) {
    output.writeFieldBegin('companyCountry', Thrift.Type.STRING, 26);
    output.writeString(this.companyCountry);
    output.writeFieldEnd();
  }
  if (this.companyPhoneNumber !== null && this.companyPhoneNumber !== undefined) {
    output.writeFieldBegin('companyPhoneNumber', Thrift.Type.STRING, 27);
    output.writeString(this.companyPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.companyEmail !== null && this.companyEmail !== undefined) {
    output.writeFieldBegin('companyEmail', Thrift.Type.STRING, 28);
    output.writeString(this.companyEmail);
    output.writeFieldEnd();
  }
  if (this.companyDateModified !== null && this.companyDateModified !== undefined) {
    output.writeFieldBegin('companyDateModified', Thrift.Type.I64, 29);
    output.writeI64(this.companyDateModified);
    output.writeFieldEnd();
  }
  if (this.profileVersion !== null && this.profileVersion !== undefined) {
    output.writeFieldBegin('profileVersion', Thrift.Type.I64, 30);
    output.writeI64(this.profileVersion);
    output.writeFieldEnd();
  }
  if (this.profilePolicyVersion !== null && this.profilePolicyVersion !== undefined) {
    output.writeFieldBegin('profilePolicyVersion', Thrift.Type.I64, 31);
    output.writeI64(this.profilePolicyVersion);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 32);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateRosterReturnStruct = module.exports.UpdateRosterReturnStruct = function(args) {
  this.version = null;
  this.expectNotification = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.expectNotification !== undefined && args.expectNotification !== null) {
      this.expectNotification = args.expectNotification;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expectNotification is unset!');
    }
  }
};
UpdateRosterReturnStruct.prototype = {};
UpdateRosterReturnStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.expectNotification = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateRosterReturnStruct.prototype.write = function(output) {
  output.writeStructBegin('UpdateRosterReturnStruct');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.expectNotification !== null && this.expectNotification !== undefined) {
    output.writeFieldBegin('expectNotification', Thrift.Type.BOOL, 2);
    output.writeBool(this.expectNotification);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserResultStruct = module.exports.UserResultStruct = function(args) {
  this.user = null;
  this.profile = null;
  this.isEntitledForService = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserStruct(args.user);
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new ttypes.PublicProfileStruct(args.profile);
    }
    if (args.isEntitledForService !== undefined && args.isEntitledForService !== null) {
      this.isEntitledForService = args.isEntitledForService;
    }
  }
};
UserResultStruct.prototype = {};
UserResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserStruct();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.PublicProfileStruct();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isEntitledForService = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserResultStruct.prototype.write = function(output) {
  output.writeStructBegin('UserResultStruct');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 2);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  if (this.isEntitledForService !== null && this.isEntitledForService !== undefined) {
    output.writeFieldBegin('isEntitledForService', Thrift.Type.BOOL, 3);
    output.writeBool(this.isEntitledForService);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AllUsersResultStruct = module.exports.AllUsersResultStruct = function(args) {
  this.users = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.UserResultStruct]);
    }
  }
};
AllUsersResultStruct.prototype = {};
AllUsersResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.users = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.UserResultStruct();
          elem43.read(input);
          this.users.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AllUsersResultStruct.prototype.write = function(output) {
  output.writeStructBegin('AllUsersResultStruct');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter44 in this.users) {
      if (this.users.hasOwnProperty(iter44)) {
        iter44 = this.users[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PagingStruct = module.exports.PagingStruct = function(args) {
  this.lastUserId = null;
  this.pageSize = null;
  if (args) {
    if (args.lastUserId !== undefined && args.lastUserId !== null) {
      this.lastUserId = args.lastUserId;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
  }
};
PagingStruct.prototype = {};
PagingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastUserId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PagingStruct.prototype.write = function(output) {
  output.writeStructBegin('PagingStruct');
  if (this.lastUserId !== null && this.lastUserId !== undefined) {
    output.writeFieldBegin('lastUserId', Thrift.Type.I64, 1);
    output.writeI64(this.lastUserId);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyProfileStruct = module.exports.CompanyProfileStruct = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.phoneNumber = null;
  this.website = null;
  this.email = null;
  this.description = null;
  this.productsAndServices = null;
  this.companyLegalName = null;
  this.legalEntityIdentifier = null;
  this.legalEntityName = null;
  this.profileVersion = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = args.addressLine1;
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = args.addressLine2;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.website !== undefined && args.website !== null) {
      this.website = args.website;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.productsAndServices !== undefined && args.productsAndServices !== null) {
      this.productsAndServices = args.productsAndServices;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.legalEntityIdentifier !== undefined && args.legalEntityIdentifier !== null) {
      this.legalEntityIdentifier = args.legalEntityIdentifier;
    }
    if (args.legalEntityName !== undefined && args.legalEntityName !== null) {
      this.legalEntityName = args.legalEntityName;
    }
    if (args.profileVersion !== undefined && args.profileVersion !== null) {
      this.profileVersion = args.profileVersion;
    }
  }
};
CompanyProfileStruct.prototype = {};
CompanyProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.productsAndServices = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.profileVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyProfileStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRING, 3);
    output.writeString(this.addressLine1);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRING, 4);
    output.writeString(this.addressLine2);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 6);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 7);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 8);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 9);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 10);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 12);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.productsAndServices !== null && this.productsAndServices !== undefined) {
    output.writeFieldBegin('productsAndServices', Thrift.Type.STRING, 13);
    output.writeString(this.productsAndServices);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 14);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.legalEntityIdentifier !== null && this.legalEntityIdentifier !== undefined) {
    output.writeFieldBegin('legalEntityIdentifier', Thrift.Type.STRING, 15);
    output.writeString(this.legalEntityIdentifier);
    output.writeFieldEnd();
  }
  if (this.legalEntityName !== null && this.legalEntityName !== undefined) {
    output.writeFieldBegin('legalEntityName', Thrift.Type.STRING, 16);
    output.writeString(this.legalEntityName);
    output.writeFieldEnd();
  }
  if (this.profileVersion !== null && this.profileVersion !== undefined) {
    output.writeFieldBegin('profileVersion', Thrift.Type.I64, 17);
    output.writeI64(this.profileVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyLogoStruct = module.exports.CompanyLogoStruct = function(args) {
  this.companyLogo = null;
  this.version = null;
  this.logoMimeType = null;
  this.useDefaultLogo = null;
  if (args) {
    if (args.companyLogo !== undefined && args.companyLogo !== null) {
      this.companyLogo = args.companyLogo;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.logoMimeType !== undefined && args.logoMimeType !== null) {
      this.logoMimeType = args.logoMimeType;
    }
    if (args.useDefaultLogo !== undefined && args.useDefaultLogo !== null) {
      this.useDefaultLogo = args.useDefaultLogo;
    }
  }
};
CompanyLogoStruct.prototype = {};
CompanyLogoStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLogo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.logoMimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.useDefaultLogo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyLogoStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyLogoStruct');
  if (this.companyLogo !== null && this.companyLogo !== undefined) {
    output.writeFieldBegin('companyLogo', Thrift.Type.STRING, 1);
    output.writeString(this.companyLogo);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.logoMimeType !== null && this.logoMimeType !== undefined) {
    output.writeFieldBegin('logoMimeType', Thrift.Type.STRING, 3);
    output.writeString(this.logoMimeType);
    output.writeFieldEnd();
  }
  if (this.useDefaultLogo !== null && this.useDefaultLogo !== undefined) {
    output.writeFieldBegin('useDefaultLogo', Thrift.Type.BOOL, 4);
    output.writeBool(this.useDefaultLogo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyResultStruct = module.exports.CompanyResultStruct = function(args) {
  this.profile = null;
  this.logo = null;
  this.isEntitledForService = null;
  if (args) {
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new ttypes.CompanyProfileStruct(args.profile);
    }
    if (args.logo !== undefined && args.logo !== null) {
      this.logo = new ttypes.CompanyLogoStruct(args.logo);
    }
    if (args.isEntitledForService !== undefined && args.isEntitledForService !== null) {
      this.isEntitledForService = args.isEntitledForService;
    }
  }
};
CompanyResultStruct.prototype = {};
CompanyResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.CompanyProfileStruct();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.logo = new ttypes.CompanyLogoStruct();
        this.logo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isEntitledForService = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyResultStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyResultStruct');
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 1);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRUCT, 2);
    this.logo.write(output);
    output.writeFieldEnd();
  }
  if (this.isEntitledForService !== null && this.isEntitledForService !== undefined) {
    output.writeFieldBegin('isEntitledForService', Thrift.Type.BOOL, 3);
    output.writeBool(this.isEntitledForService);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AllCompaniesResultStruct = module.exports.AllCompaniesResultStruct = function(args) {
  this.companies = null;
  if (args) {
    if (args.companies !== undefined && args.companies !== null) {
      this.companies = Thrift.copyList(args.companies, [ttypes.CompanyResultStruct]);
    }
  }
};
AllCompaniesResultStruct.prototype = {};
AllCompaniesResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.companies = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.CompanyResultStruct();
          elem48.read(input);
          this.companies.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AllCompaniesResultStruct.prototype.write = function(output) {
  output.writeStructBegin('AllCompaniesResultStruct');
  if (this.companies !== null && this.companies !== undefined) {
    output.writeFieldBegin('companies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.companies.length);
    for (var iter49 in this.companies) {
      if (this.companies.hasOwnProperty(iter49)) {
        iter49 = this.companies[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyPagingStruct = module.exports.CompanyPagingStruct = function(args) {
  this.lastCompanyId = null;
  this.pageSize = null;
  if (args) {
    if (args.lastCompanyId !== undefined && args.lastCompanyId !== null) {
      this.lastCompanyId = args.lastCompanyId;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
  }
};
CompanyPagingStruct.prototype = {};
CompanyPagingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.lastCompanyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyPagingStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyPagingStruct');
  if (this.lastCompanyId !== null && this.lastCompanyId !== undefined) {
    output.writeFieldBegin('lastCompanyId', Thrift.Type.I32, 1);
    output.writeI32(this.lastCompanyId);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchCompanyException = module.exports.NoSuchCompanyException = function(args) {
  Thrift.TException.call(this, "NoSuchCompanyException");
  this.name = "NoSuchCompanyException";
};
Thrift.inherits(NoSuchCompanyException, Thrift.TException);
NoSuchCompanyException.prototype.name = 'NoSuchCompanyException';
NoSuchCompanyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchCompanyException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchCompanyException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyAlreadyExistsException = module.exports.CompanyAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "CompanyAlreadyExistsException");
  this.name = "CompanyAlreadyExistsException";
  this.companyId = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
  }
};
Thrift.inherits(CompanyAlreadyExistsException, Thrift.TException);
CompanyAlreadyExistsException.prototype.name = 'CompanyAlreadyExistsException';
CompanyAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('CompanyAlreadyExistsException');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchUserException = module.exports.NoSuchUserException = function(args) {
  Thrift.TException.call(this, "NoSuchUserException");
  this.name = "NoSuchUserException";
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
  }
};
Thrift.inherits(NoSuchUserException, Thrift.TException);
NoSuchUserException.prototype.name = 'NoSuchUserException';
NoSuchUserException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchUserException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchUserException');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidUserCountException = module.exports.InvalidUserCountException = function(args) {
  Thrift.TException.call(this, "InvalidUserCountException");
  this.name = "InvalidUserCountException";
};
Thrift.inherits(InvalidUserCountException, Thrift.TException);
InvalidUserCountException.prototype.name = 'InvalidUserCountException';
InvalidUserCountException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidUserCountException.prototype.write = function(output) {
  output.writeStructBegin('InvalidUserCountException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserCountTooLargeException = module.exports.UserCountTooLargeException = function(args) {
  Thrift.TException.call(this, "UserCountTooLargeException");
  this.name = "UserCountTooLargeException";
  this.maxUsers = null;
  if (args) {
    if (args.maxUsers !== undefined && args.maxUsers !== null) {
      this.maxUsers = args.maxUsers;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxUsers is unset!');
    }
  }
};
Thrift.inherits(UserCountTooLargeException, Thrift.TException);
UserCountTooLargeException.prototype.name = 'UserCountTooLargeException';
UserCountTooLargeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxUsers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCountTooLargeException.prototype.write = function(output) {
  output.writeStructBegin('UserCountTooLargeException');
  if (this.maxUsers !== null && this.maxUsers !== undefined) {
    output.writeFieldBegin('maxUsers', Thrift.Type.I32, 1);
    output.writeI32(this.maxUsers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AvatarTooLargeException = module.exports.AvatarTooLargeException = function(args) {
  Thrift.TException.call(this, "AvatarTooLargeException");
  this.name = "AvatarTooLargeException";
  this.maxBytes = null;
  if (args) {
    if (args.maxBytes !== undefined && args.maxBytes !== null) {
      this.maxBytes = args.maxBytes;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxBytes is unset!');
    }
  }
};
Thrift.inherits(AvatarTooLargeException, Thrift.TException);
AvatarTooLargeException.prototype.name = 'AvatarTooLargeException';
AvatarTooLargeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxBytes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvatarTooLargeException.prototype.write = function(output) {
  output.writeStructBegin('AvatarTooLargeException');
  if (this.maxBytes !== null && this.maxBytes !== undefined) {
    output.writeFieldBegin('maxBytes', Thrift.Type.I32, 1);
    output.writeI32(this.maxBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ImageConversionException = module.exports.ImageConversionException = function(args) {
  Thrift.TException.call(this, "ImageConversionException");
  this.name = "ImageConversionException";
};
Thrift.inherits(ImageConversionException, Thrift.TException);
ImageConversionException.prototype.name = 'ImageConversionException';
ImageConversionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageConversionException.prototype.write = function(output) {
  output.writeStructBegin('ImageConversionException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FailureException = module.exports.FailureException = function(args) {
  Thrift.TException.call(this, "FailureException");
  this.name = "FailureException";
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
  }
};
Thrift.inherits(FailureException, Thrift.TException);
FailureException.prototype.name = 'FailureException';
FailureException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailureException.prototype.write = function(output) {
  output.writeStructBegin('FailureException');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchGroupException = module.exports.NoSuchGroupException = function(args) {
  Thrift.TException.call(this, "NoSuchGroupException");
  this.name = "NoSuchGroupException";
};
Thrift.inherits(NoSuchGroupException, Thrift.TException);
NoSuchGroupException.prototype.name = 'NoSuchGroupException';
NoSuchGroupException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchGroupException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchGroupException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoSuchSamlException = module.exports.NoSuchSamlException = function(args) {
  Thrift.TException.call(this, "NoSuchSamlException");
  this.name = "NoSuchSamlException";
};
Thrift.inherits(NoSuchSamlException, Thrift.TException);
NoSuchSamlException.prototype.name = 'NoSuchSamlException';
NoSuchSamlException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoSuchSamlException.prototype.write = function(output) {
  output.writeStructBegin('NoSuchSamlException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupAlreadyExistsException = module.exports.GroupAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "GroupAlreadyExistsException");
  this.name = "GroupAlreadyExistsException";
};
Thrift.inherits(GroupAlreadyExistsException, Thrift.TException);
GroupAlreadyExistsException.prototype.name = 'GroupAlreadyExistsException';
GroupAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('GroupAlreadyExistsException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GridNotFoundException = module.exports.GridNotFoundException = function(args) {
  Thrift.TException.call(this, "GridNotFoundException");
  this.name = "GridNotFoundException";
};
Thrift.inherits(GridNotFoundException, Thrift.TException);
GridNotFoundException.prototype.name = 'GridNotFoundException';
GridNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GridNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('GridNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.X_GR_API_VERSION_VALUE = '2.10.0';
ttypes.MAX_USERS_PER_CREATE = 100;
ttypes.MAX_USERS_PER_GET = 1000;
ttypes.MAX_SOURCEIMAGE_BYTES = 6291456;
ttypes.MAX_AVATAR_BYTES = 65536;
ttypes.MAX_THUMBNAIL_BYTES = 16384;
