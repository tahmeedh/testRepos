//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./Message_types');
//HELPER FUNCTIONS AND STRUCTURES

var MessageService_getVersion_args = function(args) {
};
MessageService_getVersion_args.prototype = {};
MessageService_getVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getVersion_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MessageService_getVersion_result.prototype = {};
MessageService_getVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getVersion_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getGrcpAlias_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_getGrcpAlias_args.prototype = {};
MessageService_getGrcpAlias_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getGrcpAlias_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getGrcpAlias_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getGrcpAlias_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_getGrcpAlias_result.prototype = {};
MessageService_getGrcpAlias_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getGrcpAlias_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getGrcpAlias_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAvatar_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_getAvatar_args.prototype = {};
MessageService_getAvatar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAvatar_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAvatar_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAvatar_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AvatarStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_getAvatar_result.prototype = {};
MessageService_getAvatar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AvatarStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAvatar_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAvatar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAvatarThumbnail_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_getAvatarThumbnail_args.prototype = {};
MessageService_getAvatarThumbnail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAvatarThumbnail_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAvatarThumbnail_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAvatarThumbnail_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AvatarStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_getAvatarThumbnail_result.prototype = {};
MessageService_getAvatarThumbnail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AvatarStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAvatarThumbnail_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAvatarThumbnail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getContainingRosters_args = function(args) {
  this.grid = null;
  if (args) {
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
  }
};
MessageService_getContainingRosters_args.prototype = {};
MessageService_getContainingRosters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getContainingRosters_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getContainingRosters_args');
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 1);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getContainingRosters_result = function(args) {
  this.success = null;
  this.failure = null;
  this.gridNotFound = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.GridNotFoundException) {
    this.gridNotFound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.gridNotFound !== undefined && args.gridNotFound !== null) {
      this.gridNotFound = args.gridNotFound;
    }
  }
};
MessageService_getContainingRosters_result.prototype = {};
MessageService_getContainingRosters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = input.readString();
          this.success.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.gridNotFound = new ttypes.GridNotFoundException();
        this.gridNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getContainingRosters_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getContainingRosters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter54 in this.success) {
      if (this.success.hasOwnProperty(iter54)) {
        iter54 = this.success[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.gridNotFound !== null && this.gridNotFound !== undefined) {
    output.writeFieldBegin('gridNotFound', Thrift.Type.STRUCT, 2);
    this.gridNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getDefaultAvatar_args = function(args) {
};
MessageService_getDefaultAvatar_args.prototype = {};
MessageService_getDefaultAvatar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getDefaultAvatar_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getDefaultAvatar_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getDefaultAvatar_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AvatarStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
MessageService_getDefaultAvatar_result.prototype = {};
MessageService_getDefaultAvatar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AvatarStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getDefaultAvatar_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getDefaultAvatar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getDefaultAvatarThumbnail_args = function(args) {
};
MessageService_getDefaultAvatarThumbnail_args.prototype = {};
MessageService_getDefaultAvatarThumbnail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getDefaultAvatarThumbnail_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getDefaultAvatarThumbnail_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getDefaultAvatarThumbnail_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AvatarStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
MessageService_getDefaultAvatarThumbnail_result.prototype = {};
MessageService_getDefaultAvatarThumbnail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AvatarStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getDefaultAvatarThumbnail_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getDefaultAvatarThumbnail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_setAvatar_args = function(args) {
  this.userId = null;
  this.avatarSet = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.avatarSet !== undefined && args.avatarSet !== null) {
      this.avatarSet = new ttypes.AvatarSetStruct(args.avatarSet);
    }
  }
};
MessageService_setAvatar_args.prototype = {};
MessageService_setAvatar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarSet = new ttypes.AvatarSetStruct();
        this.avatarSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_setAvatar_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_setAvatar_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.avatarSet !== null && this.avatarSet !== undefined) {
    output.writeFieldBegin('avatarSet', Thrift.Type.STRUCT, 2);
    this.avatarSet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_setAvatar_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  this.avatarTooLarge = null;
  this.imageConversionFailure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args instanceof ttypes.AvatarTooLargeException) {
    this.avatarTooLarge = args;
    return;
  }
  if (args instanceof ttypes.ImageConversionException) {
    this.imageConversionFailure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
    if (args.avatarTooLarge !== undefined && args.avatarTooLarge !== null) {
      this.avatarTooLarge = args.avatarTooLarge;
    }
    if (args.imageConversionFailure !== undefined && args.imageConversionFailure !== null) {
      this.imageConversionFailure = args.imageConversionFailure;
    }
  }
};
MessageService_setAvatar_result.prototype = {};
MessageService_setAvatar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatarTooLarge = new ttypes.AvatarTooLargeException();
        this.avatarTooLarge.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.imageConversionFailure = new ttypes.ImageConversionException();
        this.imageConversionFailure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_setAvatar_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_setAvatar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  if (this.avatarTooLarge !== null && this.avatarTooLarge !== undefined) {
    output.writeFieldBegin('avatarTooLarge', Thrift.Type.STRUCT, 3);
    this.avatarTooLarge.write(output);
    output.writeFieldEnd();
  }
  if (this.imageConversionFailure !== null && this.imageConversionFailure !== undefined) {
    output.writeFieldBegin('imageConversionFailure', Thrift.Type.STRUCT, 4);
    this.imageConversionFailure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_deleteAvatar_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_deleteAvatar_args.prototype = {};
MessageService_deleteAvatar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteAvatar_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteAvatar_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_deleteAvatar_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_deleteAvatar_result.prototype = {};
MessageService_deleteAvatar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteAvatar_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteAvatar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getRoster_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_getRoster_args.prototype = {};
MessageService_getRoster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getRoster_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getRoster_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getRoster_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RosterStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_getRoster_result.prototype = {};
MessageService_getRoster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RosterStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getRoster_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getRoster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getRosterUpdates_args = function(args) {
  this.userId = null;
  this.rosterVersion = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.rosterVersion !== undefined && args.rosterVersion !== null) {
      this.rosterVersion = args.rosterVersion;
    }
  }
};
MessageService_getRosterUpdates_args.prototype = {};
MessageService_getRosterUpdates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rosterVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getRosterUpdates_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getRosterUpdates_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.rosterVersion !== null && this.rosterVersion !== undefined) {
    output.writeFieldBegin('rosterVersion', Thrift.Type.I64, 2);
    output.writeI64(this.rosterVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getRosterUpdates_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RosterStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_getRosterUpdates_result.prototype = {};
MessageService_getRosterUpdates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RosterStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getRosterUpdates_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getRosterUpdates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_updateRoster_args = function(args) {
  this.userId = null;
  this.changes = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.changes !== undefined && args.changes !== null) {
      this.changes = Thrift.copyList(args.changes, [ttypes.RosterEntryDeltaStruct]);
    }
  }
};
MessageService_updateRoster_args.prototype = {};
MessageService_updateRoster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.changes = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = new ttypes.RosterEntryDeltaStruct();
          elem58.read(input);
          this.changes.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_updateRoster_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_updateRoster_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.changes !== null && this.changes !== undefined) {
    output.writeFieldBegin('changes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.changes.length);
    for (var iter59 in this.changes) {
      if (this.changes.hasOwnProperty(iter59)) {
        iter59 = this.changes[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_updateRoster_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateRosterReturnStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_updateRoster_result.prototype = {};
MessageService_updateRoster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateRosterReturnStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_updateRoster_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_updateRoster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_setPublicProfile_args = function(args) {
  this.userId = null;
  this.publicProfile = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.publicProfile !== undefined && args.publicProfile !== null) {
      this.publicProfile = new ttypes.PublicProfileStruct(args.publicProfile);
    }
  }
};
MessageService_setPublicProfile_args.prototype = {};
MessageService_setPublicProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicProfile = new ttypes.PublicProfileStruct();
        this.publicProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_setPublicProfile_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_setPublicProfile_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.publicProfile !== null && this.publicProfile !== undefined) {
    output.writeFieldBegin('publicProfile', Thrift.Type.STRUCT, 2);
    this.publicProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_setPublicProfile_result = function(args) {
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_setPublicProfile_result.prototype = {};
MessageService_setPublicProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_setPublicProfile_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_setPublicProfile_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_createRosterGroup_args = function(args) {
  this.companyLegalName = null;
  this.groupName = null;
  if (args) {
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
  }
};
MessageService_createRosterGroup_args.prototype = {};
MessageService_createRosterGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_createRosterGroup_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_createRosterGroup_args');
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 1);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 2);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_createRosterGroup_result = function(args) {
  this.failure = null;
  this.noSuchCompany = null;
  this.groupAlreadyExists = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchCompanyException) {
    this.noSuchCompany = args;
    return;
  }
  if (args instanceof ttypes.GroupAlreadyExistsException) {
    this.groupAlreadyExists = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchCompany !== undefined && args.noSuchCompany !== null) {
      this.noSuchCompany = args.noSuchCompany;
    }
    if (args.groupAlreadyExists !== undefined && args.groupAlreadyExists !== null) {
      this.groupAlreadyExists = args.groupAlreadyExists;
    }
  }
};
MessageService_createRosterGroup_result.prototype = {};
MessageService_createRosterGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchCompany = new ttypes.NoSuchCompanyException();
        this.noSuchCompany.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupAlreadyExists = new ttypes.GroupAlreadyExistsException();
        this.groupAlreadyExists.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_createRosterGroup_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_createRosterGroup_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchCompany !== null && this.noSuchCompany !== undefined) {
    output.writeFieldBegin('noSuchCompany', Thrift.Type.STRUCT, 2);
    this.noSuchCompany.write(output);
    output.writeFieldEnd();
  }
  if (this.groupAlreadyExists !== null && this.groupAlreadyExists !== undefined) {
    output.writeFieldBegin('groupAlreadyExists', Thrift.Type.STRUCT, 3);
    this.groupAlreadyExists.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_deleteRosterGroup_args = function(args) {
  this.companyLegalName = null;
  this.groupName = null;
  if (args) {
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
  }
};
MessageService_deleteRosterGroup_args.prototype = {};
MessageService_deleteRosterGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteRosterGroup_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteRosterGroup_args');
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 1);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 2);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_deleteRosterGroup_result = function(args) {
  this.failure = null;
  this.noSuchCompany = null;
  this.noSuchGroup = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchCompanyException) {
    this.noSuchCompany = args;
    return;
  }
  if (args instanceof ttypes.NoSuchGroupException) {
    this.noSuchGroup = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchCompany !== undefined && args.noSuchCompany !== null) {
      this.noSuchCompany = args.noSuchCompany;
    }
    if (args.noSuchGroup !== undefined && args.noSuchGroup !== null) {
      this.noSuchGroup = args.noSuchGroup;
    }
  }
};
MessageService_deleteRosterGroup_result.prototype = {};
MessageService_deleteRosterGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchCompany = new ttypes.NoSuchCompanyException();
        this.noSuchCompany.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchGroup = new ttypes.NoSuchGroupException();
        this.noSuchGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_deleteRosterGroup_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_deleteRosterGroup_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchCompany !== null && this.noSuchCompany !== undefined) {
    output.writeFieldBegin('noSuchCompany', Thrift.Type.STRUCT, 2);
    this.noSuchCompany.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchGroup !== null && this.noSuchGroup !== undefined) {
    output.writeFieldBegin('noSuchGroup', Thrift.Type.STRUCT, 3);
    this.noSuchGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_addUsersToRosterGroup_args = function(args) {
  this.companyLegalName = null;
  this.groupName = null;
  this.userIds = null;
  if (args) {
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
MessageService_addUsersToRosterGroup_args.prototype = {};
MessageService_addUsersToRosterGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.userIds = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readI64();
          this.userIds.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_addUsersToRosterGroup_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_addUsersToRosterGroup_args');
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 1);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 2);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter64 in this.userIds) {
      if (this.userIds.hasOwnProperty(iter64)) {
        iter64 = this.userIds[iter64];
        output.writeI64(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_addUsersToRosterGroup_result = function(args) {
  this.failure = null;
  this.noSuchCompany = null;
  this.noSuchGroup = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchCompanyException) {
    this.noSuchCompany = args;
    return;
  }
  if (args instanceof ttypes.NoSuchGroupException) {
    this.noSuchGroup = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchCompany !== undefined && args.noSuchCompany !== null) {
      this.noSuchCompany = args.noSuchCompany;
    }
    if (args.noSuchGroup !== undefined && args.noSuchGroup !== null) {
      this.noSuchGroup = args.noSuchGroup;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_addUsersToRosterGroup_result.prototype = {};
MessageService_addUsersToRosterGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchCompany = new ttypes.NoSuchCompanyException();
        this.noSuchCompany.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchGroup = new ttypes.NoSuchGroupException();
        this.noSuchGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_addUsersToRosterGroup_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_addUsersToRosterGroup_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchCompany !== null && this.noSuchCompany !== undefined) {
    output.writeFieldBegin('noSuchCompany', Thrift.Type.STRUCT, 2);
    this.noSuchCompany.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchGroup !== null && this.noSuchGroup !== undefined) {
    output.writeFieldBegin('noSuchGroup', Thrift.Type.STRUCT, 3);
    this.noSuchGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 4);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_removeUsersFromRosterGroup_args = function(args) {
  this.companyLegalName = null;
  this.groupName = null;
  this.userIds = null;
  if (args) {
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
MessageService_removeUsersFromRosterGroup_args.prototype = {};
MessageService_removeUsersFromRosterGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.userIds = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readI64();
          this.userIds.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_removeUsersFromRosterGroup_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_removeUsersFromRosterGroup_args');
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 1);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 2);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter69 in this.userIds) {
      if (this.userIds.hasOwnProperty(iter69)) {
        iter69 = this.userIds[iter69];
        output.writeI64(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_removeUsersFromRosterGroup_result = function(args) {
  this.failure = null;
  this.noSuchCompany = null;
  this.noSuchGroup = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchCompanyException) {
    this.noSuchCompany = args;
    return;
  }
  if (args instanceof ttypes.NoSuchGroupException) {
    this.noSuchGroup = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchCompany !== undefined && args.noSuchCompany !== null) {
      this.noSuchCompany = args.noSuchCompany;
    }
    if (args.noSuchGroup !== undefined && args.noSuchGroup !== null) {
      this.noSuchGroup = args.noSuchGroup;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_removeUsersFromRosterGroup_result.prototype = {};
MessageService_removeUsersFromRosterGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchCompany = new ttypes.NoSuchCompanyException();
        this.noSuchCompany.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchGroup = new ttypes.NoSuchGroupException();
        this.noSuchGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_removeUsersFromRosterGroup_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_removeUsersFromRosterGroup_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchCompany !== null && this.noSuchCompany !== undefined) {
    output.writeFieldBegin('noSuchCompany', Thrift.Type.STRUCT, 2);
    this.noSuchCompany.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchGroup !== null && this.noSuchGroup !== undefined) {
    output.writeFieldBegin('noSuchGroup', Thrift.Type.STRUCT, 3);
    this.noSuchGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 4);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAllUsers_args = function(args) {
  this.pagingStruct = null;
  if (args) {
    if (args.pagingStruct !== undefined && args.pagingStruct !== null) {
      this.pagingStruct = new ttypes.PagingStruct(args.pagingStruct);
    }
  }
};
MessageService_getAllUsers_args.prototype = {};
MessageService_getAllUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagingStruct = new ttypes.PagingStruct();
        this.pagingStruct.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAllUsers_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAllUsers_args');
  if (this.pagingStruct !== null && this.pagingStruct !== undefined) {
    output.writeFieldBegin('pagingStruct', Thrift.Type.STRUCT, 1);
    this.pagingStruct.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAllUsers_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AllUsersResultStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
MessageService_getAllUsers_result.prototype = {};
MessageService_getAllUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AllUsersResultStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAllUsers_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAllUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_isEntitledForService_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
MessageService_isEntitledForService_args.prototype = {};
MessageService_isEntitledForService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_isEntitledForService_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_isEntitledForService_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_isEntitledForService_result = function(args) {
  this.success = null;
  this.failure = null;
  this.noSuchUser = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchUserException) {
    this.noSuchUser = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.noSuchUser !== undefined && args.noSuchUser !== null) {
      this.noSuchUser = args.noSuchUser;
    }
  }
};
MessageService_isEntitledForService_result.prototype = {};
MessageService_isEntitledForService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.noSuchUser = new ttypes.NoSuchUserException();
        this.noSuchUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_isEntitledForService_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_isEntitledForService_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.noSuchUser !== null && this.noSuchUser !== undefined) {
    output.writeFieldBegin('noSuchUser', Thrift.Type.STRUCT, 2);
    this.noSuchUser.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAllCompanies_args = function(args) {
  this.pagingStruct = null;
  if (args) {
    if (args.pagingStruct !== undefined && args.pagingStruct !== null) {
      this.pagingStruct = new ttypes.CompanyPagingStruct(args.pagingStruct);
    }
  }
};
MessageService_getAllCompanies_args.prototype = {};
MessageService_getAllCompanies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagingStruct = new ttypes.CompanyPagingStruct();
        this.pagingStruct.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAllCompanies_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAllCompanies_args');
  if (this.pagingStruct !== null && this.pagingStruct !== undefined) {
    output.writeFieldBegin('pagingStruct', Thrift.Type.STRUCT, 1);
    this.pagingStruct.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getAllCompanies_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AllCompaniesResultStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
MessageService_getAllCompanies_result.prototype = {};
MessageService_getAllCompanies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AllCompaniesResultStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getAllCompanies_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getAllCompanies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getCompanyById_args = function(args) {
  this.companyId = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
  }
};
MessageService_getCompanyById_args.prototype = {};
MessageService_getCompanyById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getCompanyById_args.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getCompanyById_args');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageService_getCompanyById_result = function(args) {
  this.success = null;
  this.failure = null;
  this.companyNotFound = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.NoSuchCompanyException) {
    this.companyNotFound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompanyResultStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.companyNotFound !== undefined && args.companyNotFound !== null) {
      this.companyNotFound = args.companyNotFound;
    }
  }
};
MessageService_getCompanyById_result.prototype = {};
MessageService_getCompanyById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompanyResultStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.companyNotFound = new ttypes.NoSuchCompanyException();
        this.companyNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageService_getCompanyById_result.prototype.write = function(output) {
  output.writeStructBegin('MessageService_getCompanyById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.companyNotFound !== null && this.companyNotFound !== undefined) {
    output.writeFieldBegin('companyNotFound', Thrift.Type.STRUCT, 2);
    this.companyNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
MessageServiceClient.prototype = {};
MessageServiceClient.prototype.seqid = function() { return this._seqid; };
MessageServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

MessageServiceClient.prototype.getVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVersion();
  }
};

MessageServiceClient.prototype.send_getVersion = function() {
  var output = new this.pClass(this.output);
  var args = new MessageService_getVersion_args();
  try {
    output.writeMessageBegin('getVersion', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVersion failed: unknown result');
};

MessageServiceClient.prototype.getGrcpAlias = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGrcpAlias(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGrcpAlias(userId);
  }
};

MessageServiceClient.prototype.send_getGrcpAlias = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_getGrcpAlias_args(params);
  try {
    output.writeMessageBegin('getGrcpAlias', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getGrcpAlias = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getGrcpAlias_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGrcpAlias failed: unknown result');
};

MessageServiceClient.prototype.getAvatar = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAvatar(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAvatar(userId);
  }
};

MessageServiceClient.prototype.send_getAvatar = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_getAvatar_args(params);
  try {
    output.writeMessageBegin('getAvatar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getAvatar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getAvatar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAvatar failed: unknown result');
};

MessageServiceClient.prototype.getAvatarThumbnail = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAvatarThumbnail(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAvatarThumbnail(userId);
  }
};

MessageServiceClient.prototype.send_getAvatarThumbnail = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_getAvatarThumbnail_args(params);
  try {
    output.writeMessageBegin('getAvatarThumbnail', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getAvatarThumbnail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getAvatarThumbnail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAvatarThumbnail failed: unknown result');
};

MessageServiceClient.prototype.getContainingRosters = function(grid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContainingRosters(grid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContainingRosters(grid);
  }
};

MessageServiceClient.prototype.send_getContainingRosters = function(grid) {
  var output = new this.pClass(this.output);
  var params = {
    grid: grid
  };
  var args = new MessageService_getContainingRosters_args(params);
  try {
    output.writeMessageBegin('getContainingRosters', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getContainingRosters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getContainingRosters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.gridNotFound) {
    return callback(result.gridNotFound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContainingRosters failed: unknown result');
};

MessageServiceClient.prototype.getDefaultAvatar = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultAvatar();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultAvatar();
  }
};

MessageServiceClient.prototype.send_getDefaultAvatar = function() {
  var output = new this.pClass(this.output);
  var args = new MessageService_getDefaultAvatar_args();
  try {
    output.writeMessageBegin('getDefaultAvatar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getDefaultAvatar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getDefaultAvatar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultAvatar failed: unknown result');
};

MessageServiceClient.prototype.getDefaultAvatarThumbnail = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultAvatarThumbnail();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultAvatarThumbnail();
  }
};

MessageServiceClient.prototype.send_getDefaultAvatarThumbnail = function() {
  var output = new this.pClass(this.output);
  var args = new MessageService_getDefaultAvatarThumbnail_args();
  try {
    output.writeMessageBegin('getDefaultAvatarThumbnail', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getDefaultAvatarThumbnail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getDefaultAvatarThumbnail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultAvatarThumbnail failed: unknown result');
};

MessageServiceClient.prototype.setAvatar = function(userId, avatarSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setAvatar(userId, avatarSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setAvatar(userId, avatarSet);
  }
};

MessageServiceClient.prototype.send_setAvatar = function(userId, avatarSet) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    avatarSet: avatarSet
  };
  var args = new MessageService_setAvatar_args(params);
  try {
    output.writeMessageBegin('setAvatar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_setAvatar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_setAvatar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.avatarTooLarge) {
    return callback(result.avatarTooLarge);
  }
  if (null !== result.imageConversionFailure) {
    return callback(result.imageConversionFailure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setAvatar failed: unknown result');
};

MessageServiceClient.prototype.deleteAvatar = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAvatar(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAvatar(userId);
  }
};

MessageServiceClient.prototype.send_deleteAvatar = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_deleteAvatar_args(params);
  try {
    output.writeMessageBegin('deleteAvatar', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_deleteAvatar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deleteAvatar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteAvatar failed: unknown result');
};

MessageServiceClient.prototype.getRoster = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRoster(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRoster(userId);
  }
};

MessageServiceClient.prototype.send_getRoster = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_getRoster_args(params);
  try {
    output.writeMessageBegin('getRoster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getRoster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getRoster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRoster failed: unknown result');
};

MessageServiceClient.prototype.getRosterUpdates = function(userId, rosterVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRosterUpdates(userId, rosterVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRosterUpdates(userId, rosterVersion);
  }
};

MessageServiceClient.prototype.send_getRosterUpdates = function(userId, rosterVersion) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    rosterVersion: rosterVersion
  };
  var args = new MessageService_getRosterUpdates_args(params);
  try {
    output.writeMessageBegin('getRosterUpdates', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getRosterUpdates = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getRosterUpdates_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRosterUpdates failed: unknown result');
};

MessageServiceClient.prototype.updateRoster = function(userId, changes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRoster(userId, changes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRoster(userId, changes);
  }
};

MessageServiceClient.prototype.send_updateRoster = function(userId, changes) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    changes: changes
  };
  var args = new MessageService_updateRoster_args(params);
  try {
    output.writeMessageBegin('updateRoster', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_updateRoster = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_updateRoster_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateRoster failed: unknown result');
};

MessageServiceClient.prototype.setPublicProfile = function(userId, publicProfile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPublicProfile(userId, publicProfile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPublicProfile(userId, publicProfile);
  }
};

MessageServiceClient.prototype.send_setPublicProfile = function(userId, publicProfile) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    publicProfile: publicProfile
  };
  var args = new MessageService_setPublicProfile_args(params);
  try {
    output.writeMessageBegin('setPublicProfile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_setPublicProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_setPublicProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  callback(null);
};

MessageServiceClient.prototype.createRosterGroup = function(companyLegalName, groupName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createRosterGroup(companyLegalName, groupName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createRosterGroup(companyLegalName, groupName);
  }
};

MessageServiceClient.prototype.send_createRosterGroup = function(companyLegalName, groupName) {
  var output = new this.pClass(this.output);
  var params = {
    companyLegalName: companyLegalName,
    groupName: groupName
  };
  var args = new MessageService_createRosterGroup_args(params);
  try {
    output.writeMessageBegin('createRosterGroup', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_createRosterGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_createRosterGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchCompany) {
    return callback(result.noSuchCompany);
  }
  if (null !== result.groupAlreadyExists) {
    return callback(result.groupAlreadyExists);
  }
  callback(null);
};

MessageServiceClient.prototype.deleteRosterGroup = function(companyLegalName, groupName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteRosterGroup(companyLegalName, groupName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteRosterGroup(companyLegalName, groupName);
  }
};

MessageServiceClient.prototype.send_deleteRosterGroup = function(companyLegalName, groupName) {
  var output = new this.pClass(this.output);
  var params = {
    companyLegalName: companyLegalName,
    groupName: groupName
  };
  var args = new MessageService_deleteRosterGroup_args(params);
  try {
    output.writeMessageBegin('deleteRosterGroup', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_deleteRosterGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_deleteRosterGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchCompany) {
    return callback(result.noSuchCompany);
  }
  if (null !== result.noSuchGroup) {
    return callback(result.noSuchGroup);
  }
  callback(null);
};

MessageServiceClient.prototype.addUsersToRosterGroup = function(companyLegalName, groupName, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addUsersToRosterGroup(companyLegalName, groupName, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addUsersToRosterGroup(companyLegalName, groupName, userIds);
  }
};

MessageServiceClient.prototype.send_addUsersToRosterGroup = function(companyLegalName, groupName, userIds) {
  var output = new this.pClass(this.output);
  var params = {
    companyLegalName: companyLegalName,
    groupName: groupName,
    userIds: userIds
  };
  var args = new MessageService_addUsersToRosterGroup_args(params);
  try {
    output.writeMessageBegin('addUsersToRosterGroup', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_addUsersToRosterGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_addUsersToRosterGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchCompany) {
    return callback(result.noSuchCompany);
  }
  if (null !== result.noSuchGroup) {
    return callback(result.noSuchGroup);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  callback(null);
};

MessageServiceClient.prototype.removeUsersFromRosterGroup = function(companyLegalName, groupName, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeUsersFromRosterGroup(companyLegalName, groupName, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeUsersFromRosterGroup(companyLegalName, groupName, userIds);
  }
};

MessageServiceClient.prototype.send_removeUsersFromRosterGroup = function(companyLegalName, groupName, userIds) {
  var output = new this.pClass(this.output);
  var params = {
    companyLegalName: companyLegalName,
    groupName: groupName,
    userIds: userIds
  };
  var args = new MessageService_removeUsersFromRosterGroup_args(params);
  try {
    output.writeMessageBegin('removeUsersFromRosterGroup', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_removeUsersFromRosterGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_removeUsersFromRosterGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchCompany) {
    return callback(result.noSuchCompany);
  }
  if (null !== result.noSuchGroup) {
    return callback(result.noSuchGroup);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  callback(null);
};

MessageServiceClient.prototype.getAllUsers = function(pagingStruct, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllUsers(pagingStruct);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllUsers(pagingStruct);
  }
};

MessageServiceClient.prototype.send_getAllUsers = function(pagingStruct) {
  var output = new this.pClass(this.output);
  var params = {
    pagingStruct: pagingStruct
  };
  var args = new MessageService_getAllUsers_args(params);
  try {
    output.writeMessageBegin('getAllUsers', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getAllUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getAllUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllUsers failed: unknown result');
};

MessageServiceClient.prototype.isEntitledForService = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isEntitledForService(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isEntitledForService(userId);
  }
};

MessageServiceClient.prototype.send_isEntitledForService = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new MessageService_isEntitledForService_args(params);
  try {
    output.writeMessageBegin('isEntitledForService', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_isEntitledForService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_isEntitledForService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.noSuchUser) {
    return callback(result.noSuchUser);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isEntitledForService failed: unknown result');
};

MessageServiceClient.prototype.getAllCompanies = function(pagingStruct, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllCompanies(pagingStruct);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllCompanies(pagingStruct);
  }
};

MessageServiceClient.prototype.send_getAllCompanies = function(pagingStruct) {
  var output = new this.pClass(this.output);
  var params = {
    pagingStruct: pagingStruct
  };
  var args = new MessageService_getAllCompanies_args(params);
  try {
    output.writeMessageBegin('getAllCompanies', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getAllCompanies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getAllCompanies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllCompanies failed: unknown result');
};

MessageServiceClient.prototype.getCompanyById = function(companyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompanyById(companyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompanyById(companyId);
  }
};

MessageServiceClient.prototype.send_getCompanyById = function(companyId) {
  var output = new this.pClass(this.output);
  var params = {
    companyId: companyId
  };
  var args = new MessageService_getCompanyById_args(params);
  try {
    output.writeMessageBegin('getCompanyById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

MessageServiceClient.prototype.recv_getCompanyById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MessageService_getCompanyById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.companyNotFound) {
    return callback(result.companyNotFound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompanyById failed: unknown result');
};
var MessageServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
MessageServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
MessageServiceProcessor.prototype.process_getVersion = function(seqid, input, output) {
  var args = new MessageService_getVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVersion.length === 0) {
    Q.fcall(this._handler.getVersion.bind(this._handler)
    ).then(function(result) {
      var result_obj = new MessageService_getVersion_result({success: result});
      output.writeMessageBegin("getVersion", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getVersion", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getVersion(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new MessageService_getVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getGrcpAlias = function(seqid, input, output) {
  var args = new MessageService_getGrcpAlias_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGrcpAlias.length === 1) {
    Q.fcall(this._handler.getGrcpAlias.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_getGrcpAlias_result({success: result});
      output.writeMessageBegin("getGrcpAlias", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_getGrcpAlias_result(err);
        output.writeMessageBegin("getGrcpAlias", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGrcpAlias", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getGrcpAlias(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_getGrcpAlias_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getGrcpAlias", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGrcpAlias", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getAvatar = function(seqid, input, output) {
  var args = new MessageService_getAvatar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAvatar.length === 1) {
    Q.fcall(this._handler.getAvatar.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_getAvatar_result({success: result});
      output.writeMessageBegin("getAvatar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_getAvatar_result(err);
        output.writeMessageBegin("getAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAvatar(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_getAvatar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getAvatarThumbnail = function(seqid, input, output) {
  var args = new MessageService_getAvatarThumbnail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAvatarThumbnail.length === 1) {
    Q.fcall(this._handler.getAvatarThumbnail.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_getAvatarThumbnail_result({success: result});
      output.writeMessageBegin("getAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_getAvatarThumbnail_result(err);
        output.writeMessageBegin("getAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAvatarThumbnail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAvatarThumbnail(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_getAvatarThumbnail_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAvatarThumbnail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getContainingRosters = function(seqid, input, output) {
  var args = new MessageService_getContainingRosters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContainingRosters.length === 1) {
    Q.fcall(this._handler.getContainingRosters.bind(this._handler),
      args.grid
    ).then(function(result) {
      var result_obj = new MessageService_getContainingRosters_result({success: result});
      output.writeMessageBegin("getContainingRosters", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.GridNotFoundException) {
        result = new MessageService_getContainingRosters_result(err);
        output.writeMessageBegin("getContainingRosters", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContainingRosters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getContainingRosters(args.grid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.GridNotFoundException) {
        result_obj = new MessageService_getContainingRosters_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContainingRosters", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContainingRosters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getDefaultAvatar = function(seqid, input, output) {
  var args = new MessageService_getDefaultAvatar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultAvatar.length === 0) {
    Q.fcall(this._handler.getDefaultAvatar.bind(this._handler)
    ).then(function(result) {
      var result_obj = new MessageService_getDefaultAvatar_result({success: result});
      output.writeMessageBegin("getDefaultAvatar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new MessageService_getDefaultAvatar_result(err);
        output.writeMessageBegin("getDefaultAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultAvatar(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new MessageService_getDefaultAvatar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getDefaultAvatarThumbnail = function(seqid, input, output) {
  var args = new MessageService_getDefaultAvatarThumbnail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDefaultAvatarThumbnail.length === 0) {
    Q.fcall(this._handler.getDefaultAvatarThumbnail.bind(this._handler)
    ).then(function(result) {
      var result_obj = new MessageService_getDefaultAvatarThumbnail_result({success: result});
      output.writeMessageBegin("getDefaultAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new MessageService_getDefaultAvatarThumbnail_result(err);
        output.writeMessageBegin("getDefaultAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultAvatarThumbnail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultAvatarThumbnail(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new MessageService_getDefaultAvatarThumbnail_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultAvatarThumbnail", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultAvatarThumbnail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_setAvatar = function(seqid, input, output) {
  var args = new MessageService_setAvatar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setAvatar.length === 2) {
    Q.fcall(this._handler.setAvatar.bind(this._handler),
      args.userId,
      args.avatarSet
    ).then(function(result) {
      var result_obj = new MessageService_setAvatar_result({success: result});
      output.writeMessageBegin("setAvatar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException || err instanceof ttypes.AvatarTooLargeException || err instanceof ttypes.ImageConversionException) {
        result = new MessageService_setAvatar_result(err);
        output.writeMessageBegin("setAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setAvatar(args.userId, args.avatarSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException || err instanceof ttypes.AvatarTooLargeException || err instanceof ttypes.ImageConversionException) {
        result_obj = new MessageService_setAvatar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_deleteAvatar = function(seqid, input, output) {
  var args = new MessageService_deleteAvatar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAvatar.length === 1) {
    Q.fcall(this._handler.deleteAvatar.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_deleteAvatar_result({success: result});
      output.writeMessageBegin("deleteAvatar", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_deleteAvatar_result(err);
        output.writeMessageBegin("deleteAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteAvatar(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_deleteAvatar_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAvatar", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAvatar", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getRoster = function(seqid, input, output) {
  var args = new MessageService_getRoster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRoster.length === 1) {
    Q.fcall(this._handler.getRoster.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_getRoster_result({success: result});
      output.writeMessageBegin("getRoster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_getRoster_result(err);
        output.writeMessageBegin("getRoster", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRoster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRoster(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_getRoster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRoster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRoster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getRosterUpdates = function(seqid, input, output) {
  var args = new MessageService_getRosterUpdates_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRosterUpdates.length === 2) {
    Q.fcall(this._handler.getRosterUpdates.bind(this._handler),
      args.userId,
      args.rosterVersion
    ).then(function(result) {
      var result_obj = new MessageService_getRosterUpdates_result({success: result});
      output.writeMessageBegin("getRosterUpdates", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_getRosterUpdates_result(err);
        output.writeMessageBegin("getRosterUpdates", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRosterUpdates", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRosterUpdates(args.userId, args.rosterVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_getRosterUpdates_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRosterUpdates", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRosterUpdates", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_updateRoster = function(seqid, input, output) {
  var args = new MessageService_updateRoster_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRoster.length === 2) {
    Q.fcall(this._handler.updateRoster.bind(this._handler),
      args.userId,
      args.changes
    ).then(function(result) {
      var result_obj = new MessageService_updateRoster_result({success: result});
      output.writeMessageBegin("updateRoster", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_updateRoster_result(err);
        output.writeMessageBegin("updateRoster", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRoster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateRoster(args.userId, args.changes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_updateRoster_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateRoster", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRoster", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_setPublicProfile = function(seqid, input, output) {
  var args = new MessageService_setPublicProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPublicProfile.length === 2) {
    Q.fcall(this._handler.setPublicProfile.bind(this._handler),
      args.userId,
      args.publicProfile
    ).then(function(result) {
      var result_obj = new MessageService_setPublicProfile_result({success: result});
      output.writeMessageBegin("setPublicProfile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_setPublicProfile_result(err);
        output.writeMessageBegin("setPublicProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPublicProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setPublicProfile(args.userId, args.publicProfile, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_setPublicProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPublicProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPublicProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_createRosterGroup = function(seqid, input, output) {
  var args = new MessageService_createRosterGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createRosterGroup.length === 2) {
    Q.fcall(this._handler.createRosterGroup.bind(this._handler),
      args.companyLegalName,
      args.groupName
    ).then(function(result) {
      var result_obj = new MessageService_createRosterGroup_result({success: result});
      output.writeMessageBegin("createRosterGroup", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.GroupAlreadyExistsException) {
        result = new MessageService_createRosterGroup_result(err);
        output.writeMessageBegin("createRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createRosterGroup(args.companyLegalName, args.groupName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.GroupAlreadyExistsException) {
        result_obj = new MessageService_createRosterGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_deleteRosterGroup = function(seqid, input, output) {
  var args = new MessageService_deleteRosterGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteRosterGroup.length === 2) {
    Q.fcall(this._handler.deleteRosterGroup.bind(this._handler),
      args.companyLegalName,
      args.groupName
    ).then(function(result) {
      var result_obj = new MessageService_deleteRosterGroup_result({success: result});
      output.writeMessageBegin("deleteRosterGroup", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException) {
        result = new MessageService_deleteRosterGroup_result(err);
        output.writeMessageBegin("deleteRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteRosterGroup(args.companyLegalName, args.groupName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException) {
        result_obj = new MessageService_deleteRosterGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_addUsersToRosterGroup = function(seqid, input, output) {
  var args = new MessageService_addUsersToRosterGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addUsersToRosterGroup.length === 3) {
    Q.fcall(this._handler.addUsersToRosterGroup.bind(this._handler),
      args.companyLegalName,
      args.groupName,
      args.userIds
    ).then(function(result) {
      var result_obj = new MessageService_addUsersToRosterGroup_result({success: result});
      output.writeMessageBegin("addUsersToRosterGroup", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_addUsersToRosterGroup_result(err);
        output.writeMessageBegin("addUsersToRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addUsersToRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addUsersToRosterGroup(args.companyLegalName, args.groupName, args.userIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_addUsersToRosterGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addUsersToRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addUsersToRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_removeUsersFromRosterGroup = function(seqid, input, output) {
  var args = new MessageService_removeUsersFromRosterGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeUsersFromRosterGroup.length === 3) {
    Q.fcall(this._handler.removeUsersFromRosterGroup.bind(this._handler),
      args.companyLegalName,
      args.groupName,
      args.userIds
    ).then(function(result) {
      var result_obj = new MessageService_removeUsersFromRosterGroup_result({success: result});
      output.writeMessageBegin("removeUsersFromRosterGroup", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_removeUsersFromRosterGroup_result(err);
        output.writeMessageBegin("removeUsersFromRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeUsersFromRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeUsersFromRosterGroup(args.companyLegalName, args.groupName, args.userIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException || err instanceof ttypes.NoSuchGroupException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_removeUsersFromRosterGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeUsersFromRosterGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeUsersFromRosterGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getAllUsers = function(seqid, input, output) {
  var args = new MessageService_getAllUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllUsers.length === 1) {
    Q.fcall(this._handler.getAllUsers.bind(this._handler),
      args.pagingStruct
    ).then(function(result) {
      var result_obj = new MessageService_getAllUsers_result({success: result});
      output.writeMessageBegin("getAllUsers", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new MessageService_getAllUsers_result(err);
        output.writeMessageBegin("getAllUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllUsers(args.pagingStruct, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new MessageService_getAllUsers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_isEntitledForService = function(seqid, input, output) {
  var args = new MessageService_isEntitledForService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isEntitledForService.length === 1) {
    Q.fcall(this._handler.isEntitledForService.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new MessageService_isEntitledForService_result({success: result});
      output.writeMessageBegin("isEntitledForService", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result = new MessageService_isEntitledForService_result(err);
        output.writeMessageBegin("isEntitledForService", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isEntitledForService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isEntitledForService(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchUserException) {
        result_obj = new MessageService_isEntitledForService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isEntitledForService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isEntitledForService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getAllCompanies = function(seqid, input, output) {
  var args = new MessageService_getAllCompanies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllCompanies.length === 1) {
    Q.fcall(this._handler.getAllCompanies.bind(this._handler),
      args.pagingStruct
    ).then(function(result) {
      var result_obj = new MessageService_getAllCompanies_result({success: result});
      output.writeMessageBegin("getAllCompanies", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new MessageService_getAllCompanies_result(err);
        output.writeMessageBegin("getAllCompanies", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllCompanies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllCompanies(args.pagingStruct, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new MessageService_getAllCompanies_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllCompanies", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllCompanies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
MessageServiceProcessor.prototype.process_getCompanyById = function(seqid, input, output) {
  var args = new MessageService_getCompanyById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompanyById.length === 1) {
    Q.fcall(this._handler.getCompanyById.bind(this._handler),
      args.companyId
    ).then(function(result) {
      var result_obj = new MessageService_getCompanyById_result({success: result});
      output.writeMessageBegin("getCompanyById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException) {
        result = new MessageService_getCompanyById_result(err);
        output.writeMessageBegin("getCompanyById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompanyById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCompanyById(args.companyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.NoSuchCompanyException) {
        result_obj = new MessageService_getCompanyById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCompanyById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompanyById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
