//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./Message_types');
import PresenceSharingLevel = ttypes.PresenceSharingLevel
import RosterEntryOperation = ttypes.RosterEntryOperation
import AliasType = ttypes.AliasType
import AttributeEditability = ttypes.AttributeEditability
import AttributeVisibility = ttypes.AttributeVisibility
import X_GR_API_VERSION_VALUE = ttypes.X_GR_API_VERSION_VALUE
import MAX_USERS_PER_CREATE = ttypes.MAX_USERS_PER_CREATE
import MAX_USERS_PER_GET = ttypes.MAX_USERS_PER_GET
import MAX_SOURCEIMAGE_BYTES = ttypes.MAX_SOURCEIMAGE_BYTES
import MAX_AVATAR_BYTES = ttypes.MAX_AVATAR_BYTES
import MAX_THUMBNAIL_BYTES = ttypes.MAX_THUMBNAIL_BYTES
import NoSuchCompanyException = ttypes.NoSuchCompanyException
import CompanyAlreadyExistsException = ttypes.CompanyAlreadyExistsException
import NoSuchUserException = ttypes.NoSuchUserException
import InvalidUserCountException = ttypes.InvalidUserCountException
import UserCountTooLargeException = ttypes.UserCountTooLargeException
import AvatarTooLargeException = ttypes.AvatarTooLargeException
import ImageConversionException = ttypes.ImageConversionException
import FailureException = ttypes.FailureException
import NoSuchGroupException = ttypes.NoSuchGroupException
import NoSuchSamlException = ttypes.NoSuchSamlException
import GroupAlreadyExistsException = ttypes.GroupAlreadyExistsException
import GridNotFoundException = ttypes.GridNotFoundException
import UserNameStruct = ttypes.UserNameStruct
import UserStruct = ttypes.UserStruct
import AvatarSetStruct = ttypes.AvatarSetStruct
import AvatarStruct = ttypes.AvatarStruct
import RosterEntryStruct = ttypes.RosterEntryStruct
import RosterStruct = ttypes.RosterStruct
import RosterEntryDeltaStruct = ttypes.RosterEntryDeltaStruct
import TaggedStringStruct = ttypes.TaggedStringStruct
import AliasStruct = ttypes.AliasStruct
import ReportsToStruct = ttypes.ReportsToStruct
import UserProfileAttributeSettingStruct = ttypes.UserProfileAttributeSettingStruct
import UserProfileAttributeValueStruct = ttypes.UserProfileAttributeValueStruct
import UserProfileAttributeCollectionValueStruct = ttypes.UserProfileAttributeCollectionValueStruct
import UserProfileUserSetAttributesStruct = ttypes.UserProfileUserSetAttributesStruct
import PublicProfileStruct = ttypes.PublicProfileStruct
import UpdateRosterReturnStruct = ttypes.UpdateRosterReturnStruct
import UserResultStruct = ttypes.UserResultStruct
import AllUsersResultStruct = ttypes.AllUsersResultStruct
import PagingStruct = ttypes.PagingStruct
import CompanyProfileStruct = ttypes.CompanyProfileStruct
import CompanyLogoStruct = ttypes.CompanyLogoStruct
import CompanyResultStruct = ttypes.CompanyResultStruct
import AllCompaniesResultStruct = ttypes.AllCompaniesResultStruct
import CompanyPagingStruct = ttypes.CompanyPagingStruct

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Gets the major, minor, build, and revision numbers of the Service Manager's assembly
   * 
   * @return
   *   A string representing the major, minor, build, and revision numbers of the Service Manager's assembly.
   */
  getVersion(): string;

  /**
   * Gets the major, minor, build, and revision numbers of the Service Manager's assembly
   * 
   * @return
   *   A string representing the major, minor, build, and revision numbers of the Service Manager's assembly.
   */
  getVersion(callback?: (error: void, response: string)=>void): void;

  /**
   * Returns the GRCP alias for a given Service Manager User Id.
   * 
   */
  getGrcpAlias(userId: Int64): string;

  /**
   * Returns the GRCP alias for a given Service Manager User Id.
   * 
   */
  getGrcpAlias(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: string)=>void): void;

  /**
   * Returns the larger Avatar image (if exists) for a given Service Manager User Id to be displayed in the Profile Card.
   * 
   * @return
   *   An AvatarStruct including mime type, image (as Base64 string), version, and defaultAvatar flag.
   *   If the defaultAvatar flag is set, the image and mime type will be null.  A default image is to be display in that situation.
   */
  getAvatar(userId: Int64): AvatarStruct;

  /**
   * Returns the larger Avatar image (if exists) for a given Service Manager User Id to be displayed in the Profile Card.
   * 
   * @return
   *   An AvatarStruct including mime type, image (as Base64 string), version, and defaultAvatar flag.
   *   If the defaultAvatar flag is set, the image and mime type will be null.  A default image is to be display in that situation.
   */
  getAvatar(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: AvatarStruct)=>void): void;

  /**
   * Returns the smaller Avatar Thumbnail image for a given Service Manager User Id
   * to be displayed next to Roster Entries and the header bar.
   * 
   * @return
   *   An AvatarStruct including mime type, image (as Base64 string), version, and defaultAvatar flag.
   *   If the defaultAvatar flag is set, the image and mime type will be null.  A default image is to be display in that situation.
   */
  getAvatarThumbnail(userId: Int64): AvatarStruct;

  /**
   * Returns the smaller Avatar Thumbnail image for a given Service Manager User Id
   * to be displayed next to Roster Entries and the header bar.
   * 
   * @return
   *   An AvatarStruct including mime type, image (as Base64 string), version, and defaultAvatar flag.
   *   If the defaultAvatar flag is set, the image and mime type will be null.  A default image is to be display in that situation.
   */
  getAvatarThumbnail(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: AvatarStruct)=>void): void;

  /**
   * Find GRID's from users whose roster contains a roster entry corresponding to the passed in grid and return them in a list.
   * 
   * @return
   *   a list of GRID's.
   */
  getContainingRosters(grid: string): string[];

  /**
   * Find GRID's from users whose roster contains a roster entry corresponding to the passed in grid and return them in a list.
   * 
   * @return
   *   a list of GRID's.
   */
  getContainingRosters(grid: string, callback?: (error: ttypes.FailureException | ttypes.GridNotFoundException, response: string[])=>void): void;

  /**
   * Returns the default (generic) larger default Avatar image
   * for display in the Profile Card for users without a specific image.
   * 
   * @return
   *   Avatar struct with image and mimetype populated.  Version will always be 0.  DefaultAvatar will always be true.
   */
  getDefaultAvatar(): AvatarStruct;

  /**
   * Returns the default (generic) larger default Avatar image
   * for display in the Profile Card for users without a specific image.
   * 
   * @return
   *   Avatar struct with image and mimetype populated.  Version will always be 0.  DefaultAvatar will always be true.
   */
  getDefaultAvatar(callback?: (error: ttypes.FailureException, response: AvatarStruct)=>void): void;

  /**
   * Returns the default (generic) smaller AvatarThumbnail image
   * for display next to Roster Entries and the header bar for users without a specific image.
   * 
   * @return
   *   Avatar struct with image and mimetype populated.  Version will always be 0.  DefaultAvatar will always be true.
   */
  getDefaultAvatarThumbnail(): AvatarStruct;

  /**
   * Returns the default (generic) smaller AvatarThumbnail image
   * for display next to Roster Entries and the header bar for users without a specific image.
   * 
   * @return
   *   Avatar struct with image and mimetype populated.  Version will always be 0.  DefaultAvatar will always be true.
   */
  getDefaultAvatarThumbnail(callback?: (error: ttypes.FailureException, response: AvatarStruct)=>void): void;

  /**
   * Sets the user's source image, avatar, and avatar thumbnail to the new images provided.  Must pass all three images and mime types.
   * 
   * @return
   *   The new version for the updated avatar version
   */
  setAvatar(userId: Int64, avatarSet: AvatarSetStruct): number;

  /**
   * Sets the user's source image, avatar, and avatar thumbnail to the new images provided.  Must pass all three images and mime types.
   * 
   * @return
   *   The new version for the updated avatar version
   */
  setAvatar(userId: Int64, avatarSet: AvatarSetStruct, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException | ttypes.AvatarTooLargeException | ttypes.ImageConversionException, response: number)=>void): void;

  /**
   * Removes the user's source image, avatar, and avatar thumbnail images
   * This set the images and mime types stored in the Service Manager database to null.
   * A future call to getAvatar (after deleting the avatar) would return a AvatarStruct with the defaultAvatar flag set to true.
   * 
   * @return
   *   The new version for the deleted avatar
   * 
   */
  deleteAvatar(userId: Int64): number;

  /**
   * Removes the user's source image, avatar, and avatar thumbnail images
   * This set the images and mime types stored in the Service Manager database to null.
   * A future call to getAvatar (after deleting the avatar) would return a AvatarStruct with the defaultAvatar flag set to true.
   * 
   * @return
   *   The new version for the deleted avatar
   * 
   */
  deleteAvatar(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: number)=>void): void;

  /**
   * Returns the user's roster entries
   * 
   * @return
   *   A RosterStruct including the roster version and a list of roster entries.  For more details, see the comments on RosterStruct and RosterEntryStruct.
   */
  getRoster(userId: Int64): RosterStruct;

  /**
   * Returns the user's roster entries
   * 
   * @return
   *   A RosterStruct including the roster version and a list of roster entries.  For more details, see the comments on RosterStruct and RosterEntryStruct.
   */
  getRoster(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: RosterStruct)=>void): void;

  /**
   * Returns adds, changes, and deletes to a user's roster since the given roster version
   * 
   * @return
   *   A RosterStruct including the roster version and a list of roster entries updates (adds, changes, and deletes).
   *   For more details, see the comments on RosterStruct and RosterEntryStruct.
   */
  getRosterUpdates(userId: Int64, rosterVersion: Int64): RosterStruct;

  /**
   * Returns adds, changes, and deletes to a user's roster since the given roster version
   * 
   * @return
   *   A RosterStruct including the roster version and a list of roster entries updates (adds, changes, and deletes).
   *   For more details, see the comments on RosterStruct and RosterEntryStruct.
   */
  getRosterUpdates(userId: Int64, rosterVersion: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: RosterStruct)=>void): void;

  /**
   * Performs adds, changes, and deletes on a list of roster entries for a given Service Manager User Id.
   * Each entry on the roster entry list will specify the operation to be performed (either add, change, or delete).
   * 
   * The information in the roster entry (such as first name, last name or nickname) is kept in sync with user it points to (target user) if
   * the roster entry is _synced_. Therefore, for whenever target user's first name changes, all roster entries pointing to him get updated as well.
   * 
   * For _non-synced_ roster entries, the values of the roster entry can be updated and are not affected by target user changes. I.e. roster owner can set roster entry's
   * nickname to be 'Johnny' even though target user's nickname is not set at all.
   * 
   * @return
   *   The updated version of the user's Roster after all adds, updates, and deletes completed and a boolean, if set to true, means to expect a notification on the change.
   * 
   */
  updateRoster(userId: Int64, changes: RosterEntryDeltaStruct[]): UpdateRosterReturnStruct;

  /**
   * Performs adds, changes, and deletes on a list of roster entries for a given Service Manager User Id.
   * Each entry on the roster entry list will specify the operation to be performed (either add, change, or delete).
   * 
   * The information in the roster entry (such as first name, last name or nickname) is kept in sync with user it points to (target user) if
   * the roster entry is _synced_. Therefore, for whenever target user's first name changes, all roster entries pointing to him get updated as well.
   * 
   * For _non-synced_ roster entries, the values of the roster entry can be updated and are not affected by target user changes. I.e. roster owner can set roster entry's
   * nickname to be 'Johnny' even though target user's nickname is not set at all.
   * 
   * @return
   *   The updated version of the user's Roster after all adds, updates, and deletes completed and a boolean, if set to true, means to expect a notification on the change.
   * 
   */
  updateRoster(userId: Int64, changes: RosterEntryDeltaStruct[], callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: UpdateRosterReturnStruct)=>void): void;

  /**
   * * Sets the underlying properties that are kept in sync with the user's profile card.  This update will trigger the async jobs to update the profile property values.
   * * For example, updating the first name with this RPC, will update the User table's FirstName column.  This will send a notification that will trigger an async job.
   * * The async job will update the users first name profile property to the new User.FirstName value.  And profile property update will send a profile updated notification.
   * *
   *    * PublicProfileStruct companyLegalName will not be set.
   * *
   * * USED FOR TESTING PURPOSES ONLY.
   * *
   */
  setPublicProfile(userId: Int64, publicProfile: PublicProfileStruct): void;

  /**
   * * Sets the underlying properties that are kept in sync with the user's profile card.  This update will trigger the async jobs to update the profile property values.
   * * For example, updating the first name with this RPC, will update the User table's FirstName column.  This will send a notification that will trigger an async job.
   * * The async job will update the users first name profile property to the new User.FirstName value.  And profile property update will send a profile updated notification.
   * *
   *    * PublicProfileStruct companyLegalName will not be set.
   * *
   * * USED FOR TESTING PURPOSES ONLY.
   * *
   */
  setPublicProfile(userId: Int64, publicProfile: PublicProfileStruct, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: void)=>void): void;

  /**
   * Will create an empty group for the company specified.  Group will be flagged as a "roster group".
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  createRosterGroup(companyLegalName: string, groupName: string): void;

  /**
   * Will create an empty group for the company specified.  Group will be flagged as a "roster group".
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  createRosterGroup(companyLegalName: string, groupName: string, callback?: (error: ttypes.FailureException | ttypes.NoSuchCompanyException | ttypes.GroupAlreadyExistsException, response: void)=>void): void;

  /**
   * Will delete a roster group for the company specified and all the roster entries in this group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteRosterGroup(companyLegalName: string, groupName: string): void;

  /**
   * Will delete a roster group for the company specified and all the roster entries in this group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteRosterGroup(companyLegalName: string, groupName: string, callback?: (error: ttypes.FailureException | ttypes.NoSuchCompanyException | ttypes.NoSuchGroupException, response: void)=>void): void;

  /**
   * Will add each user in the list of user id's to the roster group name belonging to the specified company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  addUsersToRosterGroup(companyLegalName: string, groupName: string, userIds: Int64[]): void;

  /**
   * Will add each user in the list of user id's to the roster group name belonging to the specified company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  addUsersToRosterGroup(companyLegalName: string, groupName: string, userIds: Int64[], callback?: (error: ttypes.FailureException | ttypes.NoSuchCompanyException | ttypes.NoSuchGroupException | ttypes.NoSuchUserException, response: void)=>void): void;

  /**
   * Will remove each user in the list of user id's from the roster group name belonging to the specified company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  removeUsersFromRosterGroup(companyLegalName: string, groupName: string, userIds: Int64[]): void;

  /**
   * Will remove each user in the list of user id's from the roster group name belonging to the specified company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  removeUsersFromRosterGroup(companyLegalName: string, groupName: string, userIds: Int64[], callback?: (error: ttypes.FailureException | ttypes.NoSuchCompanyException | ttypes.NoSuchGroupException | ttypes.NoSuchUserException, response: void)=>void): void;

  /**
   * Returns all the users in Service Manager that are in eligible companies using the paged in specified quantities
   * 
   */
  getAllUsers(pagingStruct: PagingStruct): AllUsersResultStruct;

  /**
   * Returns all the users in Service Manager that are in eligible companies using the paged in specified quantities
   * 
   */
  getAllUsers(pagingStruct: PagingStruct, callback?: (error: ttypes.FailureException, response: AllUsersResultStruct)=>void): void;

  /**
   * Returns true if user is entitled for GR Message service.
   * 
   */
  isEntitledForService(userId: Int64): boolean;

  /**
   * Returns true if user is entitled for GR Message service.
   * 
   */
  isEntitledForService(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.NoSuchUserException, response: boolean)=>void): void;

  /**
   * Returns all the companies in Service Manager that are in eligible companies using the paged in specified quantities
   * 
   */
  getAllCompanies(pagingStruct: CompanyPagingStruct): AllCompaniesResultStruct;

  /**
   * Returns all the companies in Service Manager that are in eligible companies using the paged in specified quantities
   * 
   */
  getAllCompanies(pagingStruct: CompanyPagingStruct, callback?: (error: ttypes.FailureException, response: AllCompaniesResultStruct)=>void): void;

  /**
   * Returns profile and logo information for a specific Company.
   * 
   * @param companyId
   *   The Service Manager identifier of the Company to retrieve.
   * 
   * @return
   *   Company profile and logo information
   */
  getCompanyById(companyId: number): CompanyResultStruct;

  /**
   * Returns profile and logo information for a specific Company.
   * 
   * @param companyId
   *   The Service Manager identifier of the Company to retrieve.
   * 
   * @return
   *   Company profile and logo information
   */
  getCompanyById(companyId: number, callback?: (error: ttypes.FailureException | ttypes.NoSuchCompanyException, response: CompanyResultStruct)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getVersion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getGrcpAlias(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAvatar(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAvatarThumbnail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getContainingRosters(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getDefaultAvatar(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getDefaultAvatarThumbnail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setAvatar(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteAvatar(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRoster(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRosterUpdates(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_updateRoster(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setPublicProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createRosterGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteRosterGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addUsersToRosterGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeUsersFromRosterGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllUsers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_isEntitledForService(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllCompanies(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyById(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
