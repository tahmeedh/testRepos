//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.UserAliasType = {
  '1' : 'EMAIL',
  'EMAIL' : 1,
  '2' : 'SIP',
  'SIP' : 2,
  '3' : 'GRID',
  'GRID' : 3
};
ttypes.ServiceSku = {
  '1' : 'Archive',
  'Archive' : 1,
  '2' : 'DirectorySync',
  'DirectorySync' : 2,
  '3' : 'GrMessage',
  'GrMessage' : 3,
  '4' : 'Directory',
  'Directory' : 4,
  '8' : 'LingUI',
  'LingUI' : 8,
  '9' : 'GroupTags',
  'GroupTags' : 9,
  '10' : 'SearchAnalytics',
  'SearchAnalytics' : 10,
  '11' : 'AKC',
  'AKC' : 11,
  '12' : 'AI',
  'AI' : 12,
  '13' : 'MFA',
  'MFA' : 13,
  '14' : 'LogAPI',
  'LogAPI' : 14,
  '15' : 'DemoData',
  'DemoData' : 15,
  '16' : 'GRWebsite',
  'GRWebsite' : 16,
  '5' : 'Bloomberg',
  'Bloomberg' : 5,
  '6' : 'ThomsonReuters',
  'ThomsonReuters' : 6,
  '7' : 'ICE',
  'ICE' : 7
};
ttypes.ReportPackCode = {
  '2' : 'BasicReportPack1',
  'BasicReportPack1' : 2,
  '1' : 'ReconciliationReportPack1',
  'ReconciliationReportPack1' : 1,
  '3' : 'OperationalReportPack1',
  'OperationalReportPack1' : 3
};
ttypes.ApplicationName = {
  '1' : 'ServiceManager',
  'ServiceManager' : 1,
  '2' : 'Archive',
  'Archive' : 2,
  '3' : 'Directory',
  'Directory' : 3,
  '4' : 'LegacyImport',
  'LegacyImport' : 4,
  '5' : 'PlatformAdministration',
  'PlatformAdministration' : 5,
  '6' : 'AI',
  'AI' : 6,
  '7' : 'GRWebsiteArchive',
  'GRWebsiteArchive' : 7
};
ttypes.AuthenticationType = {
  '0' : 'Password',
  'Password' : 0,
  '1' : 'SAML',
  'SAML' : 1
};
ttypes.AttributeVisibility = {
  '1' : 'PUBLIC',
  'PUBLIC' : 1,
  '2' : 'COMPANY',
  'COMPANY' : 2
};
ttypes.AttributeEditability = {
  '1' : 'NONE',
  'NONE' : 1,
  '2' : 'TIGHT',
  'TIGHT' : 2,
  '3' : 'LOOSE',
  'LOOSE' : 3
};
ttypes.DomainType = {
  '1' : 'Company',
  'Company' : 1,
  '3' : 'DoingBusinessAs',
  'DoingBusinessAs' : 3
};
ttypes.RegionType = {
  '0' : 'CANADA',
  'CANADA' : 0,
  '1' : 'USA',
  'USA' : 1
};
var MailboxRecoveryAddressStruct = module.exports.MailboxRecoveryAddressStruct = function(args) {
  this.userAliasId = null;
  this.address = null;
  this.isPreferred = null;
  this.isDeactivated = null;
  this.useForLogin = null;
  if (args) {
    if (args.userAliasId !== undefined && args.userAliasId !== null) {
      this.userAliasId = args.userAliasId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userAliasId is unset!');
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field address is unset!');
    }
    if (args.isPreferred !== undefined && args.isPreferred !== null) {
      this.isPreferred = args.isPreferred;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isPreferred is unset!');
    }
    if (args.isDeactivated !== undefined && args.isDeactivated !== null) {
      this.isDeactivated = args.isDeactivated;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isDeactivated is unset!');
    }
    if (args.useForLogin !== undefined && args.useForLogin !== null) {
      this.useForLogin = args.useForLogin;
    }
  }
};
MailboxRecoveryAddressStruct.prototype = {};
MailboxRecoveryAddressStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userAliasId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isPreferred = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isDeactivated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.useForLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MailboxRecoveryAddressStruct.prototype.write = function(output) {
  output.writeStructBegin('MailboxRecoveryAddressStruct');
  if (this.userAliasId !== null && this.userAliasId !== undefined) {
    output.writeFieldBegin('userAliasId', Thrift.Type.I64, 1);
    output.writeI64(this.userAliasId);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.isPreferred !== null && this.isPreferred !== undefined) {
    output.writeFieldBegin('isPreferred', Thrift.Type.BOOL, 3);
    output.writeBool(this.isPreferred);
    output.writeFieldEnd();
  }
  if (this.isDeactivated !== null && this.isDeactivated !== undefined) {
    output.writeFieldBegin('isDeactivated', Thrift.Type.BOOL, 4);
    output.writeBool(this.isDeactivated);
    output.writeFieldEnd();
  }
  if (this.useForLogin !== null && this.useForLogin !== undefined) {
    output.writeFieldBegin('useForLogin', Thrift.Type.BOOL, 5);
    output.writeBool(this.useForLogin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyQueryStruct = module.exports.CompanyQueryStruct = function(args) {
  this.companyId = null;
  this.legalName = null;
  this.name = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.legalName !== undefined && args.legalName !== null) {
      this.legalName = args.legalName;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
CompanyQueryStruct.prototype = {};
CompanyQueryStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.legalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyQueryStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyQueryStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.legalName !== null && this.legalName !== undefined) {
    output.writeFieldBegin('legalName', Thrift.Type.STRING, 2);
    output.writeString(this.legalName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyStruct = module.exports.CompanyStruct = function(args) {
  this.companyId = null;
  this.legalName = null;
  this.accountNumber = null;
  this.name = null;
  this.dateCreated = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
    if (args.legalName !== undefined && args.legalName !== null) {
      this.legalName = args.legalName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field legalName is unset!');
    }
    if (args.accountNumber !== undefined && args.accountNumber !== null) {
      this.accountNumber = args.accountNumber;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.dateCreated !== undefined && args.dateCreated !== null) {
      this.dateCreated = args.dateCreated;
    }
  }
};
CompanyStruct.prototype = {};
CompanyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.legalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.dateCreated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.legalName !== null && this.legalName !== undefined) {
    output.writeFieldBegin('legalName', Thrift.Type.STRING, 2);
    output.writeString(this.legalName);
    output.writeFieldEnd();
  }
  if (this.accountNumber !== null && this.accountNumber !== undefined) {
    output.writeFieldBegin('accountNumber', Thrift.Type.STRING, 3);
    output.writeString(this.accountNumber);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dateCreated !== null && this.dateCreated !== undefined) {
    output.writeFieldBegin('dateCreated', Thrift.Type.I64, 5);
    output.writeI64(this.dateCreated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyDomainStruct = module.exports.CompanyDomainStruct = function(args) {
  this.companyDomainId = null;
  this.name = null;
  this.companyId = null;
  this.type = null;
  if (args) {
    if (args.companyDomainId !== undefined && args.companyDomainId !== null) {
      this.companyDomainId = args.companyDomainId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyDomainId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
CompanyDomainStruct.prototype = {};
CompanyDomainStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyDomainId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyDomainStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyDomainStruct');
  if (this.companyDomainId !== null && this.companyDomainId !== undefined) {
    output.writeFieldBegin('companyDomainId', Thrift.Type.I64, 1);
    output.writeI64(this.companyDomainId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 3);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupStruct = module.exports.GroupStruct = function(args) {
  this.companyId = null;
  this.groupId = null;
  this.name = null;
  this.parentGroups = null;
  this.childGroups = null;
  this.displayName = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field groupId is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.parentGroups !== undefined && args.parentGroups !== null) {
      this.parentGroups = Thrift.copyList(args.parentGroups, [null]);
    }
    if (args.childGroups !== undefined && args.childGroups !== null) {
      this.childGroups = Thrift.copyList(args.childGroups, [null]);
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
  }
};
GroupStruct.prototype = {};
GroupStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.parentGroups = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readI32();
          this.parentGroups.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.childGroups = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readI32();
          this.childGroups.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupStruct.prototype.write = function(output) {
  output.writeStructBegin('GroupStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 2);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.parentGroups !== null && this.parentGroups !== undefined) {
    output.writeFieldBegin('parentGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.parentGroups.length);
    for (var iter8 in this.parentGroups) {
      if (this.parentGroups.hasOwnProperty(iter8)) {
        iter8 = this.parentGroups[iter8];
        output.writeI32(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.childGroups !== null && this.childGroups !== undefined) {
    output.writeFieldBegin('childGroups', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.childGroups.length);
    for (var iter9 in this.childGroups) {
      if (this.childGroups.hasOwnProperty(iter9)) {
        iter9 = this.childGroups[iter9];
        output.writeI32(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 6);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupQueryStruct = module.exports.GroupQueryStruct = function(args) {
  this.companyId = null;
  this.groupId = null;
  this.name = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
GroupQueryStruct.prototype = {};
GroupQueryStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupQueryStruct.prototype.write = function(output) {
  output.writeStructBegin('GroupQueryStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 2);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FindGroupsResultStruct = module.exports.FindGroupsResultStruct = function(args) {
  this.groups = null;
  if (args) {
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.GroupStruct]);
    }
  }
};
FindGroupsResultStruct.prototype = {};
FindGroupsResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.groups = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.GroupStruct();
          elem13.read(input);
          this.groups.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindGroupsResultStruct.prototype.write = function(output) {
  output.writeStructBegin('FindGroupsResultStruct');
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter14 in this.groups) {
      if (this.groups.hasOwnProperty(iter14)) {
        iter14 = this.groups[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FindUsersResultsStruct = module.exports.FindUsersResultsStruct = function(args) {
  this.userIds = null;
  if (args) {
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
FindUsersResultsStruct.prototype = {};
FindUsersResultsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.userIds = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readI64();
          this.userIds.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindUsersResultsStruct.prototype.write = function(output) {
  output.writeStructBegin('FindUsersResultsStruct');
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter19 in this.userIds) {
      if (this.userIds.hasOwnProperty(iter19)) {
        iter19 = this.userIds[iter19];
        output.writeI64(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAliasStruct = module.exports.UserAliasStruct = function(args) {
  this.userAlias = null;
  this.deprecated_aliasType = null;
  this.aliasId = null;
  this.useForLogin = null;
  this.deactivated = null;
  this.platformCode = null;
  this.userId = null;
  this.isVerified = null;
  this.deprecated_useForContact = null;
  if (args) {
    if (args.userAlias !== undefined && args.userAlias !== null) {
      this.userAlias = args.userAlias;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userAlias is unset!');
    }
    if (args.deprecated_aliasType !== undefined && args.deprecated_aliasType !== null) {
      this.deprecated_aliasType = args.deprecated_aliasType;
    }
    if (args.aliasId !== undefined && args.aliasId !== null) {
      this.aliasId = args.aliasId;
    }
    if (args.useForLogin !== undefined && args.useForLogin !== null) {
      this.useForLogin = args.useForLogin;
    }
    if (args.deactivated !== undefined && args.deactivated !== null) {
      this.deactivated = args.deactivated;
    }
    if (args.platformCode !== undefined && args.platformCode !== null) {
      this.platformCode = args.platformCode;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.isVerified !== undefined && args.isVerified !== null) {
      this.isVerified = args.isVerified;
    }
    if (args.deprecated_useForContact !== undefined && args.deprecated_useForContact !== null) {
      this.deprecated_useForContact = args.deprecated_useForContact;
    }
  }
};
UserAliasStruct.prototype = {};
UserAliasStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.deprecated_aliasType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.aliasId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.useForLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.deactivated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.platformCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isVerified = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.deprecated_useForContact = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAliasStruct.prototype.write = function(output) {
  output.writeStructBegin('UserAliasStruct');
  if (this.userAlias !== null && this.userAlias !== undefined) {
    output.writeFieldBegin('userAlias', Thrift.Type.STRING, 1);
    output.writeString(this.userAlias);
    output.writeFieldEnd();
  }
  if (this.deprecated_aliasType !== null && this.deprecated_aliasType !== undefined) {
    output.writeFieldBegin('deprecated_aliasType', Thrift.Type.I32, 2);
    output.writeI32(this.deprecated_aliasType);
    output.writeFieldEnd();
  }
  if (this.aliasId !== null && this.aliasId !== undefined) {
    output.writeFieldBegin('aliasId', Thrift.Type.I64, 3);
    output.writeI64(this.aliasId);
    output.writeFieldEnd();
  }
  if (this.useForLogin !== null && this.useForLogin !== undefined) {
    output.writeFieldBegin('useForLogin', Thrift.Type.BOOL, 4);
    output.writeBool(this.useForLogin);
    output.writeFieldEnd();
  }
  if (this.deactivated !== null && this.deactivated !== undefined) {
    output.writeFieldBegin('deactivated', Thrift.Type.BOOL, 5);
    output.writeBool(this.deactivated);
    output.writeFieldEnd();
  }
  if (this.platformCode !== null && this.platformCode !== undefined) {
    output.writeFieldBegin('platformCode', Thrift.Type.STRING, 6);
    output.writeString(this.platformCode);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 7);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.isVerified !== null && this.isVerified !== undefined) {
    output.writeFieldBegin('isVerified', Thrift.Type.BOOL, 8);
    output.writeBool(this.isVerified);
    output.writeFieldEnd();
  }
  if (this.deprecated_useForContact !== null && this.deprecated_useForContact !== undefined) {
    output.writeFieldBegin('deprecated_useForContact', Thrift.Type.BOOL, 9);
    output.writeBool(this.deprecated_useForContact);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PagingStruct = module.exports.PagingStruct = function(args) {
  this.startIndex = null;
  this.pageSize = null;
  if (args) {
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
  }
};
PagingStruct.prototype = {};
PagingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PagingStruct.prototype.write = function(output) {
  output.writeStructBegin('PagingStruct');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAliasQueryStruct = module.exports.UserAliasQueryStruct = function(args) {
  this.paging = null;
  this.aliasValue = null;
  this.platformCode = null;
  this.isVerified = null;
  this.deprecated_useForContact = null;
  this.userId = null;
  if (args) {
    if (args.paging !== undefined && args.paging !== null) {
      this.paging = new ttypes.PagingStruct(args.paging);
    }
    if (args.aliasValue !== undefined && args.aliasValue !== null) {
      this.aliasValue = args.aliasValue;
    }
    if (args.platformCode !== undefined && args.platformCode !== null) {
      this.platformCode = args.platformCode;
    }
    if (args.isVerified !== undefined && args.isVerified !== null) {
      this.isVerified = args.isVerified;
    }
    if (args.deprecated_useForContact !== undefined && args.deprecated_useForContact !== null) {
      this.deprecated_useForContact = args.deprecated_useForContact;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
UserAliasQueryStruct.prototype = {};
UserAliasQueryStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.paging = new ttypes.PagingStruct();
        this.paging.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.aliasValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.platformCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isVerified = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.deprecated_useForContact = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAliasQueryStruct.prototype.write = function(output) {
  output.writeStructBegin('UserAliasQueryStruct');
  if (this.paging !== null && this.paging !== undefined) {
    output.writeFieldBegin('paging', Thrift.Type.STRUCT, 1);
    this.paging.write(output);
    output.writeFieldEnd();
  }
  if (this.aliasValue !== null && this.aliasValue !== undefined) {
    output.writeFieldBegin('aliasValue', Thrift.Type.STRING, 2);
    output.writeString(this.aliasValue);
    output.writeFieldEnd();
  }
  if (this.platformCode !== null && this.platformCode !== undefined) {
    output.writeFieldBegin('platformCode', Thrift.Type.STRING, 3);
    output.writeString(this.platformCode);
    output.writeFieldEnd();
  }
  if (this.isVerified !== null && this.isVerified !== undefined) {
    output.writeFieldBegin('isVerified', Thrift.Type.BOOL, 4);
    output.writeBool(this.isVerified);
    output.writeFieldEnd();
  }
  if (this.deprecated_useForContact !== null && this.deprecated_useForContact !== undefined) {
    output.writeFieldBegin('deprecated_useForContact', Thrift.Type.BOOL, 5);
    output.writeBool(this.deprecated_useForContact);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 6);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInfoStruct = module.exports.UserInfoStruct = function(args) {
  this.displayName = null;
  this.email = null;
  this.companyId = null;
  this.companyLegalName = null;
  this.customerUserId = null;
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.userAliases = null;
  this.contactSupportMessage = null;
  this.companyName = null;
  this.deactivated = null;
  this.location = null;
  this.userId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field displayName is unset!');
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyLegalName is unset!');
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = args.customerUserId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.userAliases !== undefined && args.userAliases !== null) {
      this.userAliases = Thrift.copyList(args.userAliases, [ttypes.UserAliasStruct]);
    }
    if (args.contactSupportMessage !== undefined && args.contactSupportMessage !== null) {
      this.contactSupportMessage = args.contactSupportMessage;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.deactivated !== undefined && args.deactivated !== null) {
      this.deactivated = args.deactivated;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
UserInfoStruct.prototype = {};
UserInfoStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.customerUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.userAliases = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.UserAliasStruct();
          elem23.read(input);
          this.userAliases.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.contactSupportMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.deactivated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfoStruct.prototype.write = function(output) {
  output.writeStructBegin('UserInfoStruct');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 3);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 4);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRING, 5);
    output.writeString(this.customerUserId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 6);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 7);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 8);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.userAliases !== null && this.userAliases !== undefined) {
    output.writeFieldBegin('userAliases', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.userAliases.length);
    for (var iter24 in this.userAliases) {
      if (this.userAliases.hasOwnProperty(iter24)) {
        iter24 = this.userAliases[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contactSupportMessage !== null && this.contactSupportMessage !== undefined) {
    output.writeFieldBegin('contactSupportMessage', Thrift.Type.STRING, 10);
    output.writeString(this.contactSupportMessage);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 11);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.deactivated !== null && this.deactivated !== undefined) {
    output.writeFieldBegin('deactivated', Thrift.Type.BOOL, 12);
    output.writeBool(this.deactivated);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 13);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 14);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInfoBasicStruct = module.exports.UserInfoBasicStruct = function(args) {
  this.displayName = null;
  this.email = null;
  this.companyId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
  }
};
UserInfoBasicStruct.prototype = {};
UserInfoBasicStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfoBasicStruct.prototype.write = function(output) {
  output.writeStructBegin('UserInfoBasicStruct');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 3);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemUserInfoStruct = module.exports.SystemUserInfoStruct = function(args) {
  this.displayName = null;
  this.companyId = null;
  this.companyLegalName = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
  }
};
SystemUserInfoStruct.prototype = {};
SystemUserInfoStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemUserInfoStruct.prototype.write = function(output) {
  output.writeStructBegin('SystemUserInfoStruct');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 3);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemUserNameStruct = module.exports.SystemUserNameStruct = function(args) {
  this.name = null;
  this.description = null;
  this.login = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
  }
};
SystemUserNameStruct.prototype = {};
SystemUserNameStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemUserNameStruct.prototype.write = function(output) {
  output.writeStructBegin('SystemUserNameStruct');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserNameStruct = module.exports.UserNameStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.aliases = null;
  this.customerUserId = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.aliases !== undefined && args.aliases !== null) {
      this.aliases = Thrift.copyList(args.aliases, [ttypes.UserAliasStruct]);
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = args.customerUserId;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserNameStruct.prototype = {};
UserNameStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.aliases = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.UserAliasStruct();
          elem28.read(input);
          this.aliases.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.customerUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNameStruct.prototype.write = function(output) {
  output.writeStructBegin('UserNameStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 1);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 2);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 3);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.aliases !== null && this.aliases !== undefined) {
    output.writeFieldBegin('aliases', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.aliases.length);
    for (var iter29 in this.aliases) {
      if (this.aliases.hasOwnProperty(iter29)) {
        iter29 = this.aliases[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRING, 6);
    output.writeString(this.customerUserId);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 7);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserStruct = module.exports.UserStruct = function(args) {
  this.userId = null;
  this.grcpAlias = null;
  this.userName = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
    if (args.grcpAlias !== undefined && args.grcpAlias !== null) {
      this.grcpAlias = args.grcpAlias;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field grcpAlias is unset!');
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = new ttypes.UserNameStruct(args.userName);
    }
  }
};
UserStruct.prototype = {};
UserStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.grcpAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userName = new ttypes.UserNameStruct();
        this.userName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStruct.prototype.write = function(output) {
  output.writeStructBegin('UserStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.grcpAlias !== null && this.grcpAlias !== undefined) {
    output.writeFieldBegin('grcpAlias', Thrift.Type.STRING, 2);
    output.writeString(this.grcpAlias);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRUCT, 3);
    this.userName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyUserCreateStruct = module.exports.CompanyUserCreateStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.middleInitial = null;
  this.customerUserId = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.middleInitial !== undefined && args.middleInitial !== null) {
      this.middleInitial = args.middleInitial;
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = args.customerUserId;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
CompanyUserCreateStruct.prototype = {};
CompanyUserCreateStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.middleInitial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.customerUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyUserCreateStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyUserCreateStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 1);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 2);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.middleInitial !== null && this.middleInitial !== undefined) {
    output.writeFieldBegin('middleInitial', Thrift.Type.STRING, 3);
    output.writeString(this.middleInitial);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRING, 4);
    output.writeString(this.customerUserId);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 5);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SamlAuthStruct = module.exports.SamlAuthStruct = function(args) {
  this.idpIdentifier = null;
  if (args) {
    if (args.idpIdentifier !== undefined && args.idpIdentifier !== null) {
      this.idpIdentifier = args.idpIdentifier;
    }
  }
};
SamlAuthStruct.prototype = {};
SamlAuthStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idpIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SamlAuthStruct.prototype.write = function(output) {
  output.writeStructBegin('SamlAuthStruct');
  if (this.idpIdentifier !== null && this.idpIdentifier !== undefined) {
    output.writeFieldBegin('idpIdentifier', Thrift.Type.STRING, 1);
    output.writeString(this.idpIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PwdAuthStruct = module.exports.PwdAuthStruct = function(args) {
  this.passwordPolicyId = null;
  this.passwordHash = null;
  if (args) {
    if (args.passwordPolicyId !== undefined && args.passwordPolicyId !== null) {
      this.passwordPolicyId = args.passwordPolicyId;
    }
    if (args.passwordHash !== undefined && args.passwordHash !== null) {
      this.passwordHash = args.passwordHash;
    }
  }
};
PwdAuthStruct.prototype = {};
PwdAuthStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.passwordPolicyId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.passwordHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PwdAuthStruct.prototype.write = function(output) {
  output.writeStructBegin('PwdAuthStruct');
  if (this.passwordPolicyId !== null && this.passwordPolicyId !== undefined) {
    output.writeFieldBegin('passwordPolicyId', Thrift.Type.I64, 1);
    output.writeI64(this.passwordPolicyId);
    output.writeFieldEnd();
  }
  if (this.passwordHash !== null && this.passwordHash !== undefined) {
    output.writeFieldBegin('passwordHash', Thrift.Type.STRING, 2);
    output.writeString(this.passwordHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyUserLoginStruct = module.exports.CompanyUserLoginStruct = function(args) {
  this.companyId = null;
  this.companyUserId = null;
  this.loginId = null;
  this.samlAuth = null;
  this.pwdAuth = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyUserId !== undefined && args.companyUserId !== null) {
      this.companyUserId = args.companyUserId;
    }
    if (args.loginId !== undefined && args.loginId !== null) {
      this.loginId = args.loginId;
    }
    if (args.samlAuth !== undefined && args.samlAuth !== null) {
      this.samlAuth = new ttypes.SamlAuthStruct(args.samlAuth);
    }
    if (args.pwdAuth !== undefined && args.pwdAuth !== null) {
      this.pwdAuth = new ttypes.PwdAuthStruct(args.pwdAuth);
    }
  }
};
CompanyUserLoginStruct.prototype = {};
CompanyUserLoginStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.companyUserId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.loginId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.samlAuth = new ttypes.SamlAuthStruct();
        this.samlAuth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pwdAuth = new ttypes.PwdAuthStruct();
        this.pwdAuth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyUserLoginStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyUserLoginStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyUserId !== null && this.companyUserId !== undefined) {
    output.writeFieldBegin('companyUserId', Thrift.Type.I64, 2);
    output.writeI64(this.companyUserId);
    output.writeFieldEnd();
  }
  if (this.loginId !== null && this.loginId !== undefined) {
    output.writeFieldBegin('loginId', Thrift.Type.STRING, 3);
    output.writeString(this.loginId);
    output.writeFieldEnd();
  }
  if (this.samlAuth !== null && this.samlAuth !== undefined) {
    output.writeFieldBegin('samlAuth', Thrift.Type.STRUCT, 4);
    this.samlAuth.write(output);
    output.writeFieldEnd();
  }
  if (this.pwdAuth !== null && this.pwdAuth !== undefined) {
    output.writeFieldBegin('pwdAuth', Thrift.Type.STRUCT, 5);
    this.pwdAuth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemUserLoginStruct = module.exports.SystemUserLoginStruct = function(args) {
  this.companyId = null;
  this.systemUserId = null;
  this.loginId = null;
  this.pwdAuth = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.systemUserId !== undefined && args.systemUserId !== null) {
      this.systemUserId = args.systemUserId;
    }
    if (args.loginId !== undefined && args.loginId !== null) {
      this.loginId = args.loginId;
    }
    if (args.pwdAuth !== undefined && args.pwdAuth !== null) {
      this.pwdAuth = new ttypes.PwdAuthStruct(args.pwdAuth);
    }
  }
};
SystemUserLoginStruct.prototype = {};
SystemUserLoginStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.systemUserId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.loginId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pwdAuth = new ttypes.PwdAuthStruct();
        this.pwdAuth.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemUserLoginStruct.prototype.write = function(output) {
  output.writeStructBegin('SystemUserLoginStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.systemUserId !== null && this.systemUserId !== undefined) {
    output.writeFieldBegin('systemUserId', Thrift.Type.I64, 2);
    output.writeI64(this.systemUserId);
    output.writeFieldEnd();
  }
  if (this.loginId !== null && this.loginId !== undefined) {
    output.writeFieldBegin('loginId', Thrift.Type.STRING, 3);
    output.writeString(this.loginId);
    output.writeFieldEnd();
  }
  if (this.pwdAuth !== null && this.pwdAuth !== undefined) {
    output.writeFieldBegin('pwdAuth', Thrift.Type.STRUCT, 4);
    this.pwdAuth.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ArchiveContactStruct = module.exports.ArchiveContactStruct = function(args) {
  this.email = null;
  this.emailBcc = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.emailBcc !== undefined && args.emailBcc !== null) {
      this.emailBcc = args.emailBcc;
    }
  }
};
ArchiveContactStruct.prototype = {};
ArchiveContactStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.emailBcc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArchiveContactStruct.prototype.write = function(output) {
  output.writeStructBegin('ArchiveContactStruct');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.emailBcc !== null && this.emailBcc !== undefined) {
    output.writeFieldBegin('emailBcc', Thrift.Type.STRING, 2);
    output.writeString(this.emailBcc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ArchiveBasicStruct = module.exports.ArchiveBasicStruct = function(args) {
  this.archiveId = null;
  this.name = null;
  if (args) {
    if (args.archiveId !== undefined && args.archiveId !== null) {
      this.archiveId = args.archiveId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ArchiveBasicStruct.prototype = {};
ArchiveBasicStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.archiveId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArchiveBasicStruct.prototype.write = function(output) {
  output.writeStructBegin('ArchiveBasicStruct');
  if (this.archiveId !== null && this.archiveId !== undefined) {
    output.writeFieldBegin('archiveId', Thrift.Type.STRING, 1);
    output.writeString(this.archiveId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyProfileStruct = module.exports.CompanyProfileStruct = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.phoneNumber = null;
  this.website = null;
  this.email = null;
  this.companyLogo = null;
  this.description = null;
  this.productsAndServices = null;
  this.companyLegalName = null;
  this.legalEntityIdentifier = null;
  this.legalEntityName = null;
  this.logoVersion = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = args.addressLine1;
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = args.addressLine2;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.website !== undefined && args.website !== null) {
      this.website = args.website;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.companyLogo !== undefined && args.companyLogo !== null) {
      this.companyLogo = args.companyLogo;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.productsAndServices !== undefined && args.productsAndServices !== null) {
      this.productsAndServices = args.productsAndServices;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.legalEntityIdentifier !== undefined && args.legalEntityIdentifier !== null) {
      this.legalEntityIdentifier = args.legalEntityIdentifier;
    }
    if (args.legalEntityName !== undefined && args.legalEntityName !== null) {
      this.legalEntityName = args.legalEntityName;
    }
    if (args.logoVersion !== undefined && args.logoVersion !== null) {
      this.logoVersion = args.logoVersion;
    }
  }
};
CompanyProfileStruct.prototype = {};
CompanyProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.companyLogo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.productsAndServices = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.logoVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyProfileStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRING, 3);
    output.writeString(this.addressLine1);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRING, 4);
    output.writeString(this.addressLine2);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 6);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 7);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 8);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 9);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 10);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.companyLogo !== null && this.companyLogo !== undefined) {
    output.writeFieldBegin('companyLogo', Thrift.Type.STRING, 12);
    output.writeString(this.companyLogo);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 13);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.productsAndServices !== null && this.productsAndServices !== undefined) {
    output.writeFieldBegin('productsAndServices', Thrift.Type.STRING, 14);
    output.writeString(this.productsAndServices);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 15);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.legalEntityIdentifier !== null && this.legalEntityIdentifier !== undefined) {
    output.writeFieldBegin('legalEntityIdentifier', Thrift.Type.STRING, 16);
    output.writeString(this.legalEntityIdentifier);
    output.writeFieldEnd();
  }
  if (this.legalEntityName !== null && this.legalEntityName !== undefined) {
    output.writeFieldBegin('legalEntityName', Thrift.Type.STRING, 17);
    output.writeString(this.legalEntityName);
    output.writeFieldEnd();
  }
  if (this.logoVersion !== null && this.logoVersion !== undefined) {
    output.writeFieldBegin('logoVersion', Thrift.Type.I32, 18);
    output.writeI32(this.logoVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyProfileBasicStruct = module.exports.CompanyProfileBasicStruct = function(args) {
  this.companyLegalName = null;
  if (args) {
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
  }
};
CompanyProfileBasicStruct.prototype = {};
CompanyProfileBasicStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyProfileBasicStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyProfileBasicStruct');
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 1);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyLogoStruct = module.exports.CompanyLogoStruct = function(args) {
  this.companyLogo = null;
  this.version = null;
  this.logoMimeType = null;
  this.useDefaultLogo = null;
  if (args) {
    if (args.companyLogo !== undefined && args.companyLogo !== null) {
      this.companyLogo = args.companyLogo;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.logoMimeType !== undefined && args.logoMimeType !== null) {
      this.logoMimeType = args.logoMimeType;
    }
    if (args.useDefaultLogo !== undefined && args.useDefaultLogo !== null) {
      this.useDefaultLogo = args.useDefaultLogo;
    }
  }
};
CompanyLogoStruct.prototype = {};
CompanyLogoStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyLogo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.logoMimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.useDefaultLogo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyLogoStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyLogoStruct');
  if (this.companyLogo !== null && this.companyLogo !== undefined) {
    output.writeFieldBegin('companyLogo', Thrift.Type.STRING, 1);
    output.writeString(this.companyLogo);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.logoMimeType !== null && this.logoMimeType !== undefined) {
    output.writeFieldBegin('logoMimeType', Thrift.Type.STRING, 3);
    output.writeString(this.logoMimeType);
    output.writeFieldEnd();
  }
  if (this.useDefaultLogo !== null && this.useDefaultLogo !== undefined) {
    output.writeFieldBegin('useDefaultLogo', Thrift.Type.BOOL, 4);
    output.writeBool(this.useDefaultLogo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportsToStruct = module.exports.ReportsToStruct = function(args) {
  this.userId = null;
  this.firstName = null;
  this.lastName = null;
  this.deprecated_emailAddresses = null;
  this.isEnabled = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.deprecated_emailAddresses !== undefined && args.deprecated_emailAddresses !== null) {
      this.deprecated_emailAddresses = Thrift.copyList(args.deprecated_emailAddresses, [null]);
    }
    if (args.isEnabled !== undefined && args.isEnabled !== null) {
      this.isEnabled = args.isEnabled;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
ReportsToStruct.prototype = {};
ReportsToStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.deprecated_emailAddresses = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readString();
          this.deprecated_emailAddresses.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportsToStruct.prototype.write = function(output) {
  output.writeStructBegin('ReportsToStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.deprecated_emailAddresses !== null && this.deprecated_emailAddresses !== undefined) {
    output.writeFieldBegin('deprecated_emailAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.deprecated_emailAddresses.length);
    for (var iter34 in this.deprecated_emailAddresses) {
      if (this.deprecated_emailAddresses.hasOwnProperty(iter34)) {
        iter34 = this.deprecated_emailAddresses[iter34];
        output.writeString(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isEnabled !== null && this.isEnabled !== undefined) {
    output.writeFieldBegin('isEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.isEnabled);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 6);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeSettingStruct = module.exports.UserProfileAttributeSettingStruct = function(args) {
  this.visibility = null;
  this.editability = null;
  if (args) {
    if (args.visibility !== undefined && args.visibility !== null) {
      this.visibility = args.visibility;
    }
    if (args.editability !== undefined && args.editability !== null) {
      this.editability = args.editability;
    }
  }
};
UserProfileAttributeSettingStruct.prototype = {};
UserProfileAttributeSettingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.visibility = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.editability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeSettingStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeSettingStruct');
  if (this.visibility !== null && this.visibility !== undefined) {
    output.writeFieldBegin('visibility', Thrift.Type.I32, 1);
    output.writeI32(this.visibility);
    output.writeFieldEnd();
  }
  if (this.editability !== null && this.editability !== undefined) {
    output.writeFieldBegin('editability', Thrift.Type.I32, 2);
    output.writeI32(this.editability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeValueStruct = module.exports.UserProfileAttributeValueStruct = function(args) {
  this.profileValue = null;
  this.profileAttributeSettings = null;
  if (args) {
    if (args.profileValue !== undefined && args.profileValue !== null) {
      this.profileValue = args.profileValue;
    }
    if (args.profileAttributeSettings !== undefined && args.profileAttributeSettings !== null) {
      this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct(args.profileAttributeSettings);
    }
  }
};
UserProfileAttributeValueStruct.prototype = {};
UserProfileAttributeValueStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profileValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.profileAttributeSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeValueStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeValueStruct');
  if (this.profileValue !== null && this.profileValue !== undefined) {
    output.writeFieldBegin('profileValue', Thrift.Type.STRING, 1);
    output.writeString(this.profileValue);
    output.writeFieldEnd();
  }
  if (this.profileAttributeSettings !== null && this.profileAttributeSettings !== undefined) {
    output.writeFieldBegin('profileAttributeSettings', Thrift.Type.STRUCT, 2);
    this.profileAttributeSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeCollectionValueStruct = module.exports.UserProfileAttributeCollectionValueStruct = function(args) {
  this.profileValues = null;
  this.profileAttributeSettings = null;
  if (args) {
    if (args.profileValues !== undefined && args.profileValues !== null) {
      this.profileValues = Thrift.copyList(args.profileValues, [null]);
    }
    if (args.profileAttributeSettings !== undefined && args.profileAttributeSettings !== null) {
      this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct(args.profileAttributeSettings);
    }
  }
};
UserProfileAttributeCollectionValueStruct.prototype = {};
UserProfileAttributeCollectionValueStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.profileValues = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = input.readString();
          this.profileValues.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.profileAttributeSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeCollectionValueStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeCollectionValueStruct');
  if (this.profileValues !== null && this.profileValues !== undefined) {
    output.writeFieldBegin('profileValues', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.profileValues.length);
    for (var iter39 in this.profileValues) {
      if (this.profileValues.hasOwnProperty(iter39)) {
        iter39 = this.profileValues[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.profileAttributeSettings !== null && this.profileAttributeSettings !== undefined) {
    output.writeFieldBegin('profileAttributeSettings', Thrift.Type.STRUCT, 2);
    this.profileAttributeSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileUserSetAttributesStruct = module.exports.UserProfileUserSetAttributesStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.customerUserId = null;
  this.jobTitle = null;
  this.workPhone = null;
  this.mobilePhone = null;
  this.homePhone = null;
  this.reportsToUser = null;
  this.location = null;
  this.obsolete_nickname = null;
  this.reportsToEditability = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.deprecated_emailAddresses = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = new ttypes.UserProfileAttributeValueStruct(args.firstName);
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = new ttypes.UserProfileAttributeValueStruct(args.lastName);
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = new ttypes.UserProfileAttributeValueStruct(args.customerUserId);
    }
    if (args.jobTitle !== undefined && args.jobTitle !== null) {
      this.jobTitle = new ttypes.UserProfileAttributeValueStruct(args.jobTitle);
    }
    if (args.workPhone !== undefined && args.workPhone !== null) {
      this.workPhone = new ttypes.UserProfileAttributeValueStruct(args.workPhone);
    }
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = new ttypes.UserProfileAttributeValueStruct(args.mobilePhone);
    }
    if (args.homePhone !== undefined && args.homePhone !== null) {
      this.homePhone = new ttypes.UserProfileAttributeValueStruct(args.homePhone);
    }
    if (args.reportsToUser !== undefined && args.reportsToUser !== null) {
      this.reportsToUser = new ttypes.ReportsToStruct(args.reportsToUser);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.UserProfileAttributeValueStruct(args.location);
    }
    if (args.obsolete_nickname !== undefined && args.obsolete_nickname !== null) {
      this.obsolete_nickname = new ttypes.UserProfileAttributeValueStruct(args.obsolete_nickname);
    }
    if (args.reportsToEditability !== undefined && args.reportsToEditability !== null) {
      this.reportsToEditability = args.reportsToEditability;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = new ttypes.UserProfileAttributeValueStruct(args.addressLine1);
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = new ttypes.UserProfileAttributeValueStruct(args.addressLine2);
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = new ttypes.UserProfileAttributeValueStruct(args.city);
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = new ttypes.UserProfileAttributeValueStruct(args.province);
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = new ttypes.UserProfileAttributeValueStruct(args.postalCode);
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = new ttypes.UserProfileAttributeValueStruct(args.country);
    }
    if (args.deprecated_emailAddresses !== undefined && args.deprecated_emailAddresses !== null) {
      this.deprecated_emailAddresses = new ttypes.UserProfileAttributeCollectionValueStruct(args.deprecated_emailAddresses);
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = new ttypes.UserProfileAttributeValueStruct(args.email);
    }
  }
};
UserProfileUserSetAttributesStruct.prototype = {};
UserProfileUserSetAttributesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.firstName = new ttypes.UserProfileAttributeValueStruct();
        this.firstName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastName = new ttypes.UserProfileAttributeValueStruct();
        this.lastName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerUserId = new ttypes.UserProfileAttributeValueStruct();
        this.customerUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobTitle = new ttypes.UserProfileAttributeValueStruct();
        this.jobTitle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.workPhone = new ttypes.UserProfileAttributeValueStruct();
        this.workPhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobilePhone = new ttypes.UserProfileAttributeValueStruct();
        this.mobilePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.homePhone = new ttypes.UserProfileAttributeValueStruct();
        this.homePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportsToUser = new ttypes.ReportsToStruct();
        this.reportsToUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.UserProfileAttributeValueStruct();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.obsolete_nickname = new ttypes.UserProfileAttributeValueStruct();
        this.obsolete_nickname.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.reportsToEditability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine1 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine2 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.city = new ttypes.UserProfileAttributeValueStruct();
        this.city.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.province = new ttypes.UserProfileAttributeValueStruct();
        this.province.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.postalCode = new ttypes.UserProfileAttributeValueStruct();
        this.postalCode.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.country = new ttypes.UserProfileAttributeValueStruct();
        this.country.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.deprecated_emailAddresses = new ttypes.UserProfileAttributeCollectionValueStruct();
        this.deprecated_emailAddresses.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.email = new ttypes.UserProfileAttributeValueStruct();
        this.email.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileUserSetAttributesStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileUserSetAttributesStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRUCT, 1);
    this.firstName.write(output);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRUCT, 2);
    this.lastName.write(output);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRUCT, 3);
    this.customerUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.jobTitle !== null && this.jobTitle !== undefined) {
    output.writeFieldBegin('jobTitle', Thrift.Type.STRUCT, 4);
    this.jobTitle.write(output);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRUCT, 5);
    this.workPhone.write(output);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRUCT, 6);
    this.mobilePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.homePhone !== null && this.homePhone !== undefined) {
    output.writeFieldBegin('homePhone', Thrift.Type.STRUCT, 7);
    this.homePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToUser !== null && this.reportsToUser !== undefined) {
    output.writeFieldBegin('reportsToUser', Thrift.Type.STRUCT, 8);
    this.reportsToUser.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 9);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.obsolete_nickname !== null && this.obsolete_nickname !== undefined) {
    output.writeFieldBegin('obsolete_nickname', Thrift.Type.STRUCT, 10);
    this.obsolete_nickname.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToEditability !== null && this.reportsToEditability !== undefined) {
    output.writeFieldBegin('reportsToEditability', Thrift.Type.I32, 11);
    output.writeI32(this.reportsToEditability);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRUCT, 12);
    this.addressLine1.write(output);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRUCT, 13);
    this.addressLine2.write(output);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRUCT, 14);
    this.city.write(output);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRUCT, 15);
    this.province.write(output);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRUCT, 16);
    this.postalCode.write(output);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRUCT, 17);
    this.country.write(output);
    output.writeFieldEnd();
  }
  if (this.deprecated_emailAddresses !== null && this.deprecated_emailAddresses !== undefined) {
    output.writeFieldBegin('deprecated_emailAddresses', Thrift.Type.STRUCT, 18);
    this.deprecated_emailAddresses.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRUCT, 19);
    this.email.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProfilePolicyStruct = module.exports.ProfilePolicyStruct = function(args) {
  this.version = null;
  this.address = null;
  this.avatar = null;
  this.company = null;
  this.email = null;
  this.grid = null;
  this.homePhone = null;
  this.jobTitle = null;
  this.mobilePhone = null;
  this.location = null;
  this.name = null;
  this.reportsTo = null;
  this.customerUserId = null;
  this.workPhone = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = new ttypes.UserProfileAttributeSettingStruct(args.address);
    }
    if (args.avatar !== undefined && args.avatar !== null) {
      this.avatar = new ttypes.UserProfileAttributeSettingStruct(args.avatar);
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = new ttypes.UserProfileAttributeSettingStruct(args.company);
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = new ttypes.UserProfileAttributeSettingStruct(args.email);
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = new ttypes.UserProfileAttributeSettingStruct(args.grid);
    }
    if (args.homePhone !== undefined && args.homePhone !== null) {
      this.homePhone = new ttypes.UserProfileAttributeSettingStruct(args.homePhone);
    }
    if (args.jobTitle !== undefined && args.jobTitle !== null) {
      this.jobTitle = new ttypes.UserProfileAttributeSettingStruct(args.jobTitle);
    }
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = new ttypes.UserProfileAttributeSettingStruct(args.mobilePhone);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.UserProfileAttributeSettingStruct(args.location);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = new ttypes.UserProfileAttributeSettingStruct(args.name);
    }
    if (args.reportsTo !== undefined && args.reportsTo !== null) {
      this.reportsTo = new ttypes.UserProfileAttributeSettingStruct(args.reportsTo);
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = new ttypes.UserProfileAttributeSettingStruct(args.customerUserId);
    }
    if (args.workPhone !== undefined && args.workPhone !== null) {
      this.workPhone = new ttypes.UserProfileAttributeSettingStruct(args.workPhone);
    }
  }
};
ProfilePolicyStruct.prototype = {};
ProfilePolicyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.address = new ttypes.UserProfileAttributeSettingStruct();
        this.address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.avatar = new ttypes.UserProfileAttributeSettingStruct();
        this.avatar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.company = new ttypes.UserProfileAttributeSettingStruct();
        this.company.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.email = new ttypes.UserProfileAttributeSettingStruct();
        this.email.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.grid = new ttypes.UserProfileAttributeSettingStruct();
        this.grid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.homePhone = new ttypes.UserProfileAttributeSettingStruct();
        this.homePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobTitle = new ttypes.UserProfileAttributeSettingStruct();
        this.jobTitle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobilePhone = new ttypes.UserProfileAttributeSettingStruct();
        this.mobilePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.UserProfileAttributeSettingStruct();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.name = new ttypes.UserProfileAttributeSettingStruct();
        this.name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportsTo = new ttypes.UserProfileAttributeSettingStruct();
        this.reportsTo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerUserId = new ttypes.UserProfileAttributeSettingStruct();
        this.customerUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.workPhone = new ttypes.UserProfileAttributeSettingStruct();
        this.workPhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProfilePolicyStruct.prototype.write = function(output) {
  output.writeStructBegin('ProfilePolicyStruct');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRUCT, 2);
    this.address.write(output);
    output.writeFieldEnd();
  }
  if (this.avatar !== null && this.avatar !== undefined) {
    output.writeFieldBegin('avatar', Thrift.Type.STRUCT, 3);
    this.avatar.write(output);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRUCT, 4);
    this.company.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRUCT, 5);
    this.email.write(output);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRUCT, 6);
    this.grid.write(output);
    output.writeFieldEnd();
  }
  if (this.homePhone !== null && this.homePhone !== undefined) {
    output.writeFieldBegin('homePhone', Thrift.Type.STRUCT, 7);
    this.homePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.jobTitle !== null && this.jobTitle !== undefined) {
    output.writeFieldBegin('jobTitle', Thrift.Type.STRUCT, 8);
    this.jobTitle.write(output);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRUCT, 9);
    this.mobilePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 10);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRUCT, 11);
    this.name.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsTo !== null && this.reportsTo !== undefined) {
    output.writeFieldBegin('reportsTo', Thrift.Type.STRUCT, 12);
    this.reportsTo.write(output);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRUCT, 13);
    this.customerUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRUCT, 14);
    this.workPhone.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileStruct = module.exports.UserProfileStruct = function(args) {
  this.userId = null;
  this.userSetAttributes = null;
  this.grid = null;
  this.deprecated_emailAddresses = null;
  this.directReports = null;
  this.isDirectReportsTruncated = null;
  this.companyName = null;
  this.companyLegalName = null;
  this.companyAddressLine1 = null;
  this.companyAddressLine2 = null;
  this.companyCity = null;
  this.companyProvince = null;
  this.companyPostalCode = null;
  this.companyCountry = null;
  this.companyPhoneNumber = null;
  this.companyEmail = null;
  this.companyDateModified = null;
  this.companyId = null;
  this.profileVersion = null;
  this.profilePolicyVersion = null;
  this.legalEntityIdentifier = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userSetAttributes !== undefined && args.userSetAttributes !== null) {
      this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct(args.userSetAttributes);
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
    if (args.deprecated_emailAddresses !== undefined && args.deprecated_emailAddresses !== null) {
      this.deprecated_emailAddresses = Thrift.copyList(args.deprecated_emailAddresses, [null]);
    }
    if (args.directReports !== undefined && args.directReports !== null) {
      this.directReports = Thrift.copyList(args.directReports, [ttypes.ReportsToStruct]);
    }
    if (args.isDirectReportsTruncated !== undefined && args.isDirectReportsTruncated !== null) {
      this.isDirectReportsTruncated = args.isDirectReportsTruncated;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.companyAddressLine1 !== undefined && args.companyAddressLine1 !== null) {
      this.companyAddressLine1 = args.companyAddressLine1;
    }
    if (args.companyAddressLine2 !== undefined && args.companyAddressLine2 !== null) {
      this.companyAddressLine2 = args.companyAddressLine2;
    }
    if (args.companyCity !== undefined && args.companyCity !== null) {
      this.companyCity = args.companyCity;
    }
    if (args.companyProvince !== undefined && args.companyProvince !== null) {
      this.companyProvince = args.companyProvince;
    }
    if (args.companyPostalCode !== undefined && args.companyPostalCode !== null) {
      this.companyPostalCode = args.companyPostalCode;
    }
    if (args.companyCountry !== undefined && args.companyCountry !== null) {
      this.companyCountry = args.companyCountry;
    }
    if (args.companyPhoneNumber !== undefined && args.companyPhoneNumber !== null) {
      this.companyPhoneNumber = args.companyPhoneNumber;
    }
    if (args.companyEmail !== undefined && args.companyEmail !== null) {
      this.companyEmail = args.companyEmail;
    }
    if (args.companyDateModified !== undefined && args.companyDateModified !== null) {
      this.companyDateModified = args.companyDateModified;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.profileVersion !== undefined && args.profileVersion !== null) {
      this.profileVersion = args.profileVersion;
    }
    if (args.profilePolicyVersion !== undefined && args.profilePolicyVersion !== null) {
      this.profilePolicyVersion = args.profilePolicyVersion;
    }
    if (args.legalEntityIdentifier !== undefined && args.legalEntityIdentifier !== null) {
      this.legalEntityIdentifier = args.legalEntityIdentifier;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserProfileStruct.prototype = {};
UserProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct();
        this.userSetAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.deprecated_emailAddresses = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = input.readString();
          this.deprecated_emailAddresses.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.directReports = [];
        var _rtmp345 = input.readListBegin();
        var _size44 = _rtmp345.size || 0;
        for (var _i46 = 0; _i46 < _size44; ++_i46) {
          var elem47 = null;
          elem47 = new ttypes.ReportsToStruct();
          elem47.read(input);
          this.directReports.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectReportsTruncated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.companyCity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.companyProvince = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.companyPostalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.companyCountry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.companyPhoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.companyEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.companyDateModified = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.profileVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.profilePolicyVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userSetAttributes !== null && this.userSetAttributes !== undefined) {
    output.writeFieldBegin('userSetAttributes', Thrift.Type.STRUCT, 2);
    this.userSetAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 3);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.deprecated_emailAddresses !== null && this.deprecated_emailAddresses !== undefined) {
    output.writeFieldBegin('deprecated_emailAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.deprecated_emailAddresses.length);
    for (var iter48 in this.deprecated_emailAddresses) {
      if (this.deprecated_emailAddresses.hasOwnProperty(iter48)) {
        iter48 = this.deprecated_emailAddresses[iter48];
        output.writeString(iter48);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.directReports !== null && this.directReports !== undefined) {
    output.writeFieldBegin('directReports', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.directReports.length);
    for (var iter49 in this.directReports) {
      if (this.directReports.hasOwnProperty(iter49)) {
        iter49 = this.directReports[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isDirectReportsTruncated !== null && this.isDirectReportsTruncated !== undefined) {
    output.writeFieldBegin('isDirectReportsTruncated', Thrift.Type.BOOL, 7);
    output.writeBool(this.isDirectReportsTruncated);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 8);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 9);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine1 !== null && this.companyAddressLine1 !== undefined) {
    output.writeFieldBegin('companyAddressLine1', Thrift.Type.STRING, 10);
    output.writeString(this.companyAddressLine1);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine2 !== null && this.companyAddressLine2 !== undefined) {
    output.writeFieldBegin('companyAddressLine2', Thrift.Type.STRING, 11);
    output.writeString(this.companyAddressLine2);
    output.writeFieldEnd();
  }
  if (this.companyCity !== null && this.companyCity !== undefined) {
    output.writeFieldBegin('companyCity', Thrift.Type.STRING, 12);
    output.writeString(this.companyCity);
    output.writeFieldEnd();
  }
  if (this.companyProvince !== null && this.companyProvince !== undefined) {
    output.writeFieldBegin('companyProvince', Thrift.Type.STRING, 13);
    output.writeString(this.companyProvince);
    output.writeFieldEnd();
  }
  if (this.companyPostalCode !== null && this.companyPostalCode !== undefined) {
    output.writeFieldBegin('companyPostalCode', Thrift.Type.STRING, 14);
    output.writeString(this.companyPostalCode);
    output.writeFieldEnd();
  }
  if (this.companyCountry !== null && this.companyCountry !== undefined) {
    output.writeFieldBegin('companyCountry', Thrift.Type.STRING, 15);
    output.writeString(this.companyCountry);
    output.writeFieldEnd();
  }
  if (this.companyPhoneNumber !== null && this.companyPhoneNumber !== undefined) {
    output.writeFieldBegin('companyPhoneNumber', Thrift.Type.STRING, 16);
    output.writeString(this.companyPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.companyEmail !== null && this.companyEmail !== undefined) {
    output.writeFieldBegin('companyEmail', Thrift.Type.STRING, 17);
    output.writeString(this.companyEmail);
    output.writeFieldEnd();
  }
  if (this.companyDateModified !== null && this.companyDateModified !== undefined) {
    output.writeFieldBegin('companyDateModified', Thrift.Type.I64, 18);
    output.writeI64(this.companyDateModified);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 19);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.profileVersion !== null && this.profileVersion !== undefined) {
    output.writeFieldBegin('profileVersion', Thrift.Type.I64, 20);
    output.writeI64(this.profileVersion);
    output.writeFieldEnd();
  }
  if (this.profilePolicyVersion !== null && this.profilePolicyVersion !== undefined) {
    output.writeFieldBegin('profilePolicyVersion', Thrift.Type.I64, 21);
    output.writeI64(this.profilePolicyVersion);
    output.writeFieldEnd();
  }
  if (this.legalEntityIdentifier !== null && this.legalEntityIdentifier !== undefined) {
    output.writeFieldBegin('legalEntityIdentifier', Thrift.Type.STRING, 22);
    output.writeString(this.legalEntityIdentifier);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 23);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAutoCompleteResultStruct = module.exports.UserAutoCompleteResultStruct = function(args) {
  this.userId = null;
  this.firstName = null;
  this.lastName = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserAutoCompleteResultStruct.prototype = {};
UserAutoCompleteResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAutoCompleteResultStruct.prototype.write = function(output) {
  output.writeStructBegin('UserAutoCompleteResultStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommunicationPlatformStruct = module.exports.CommunicationPlatformStruct = function(args) {
  this.name = null;
  this.code = null;
  this.deliveryTypes = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.deliveryTypes !== undefined && args.deliveryTypes !== null) {
      this.deliveryTypes = Thrift.copyList(args.deliveryTypes, [null]);
    }
  }
};
CommunicationPlatformStruct.prototype = {};
CommunicationPlatformStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.deliveryTypes = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = input.readString();
          this.deliveryTypes.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationPlatformStruct.prototype.write = function(output) {
  output.writeStructBegin('CommunicationPlatformStruct');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.deliveryTypes !== null && this.deliveryTypes !== undefined) {
    output.writeFieldBegin('deliveryTypes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.deliveryTypes.length);
    for (var iter54 in this.deliveryTypes) {
      if (this.deliveryTypes.hasOwnProperty(iter54)) {
        iter54 = this.deliveryTypes[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyCommunicationPlatformStruct = module.exports.CompanyCommunicationPlatformStruct = function(args) {
  this.id = null;
  this.communicationPlatform = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.communicationPlatform !== undefined && args.communicationPlatform !== null) {
      this.communicationPlatform = new ttypes.CommunicationPlatformStruct(args.communicationPlatform);
    }
  }
};
CompanyCommunicationPlatformStruct.prototype = {};
CompanyCommunicationPlatformStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.communicationPlatform = new ttypes.CommunicationPlatformStruct();
        this.communicationPlatform.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyCommunicationPlatformStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyCommunicationPlatformStruct');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.communicationPlatform !== null && this.communicationPlatform !== undefined) {
    output.writeFieldBegin('communicationPlatform', Thrift.Type.STRUCT, 2);
    this.communicationPlatform.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FindUserAliasesResultStruct = module.exports.FindUserAliasesResultStruct = function(args) {
  this.userAliases = null;
  this.totalResultsFound = null;
  if (args) {
    if (args.userAliases !== undefined && args.userAliases !== null) {
      this.userAliases = Thrift.copyList(args.userAliases, [ttypes.UserAliasStruct]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userAliases is unset!');
    }
    if (args.totalResultsFound !== undefined && args.totalResultsFound !== null) {
      this.totalResultsFound = args.totalResultsFound;
    }
  }
};
FindUserAliasesResultStruct.prototype = {};
FindUserAliasesResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.userAliases = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = new ttypes.UserAliasStruct();
          elem58.read(input);
          this.userAliases.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalResultsFound = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FindUserAliasesResultStruct.prototype.write = function(output) {
  output.writeStructBegin('FindUserAliasesResultStruct');
  if (this.userAliases !== null && this.userAliases !== undefined) {
    output.writeFieldBegin('userAliases', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.userAliases.length);
    for (var iter59 in this.userAliases) {
      if (this.userAliases.hasOwnProperty(iter59)) {
        iter59 = this.userAliases[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalResultsFound !== null && this.totalResultsFound !== undefined) {
    output.writeFieldBegin('totalResultsFound', Thrift.Type.I32, 2);
    output.writeI32(this.totalResultsFound);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RoleStruct = module.exports.RoleStruct = function(args) {
  this.roleId = null;
  this.roleName = null;
  this.entitlements = null;
  if (args) {
    if (args.roleId !== undefined && args.roleId !== null) {
      this.roleId = args.roleId;
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
    if (args.entitlements !== undefined && args.entitlements !== null) {
      this.entitlements = Thrift.copyList(args.entitlements, [null]);
    }
  }
};
RoleStruct.prototype = {};
RoleStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.roleId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.entitlements = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readString();
          this.entitlements.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleStruct.prototype.write = function(output) {
  output.writeStructBegin('RoleStruct');
  if (this.roleId !== null && this.roleId !== undefined) {
    output.writeFieldBegin('roleId', Thrift.Type.I64, 1);
    output.writeI64(this.roleId);
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 2);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  if (this.entitlements !== null && this.entitlements !== undefined) {
    output.writeFieldBegin('entitlements', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.entitlements.length);
    for (var iter64 in this.entitlements) {
      if (this.entitlements.hasOwnProperty(iter64)) {
        iter64 = this.entitlements[iter64];
        output.writeString(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApplicationInstanceStruct = module.exports.ApplicationInstanceStruct = function(args) {
  this.applicationName = null;
  this.companyId = null;
  this.archiveId = null;
  if (args) {
    if (args.applicationName !== undefined && args.applicationName !== null) {
      this.applicationName = args.applicationName;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.archiveId !== undefined && args.archiveId !== null) {
      this.archiveId = args.archiveId;
    }
  }
};
ApplicationInstanceStruct.prototype = {};
ApplicationInstanceStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.applicationName = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.archiveId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApplicationInstanceStruct.prototype.write = function(output) {
  output.writeStructBegin('ApplicationInstanceStruct');
  if (this.applicationName !== null && this.applicationName !== undefined) {
    output.writeFieldBegin('applicationName', Thrift.Type.I32, 1);
    output.writeI32(this.applicationName);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.archiveId !== null && this.archiveId !== undefined) {
    output.writeFieldBegin('archiveId', Thrift.Type.STRING, 3);
    output.writeString(this.archiveId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupInformationStruct = module.exports.GroupInformationStruct = function(args) {
  this.companyId = null;
  this.groupId = null;
  this.groupName = null;
  this.isDeactivated = null;
  this.groupDisplayName = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
    if (args.isDeactivated !== undefined && args.isDeactivated !== null) {
      this.isDeactivated = args.isDeactivated;
    }
    if (args.groupDisplayName !== undefined && args.groupDisplayName !== null) {
      this.groupDisplayName = args.groupDisplayName;
    }
  }
};
GroupInformationStruct.prototype = {};
GroupInformationStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isDeactivated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.groupDisplayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupInformationStruct.prototype.write = function(output) {
  output.writeStructBegin('GroupInformationStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 2);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 3);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.isDeactivated !== null && this.isDeactivated !== undefined) {
    output.writeFieldBegin('isDeactivated', Thrift.Type.BOOL, 4);
    output.writeBool(this.isDeactivated);
    output.writeFieldEnd();
  }
  if (this.groupDisplayName !== null && this.groupDisplayName !== undefined) {
    output.writeFieldBegin('groupDisplayName', Thrift.Type.STRING, 5);
    output.writeString(this.groupDisplayName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SocialMediaAccessTokenStruct = module.exports.SocialMediaAccessTokenStruct = function(args) {
  this.SocialMediaAccountId = null;
  this.Token = null;
  this.TokenSecret = null;
  this.DateExpires = null;
  this.ScreenName = null;
  this.DisplayName = null;
  this.OAuthVersion = null;
  if (args) {
    if (args.SocialMediaAccountId !== undefined && args.SocialMediaAccountId !== null) {
      this.SocialMediaAccountId = args.SocialMediaAccountId;
    }
    if (args.Token !== undefined && args.Token !== null) {
      this.Token = args.Token;
    }
    if (args.TokenSecret !== undefined && args.TokenSecret !== null) {
      this.TokenSecret = args.TokenSecret;
    }
    if (args.DateExpires !== undefined && args.DateExpires !== null) {
      this.DateExpires = args.DateExpires;
    }
    if (args.ScreenName !== undefined && args.ScreenName !== null) {
      this.ScreenName = args.ScreenName;
    }
    if (args.DisplayName !== undefined && args.DisplayName !== null) {
      this.DisplayName = args.DisplayName;
    }
    if (args.OAuthVersion !== undefined && args.OAuthVersion !== null) {
      this.OAuthVersion = args.OAuthVersion;
    }
  }
};
SocialMediaAccessTokenStruct.prototype = {};
SocialMediaAccessTokenStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.SocialMediaAccountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.TokenSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.DateExpires = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ScreenName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.DisplayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.OAuthVersion = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SocialMediaAccessTokenStruct.prototype.write = function(output) {
  output.writeStructBegin('SocialMediaAccessTokenStruct');
  if (this.SocialMediaAccountId !== null && this.SocialMediaAccountId !== undefined) {
    output.writeFieldBegin('SocialMediaAccountId', Thrift.Type.STRING, 1);
    output.writeString(this.SocialMediaAccountId);
    output.writeFieldEnd();
  }
  if (this.Token !== null && this.Token !== undefined) {
    output.writeFieldBegin('Token', Thrift.Type.STRING, 2);
    output.writeString(this.Token);
    output.writeFieldEnd();
  }
  if (this.TokenSecret !== null && this.TokenSecret !== undefined) {
    output.writeFieldBegin('TokenSecret', Thrift.Type.STRING, 3);
    output.writeString(this.TokenSecret);
    output.writeFieldEnd();
  }
  if (this.DateExpires !== null && this.DateExpires !== undefined) {
    output.writeFieldBegin('DateExpires', Thrift.Type.I64, 4);
    output.writeI64(this.DateExpires);
    output.writeFieldEnd();
  }
  if (this.ScreenName !== null && this.ScreenName !== undefined) {
    output.writeFieldBegin('ScreenName', Thrift.Type.STRING, 5);
    output.writeString(this.ScreenName);
    output.writeFieldEnd();
  }
  if (this.DisplayName !== null && this.DisplayName !== undefined) {
    output.writeFieldBegin('DisplayName', Thrift.Type.STRING, 6);
    output.writeString(this.DisplayName);
    output.writeFieldEnd();
  }
  if (this.OAuthVersion !== null && this.OAuthVersion !== undefined) {
    output.writeFieldBegin('OAuthVersion', Thrift.Type.I16, 7);
    output.writeI16(this.OAuthVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessRightsStruct = module.exports.AccessRightsStruct = function(args) {
  this.systemFolderName = null;
  this.userId = null;
  this.mailboxId = null;
  this.caseName = null;
  if (args) {
    if (args.systemFolderName !== undefined && args.systemFolderName !== null) {
      this.systemFolderName = args.systemFolderName;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.mailboxId !== undefined && args.mailboxId !== null) {
      this.mailboxId = args.mailboxId;
    }
    if (args.caseName !== undefined && args.caseName !== null) {
      this.caseName = args.caseName;
    }
  }
};
AccessRightsStruct.prototype = {};
AccessRightsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.systemFolderName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mailboxId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.caseName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessRightsStruct.prototype.write = function(output) {
  output.writeStructBegin('AccessRightsStruct');
  if (this.systemFolderName !== null && this.systemFolderName !== undefined) {
    output.writeFieldBegin('systemFolderName', Thrift.Type.STRING, 1);
    output.writeString(this.systemFolderName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.mailboxId !== null && this.mailboxId !== undefined) {
    output.writeFieldBegin('mailboxId', Thrift.Type.I64, 3);
    output.writeI64(this.mailboxId);
    output.writeFieldEnd();
  }
  if (this.caseName !== null && this.caseName !== undefined) {
    output.writeFieldBegin('caseName', Thrift.Type.STRING, 4);
    output.writeString(this.caseName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntitlementStruct = module.exports.EntitlementStruct = function(args) {
  this.symbolicName = null;
  if (args) {
    if (args.symbolicName !== undefined && args.symbolicName !== null) {
      this.symbolicName = args.symbolicName;
    }
  }
};
EntitlementStruct.prototype = {};
EntitlementStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbolicName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntitlementStruct.prototype.write = function(output) {
  output.writeStructBegin('EntitlementStruct');
  if (this.symbolicName !== null && this.symbolicName !== undefined) {
    output.writeFieldBegin('symbolicName', Thrift.Type.STRING, 1);
    output.writeString(this.symbolicName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ControlCenterCompanySecurityStruct = module.exports.ControlCenterCompanySecurityStruct = function(args) {
  this.MobileSessionTimeout = null;
  this.NonMobileSessionTimeout = null;
  if (args) {
    if (args.MobileSessionTimeout !== undefined && args.MobileSessionTimeout !== null) {
      this.MobileSessionTimeout = args.MobileSessionTimeout;
    }
    if (args.NonMobileSessionTimeout !== undefined && args.NonMobileSessionTimeout !== null) {
      this.NonMobileSessionTimeout = args.NonMobileSessionTimeout;
    }
  }
};
ControlCenterCompanySecurityStruct.prototype = {};
ControlCenterCompanySecurityStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.MobileSessionTimeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.NonMobileSessionTimeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlCenterCompanySecurityStruct.prototype.write = function(output) {
  output.writeStructBegin('ControlCenterCompanySecurityStruct');
  if (this.MobileSessionTimeout !== null && this.MobileSessionTimeout !== undefined) {
    output.writeFieldBegin('MobileSessionTimeout', Thrift.Type.I32, 1);
    output.writeI32(this.MobileSessionTimeout);
    output.writeFieldEnd();
  }
  if (this.NonMobileSessionTimeout !== null && this.NonMobileSessionTimeout !== undefined) {
    output.writeFieldBegin('NonMobileSessionTimeout', Thrift.Type.I32, 2);
    output.writeI32(this.NonMobileSessionTimeout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ControlCenterCompanyStruct = module.exports.ControlCenterCompanyStruct = function(args) {
  this.companyId = null;
  this.DisplayName = null;
  this.CompanyName = null;
  this.Country = null;
  this.City = null;
  this.PhoneNumber = null;
  this.PostalCode = null;
  this.Province = null;
  this.Street = null;
  this.FaxNumber = null;
  this.Email = null;
  this.domains = null;
  this.authenticationType = null;
  this.security = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.DisplayName !== undefined && args.DisplayName !== null) {
      this.DisplayName = args.DisplayName;
    }
    if (args.CompanyName !== undefined && args.CompanyName !== null) {
      this.CompanyName = args.CompanyName;
    }
    if (args.Country !== undefined && args.Country !== null) {
      this.Country = args.Country;
    }
    if (args.City !== undefined && args.City !== null) {
      this.City = args.City;
    }
    if (args.PhoneNumber !== undefined && args.PhoneNumber !== null) {
      this.PhoneNumber = args.PhoneNumber;
    }
    if (args.PostalCode !== undefined && args.PostalCode !== null) {
      this.PostalCode = args.PostalCode;
    }
    if (args.Province !== undefined && args.Province !== null) {
      this.Province = args.Province;
    }
    if (args.Street !== undefined && args.Street !== null) {
      this.Street = args.Street;
    }
    if (args.FaxNumber !== undefined && args.FaxNumber !== null) {
      this.FaxNumber = args.FaxNumber;
    }
    if (args.Email !== undefined && args.Email !== null) {
      this.Email = args.Email;
    }
    if (args.domains !== undefined && args.domains !== null) {
      this.domains = Thrift.copyList(args.domains, [null]);
    }
    if (args.authenticationType !== undefined && args.authenticationType !== null) {
      this.authenticationType = args.authenticationType;
    }
    if (args.security !== undefined && args.security !== null) {
      this.security = new ttypes.ControlCenterCompanySecurityStruct(args.security);
    }
  }
};
ControlCenterCompanyStruct.prototype = {};
ControlCenterCompanyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.DisplayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.CompanyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.City = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.PhoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.PostalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.Province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.Street = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.FaxNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.Email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.domains = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = input.readString();
          this.domains.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.authenticationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.security = new ttypes.ControlCenterCompanySecurityStruct();
        this.security.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlCenterCompanyStruct.prototype.write = function(output) {
  output.writeStructBegin('ControlCenterCompanyStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.STRING, 1);
    output.writeString(this.companyId);
    output.writeFieldEnd();
  }
  if (this.DisplayName !== null && this.DisplayName !== undefined) {
    output.writeFieldBegin('DisplayName', Thrift.Type.STRING, 2);
    output.writeString(this.DisplayName);
    output.writeFieldEnd();
  }
  if (this.CompanyName !== null && this.CompanyName !== undefined) {
    output.writeFieldBegin('CompanyName', Thrift.Type.STRING, 3);
    output.writeString(this.CompanyName);
    output.writeFieldEnd();
  }
  if (this.Country !== null && this.Country !== undefined) {
    output.writeFieldBegin('Country', Thrift.Type.STRING, 4);
    output.writeString(this.Country);
    output.writeFieldEnd();
  }
  if (this.City !== null && this.City !== undefined) {
    output.writeFieldBegin('City', Thrift.Type.STRING, 5);
    output.writeString(this.City);
    output.writeFieldEnd();
  }
  if (this.PhoneNumber !== null && this.PhoneNumber !== undefined) {
    output.writeFieldBegin('PhoneNumber', Thrift.Type.STRING, 6);
    output.writeString(this.PhoneNumber);
    output.writeFieldEnd();
  }
  if (this.PostalCode !== null && this.PostalCode !== undefined) {
    output.writeFieldBegin('PostalCode', Thrift.Type.STRING, 7);
    output.writeString(this.PostalCode);
    output.writeFieldEnd();
  }
  if (this.Province !== null && this.Province !== undefined) {
    output.writeFieldBegin('Province', Thrift.Type.STRING, 8);
    output.writeString(this.Province);
    output.writeFieldEnd();
  }
  if (this.Street !== null && this.Street !== undefined) {
    output.writeFieldBegin('Street', Thrift.Type.STRING, 9);
    output.writeString(this.Street);
    output.writeFieldEnd();
  }
  if (this.FaxNumber !== null && this.FaxNumber !== undefined) {
    output.writeFieldBegin('FaxNumber', Thrift.Type.STRING, 10);
    output.writeString(this.FaxNumber);
    output.writeFieldEnd();
  }
  if (this.Email !== null && this.Email !== undefined) {
    output.writeFieldBegin('Email', Thrift.Type.STRING, 11);
    output.writeString(this.Email);
    output.writeFieldEnd();
  }
  if (this.domains !== null && this.domains !== undefined) {
    output.writeFieldBegin('domains', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.domains.length);
    for (var iter69 in this.domains) {
      if (this.domains.hasOwnProperty(iter69)) {
        iter69 = this.domains[iter69];
        output.writeString(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.authenticationType !== null && this.authenticationType !== undefined) {
    output.writeFieldBegin('authenticationType', Thrift.Type.I32, 13);
    output.writeI32(this.authenticationType);
    output.writeFieldEnd();
  }
  if (this.security !== null && this.security !== undefined) {
    output.writeFieldBegin('security', Thrift.Type.STRUCT, 14);
    this.security.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateExtendedPropertyStruct = module.exports.CreateExtendedPropertyStruct = function(args) {
  this.name = null;
  this.companyId = null;
  this.dataType = null;
  this.supportsMultiple = null;
  this.isCompanyUnique = null;
  this.templateName = null;
  this.isApplicableToUser = null;
  this.isApplicableToSharedMailbox = null;
  this.isApplicableToGroup = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    }
    if (args.supportsMultiple !== undefined && args.supportsMultiple !== null) {
      this.supportsMultiple = args.supportsMultiple;
    }
    if (args.isCompanyUnique !== undefined && args.isCompanyUnique !== null) {
      this.isCompanyUnique = args.isCompanyUnique;
    }
    if (args.templateName !== undefined && args.templateName !== null) {
      this.templateName = args.templateName;
    }
    if (args.isApplicableToUser !== undefined && args.isApplicableToUser !== null) {
      this.isApplicableToUser = args.isApplicableToUser;
    }
    if (args.isApplicableToSharedMailbox !== undefined && args.isApplicableToSharedMailbox !== null) {
      this.isApplicableToSharedMailbox = args.isApplicableToSharedMailbox;
    }
    if (args.isApplicableToGroup !== undefined && args.isApplicableToGroup !== null) {
      this.isApplicableToGroup = args.isApplicableToGroup;
    }
  }
};
CreateExtendedPropertyStruct.prototype = {};
CreateExtendedPropertyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.supportsMultiple = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isCompanyUnique = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.templateName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isApplicableToUser = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isApplicableToSharedMailbox = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isApplicableToGroup = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateExtendedPropertyStruct.prototype.write = function(output) {
  output.writeStructBegin('CreateExtendedPropertyStruct');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRING, 3);
    output.writeString(this.dataType);
    output.writeFieldEnd();
  }
  if (this.supportsMultiple !== null && this.supportsMultiple !== undefined) {
    output.writeFieldBegin('supportsMultiple', Thrift.Type.BOOL, 4);
    output.writeBool(this.supportsMultiple);
    output.writeFieldEnd();
  }
  if (this.isCompanyUnique !== null && this.isCompanyUnique !== undefined) {
    output.writeFieldBegin('isCompanyUnique', Thrift.Type.BOOL, 5);
    output.writeBool(this.isCompanyUnique);
    output.writeFieldEnd();
  }
  if (this.templateName !== null && this.templateName !== undefined) {
    output.writeFieldBegin('templateName', Thrift.Type.STRING, 6);
    output.writeString(this.templateName);
    output.writeFieldEnd();
  }
  if (this.isApplicableToUser !== null && this.isApplicableToUser !== undefined) {
    output.writeFieldBegin('isApplicableToUser', Thrift.Type.BOOL, 7);
    output.writeBool(this.isApplicableToUser);
    output.writeFieldEnd();
  }
  if (this.isApplicableToSharedMailbox !== null && this.isApplicableToSharedMailbox !== undefined) {
    output.writeFieldBegin('isApplicableToSharedMailbox', Thrift.Type.BOOL, 8);
    output.writeBool(this.isApplicableToSharedMailbox);
    output.writeFieldEnd();
  }
  if (this.isApplicableToGroup !== null && this.isApplicableToGroup !== undefined) {
    output.writeFieldBegin('isApplicableToGroup', Thrift.Type.BOOL, 9);
    output.writeBool(this.isApplicableToGroup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnableCompanyServiceStruct = module.exports.EnableCompanyServiceStruct = function(args) {
  this.companyId = null;
  this.serviceSku = null;
  this.hsmPartitionReference = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.serviceSku !== undefined && args.serviceSku !== null) {
      this.serviceSku = args.serviceSku;
    }
    if (args.hsmPartitionReference !== undefined && args.hsmPartitionReference !== null) {
      this.hsmPartitionReference = args.hsmPartitionReference;
    }
  }
};
EnableCompanyServiceStruct.prototype = {};
EnableCompanyServiceStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serviceSku = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hsmPartitionReference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnableCompanyServiceStruct.prototype.write = function(output) {
  output.writeStructBegin('EnableCompanyServiceStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.serviceSku !== null && this.serviceSku !== undefined) {
    output.writeFieldBegin('serviceSku', Thrift.Type.I32, 2);
    output.writeI32(this.serviceSku);
    output.writeFieldEnd();
  }
  if (this.hsmPartitionReference !== null && this.hsmPartitionReference !== undefined) {
    output.writeFieldBegin('hsmPartitionReference', Thrift.Type.STRING, 3);
    output.writeString(this.hsmPartitionReference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceConfigurationStruct = module.exports.ServiceConfigurationStruct = function(args) {
  this.companyId = null;
  this.systemUserLogin = null;
  this.region = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.systemUserLogin !== undefined && args.systemUserLogin !== null) {
      this.systemUserLogin = args.systemUserLogin;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
ServiceConfigurationStruct.prototype = {};
ServiceConfigurationStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemUserLogin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.region = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceConfigurationStruct.prototype.write = function(output) {
  output.writeStructBegin('ServiceConfigurationStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.systemUserLogin !== null && this.systemUserLogin !== undefined) {
    output.writeFieldBegin('systemUserLogin', Thrift.Type.STRING, 2);
    output.writeString(this.systemUserLogin);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.I32, 3);
    output.writeI32(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApplicationRoleAssignmentConstraintStruct = module.exports.ApplicationRoleAssignmentConstraintStruct = function(args) {
  this.messageFeedId = null;
  this.websiteCrawlingUrlId = null;
  this.deviceSymbolicName = null;
  if (args) {
    if (args.messageFeedId !== undefined && args.messageFeedId !== null) {
      this.messageFeedId = args.messageFeedId;
    }
    if (args.websiteCrawlingUrlId !== undefined && args.websiteCrawlingUrlId !== null) {
      this.websiteCrawlingUrlId = args.websiteCrawlingUrlId;
    }
    if (args.deviceSymbolicName !== undefined && args.deviceSymbolicName !== null) {
      this.deviceSymbolicName = args.deviceSymbolicName;
    }
  }
};
ApplicationRoleAssignmentConstraintStruct.prototype = {};
ApplicationRoleAssignmentConstraintStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageFeedId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.websiteCrawlingUrlId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.deviceSymbolicName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApplicationRoleAssignmentConstraintStruct.prototype.write = function(output) {
  output.writeStructBegin('ApplicationRoleAssignmentConstraintStruct');
  if (this.messageFeedId !== null && this.messageFeedId !== undefined) {
    output.writeFieldBegin('messageFeedId', Thrift.Type.STRING, 1);
    output.writeString(this.messageFeedId);
    output.writeFieldEnd();
  }
  if (this.websiteCrawlingUrlId !== null && this.websiteCrawlingUrlId !== undefined) {
    output.writeFieldBegin('websiteCrawlingUrlId', Thrift.Type.STRING, 2);
    output.writeString(this.websiteCrawlingUrlId);
    output.writeFieldEnd();
  }
  if (this.deviceSymbolicName !== null && this.deviceSymbolicName !== undefined) {
    output.writeFieldBegin('deviceSymbolicName', Thrift.Type.STRING, 3);
    output.writeString(this.deviceSymbolicName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntitlementWithConstraintStruct = module.exports.EntitlementWithConstraintStruct = function(args) {
  this.symbolicName = null;
  this.constraint = null;
  if (args) {
    if (args.symbolicName !== undefined && args.symbolicName !== null) {
      this.symbolicName = args.symbolicName;
    }
    if (args.constraint !== undefined && args.constraint !== null) {
      this.constraint = new ttypes.ApplicationRoleAssignmentConstraintStruct(args.constraint);
    }
  }
};
EntitlementWithConstraintStruct.prototype = {};
EntitlementWithConstraintStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbolicName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.constraint = new ttypes.ApplicationRoleAssignmentConstraintStruct();
        this.constraint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntitlementWithConstraintStruct.prototype.write = function(output) {
  output.writeStructBegin('EntitlementWithConstraintStruct');
  if (this.symbolicName !== null && this.symbolicName !== undefined) {
    output.writeFieldBegin('symbolicName', Thrift.Type.STRING, 1);
    output.writeString(this.symbolicName);
    output.writeFieldEnd();
  }
  if (this.constraint !== null && this.constraint !== undefined) {
    output.writeFieldBegin('constraint', Thrift.Type.STRUCT, 2);
    this.constraint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageAccessExclusionStruct = module.exports.MessageAccessExclusionStruct = function(args) {
  this.excludeOwnReceivedMessage = null;
  this.excludeOwnSentMessage = null;
  this.archiveId = null;
  this.functionId = null;
  if (args) {
    if (args.excludeOwnReceivedMessage !== undefined && args.excludeOwnReceivedMessage !== null) {
      this.excludeOwnReceivedMessage = args.excludeOwnReceivedMessage;
    }
    if (args.excludeOwnSentMessage !== undefined && args.excludeOwnSentMessage !== null) {
      this.excludeOwnSentMessage = args.excludeOwnSentMessage;
    }
    if (args.archiveId !== undefined && args.archiveId !== null) {
      this.archiveId = args.archiveId;
    }
    if (args.functionId !== undefined && args.functionId !== null) {
      this.functionId = args.functionId;
    }
  }
};
MessageAccessExclusionStruct.prototype = {};
MessageAccessExclusionStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.excludeOwnReceivedMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.excludeOwnSentMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.archiveId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.functionId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageAccessExclusionStruct.prototype.write = function(output) {
  output.writeStructBegin('MessageAccessExclusionStruct');
  if (this.excludeOwnReceivedMessage !== null && this.excludeOwnReceivedMessage !== undefined) {
    output.writeFieldBegin('excludeOwnReceivedMessage', Thrift.Type.BOOL, 1);
    output.writeBool(this.excludeOwnReceivedMessage);
    output.writeFieldEnd();
  }
  if (this.excludeOwnSentMessage !== null && this.excludeOwnSentMessage !== undefined) {
    output.writeFieldBegin('excludeOwnSentMessage', Thrift.Type.BOOL, 2);
    output.writeBool(this.excludeOwnSentMessage);
    output.writeFieldEnd();
  }
  if (this.archiveId !== null && this.archiveId !== undefined) {
    output.writeFieldBegin('archiveId', Thrift.Type.STRING, 3);
    output.writeString(this.archiveId);
    output.writeFieldEnd();
  }
  if (this.functionId !== null && this.functionId !== undefined) {
    output.writeFieldBegin('functionId', Thrift.Type.I32, 4);
    output.writeI32(this.functionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FailureException = module.exports.FailureException = function(args) {
  Thrift.TException.call(this, "FailureException");
  this.name = "FailureException";
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(FailureException, Thrift.TException);
FailureException.prototype.name = 'FailureException';
FailureException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailureException.prototype.write = function(output) {
  output.writeStructBegin('FailureException');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserNotFoundException = module.exports.UserNotFoundException = function(args) {
  Thrift.TException.call(this, "UserNotFoundException");
  this.name = "UserNotFoundException";
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
Thrift.inherits(UserNotFoundException, Thrift.TException);
UserNotFoundException.prototype.name = 'UserNotFoundException';
UserNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('UserNotFoundException');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemUserNotFoundException = module.exports.SystemUserNotFoundException = function(args) {
  Thrift.TException.call(this, "SystemUserNotFoundException");
  this.name = "SystemUserNotFoundException";
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
Thrift.inherits(SystemUserNotFoundException, Thrift.TException);
SystemUserNotFoundException.prototype.name = 'SystemUserNotFoundException';
SystemUserNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemUserNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('SystemUserNotFoundException');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAliasNotFoundException = module.exports.UserAliasNotFoundException = function(args) {
  Thrift.TException.call(this, "UserAliasNotFoundException");
  this.name = "UserAliasNotFoundException";
  this.userAliasId = null;
  if (args) {
    if (args.userAliasId !== undefined && args.userAliasId !== null) {
      this.userAliasId = args.userAliasId;
    }
  }
};
Thrift.inherits(UserAliasNotFoundException, Thrift.TException);
UserAliasNotFoundException.prototype.name = 'UserAliasNotFoundException';
UserAliasNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userAliasId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAliasNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('UserAliasNotFoundException');
  if (this.userAliasId !== null && this.userAliasId !== undefined) {
    output.writeFieldBegin('userAliasId', Thrift.Type.I64, 1);
    output.writeI64(this.userAliasId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAliasNotValidMailboxRecoveryAddressException = module.exports.UserAliasNotValidMailboxRecoveryAddressException = function(args) {
  Thrift.TException.call(this, "UserAliasNotValidMailboxRecoveryAddressException");
  this.name = "UserAliasNotValidMailboxRecoveryAddressException";
  this.userAliasId = null;
  if (args) {
    if (args.userAliasId !== undefined && args.userAliasId !== null) {
      this.userAliasId = args.userAliasId;
    }
  }
};
Thrift.inherits(UserAliasNotValidMailboxRecoveryAddressException, Thrift.TException);
UserAliasNotValidMailboxRecoveryAddressException.prototype.name = 'UserAliasNotValidMailboxRecoveryAddressException';
UserAliasNotValidMailboxRecoveryAddressException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userAliasId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAliasNotValidMailboxRecoveryAddressException.prototype.write = function(output) {
  output.writeStructBegin('UserAliasNotValidMailboxRecoveryAddressException');
  if (this.userAliasId !== null && this.userAliasId !== undefined) {
    output.writeFieldBegin('userAliasId', Thrift.Type.I64, 1);
    output.writeI64(this.userAliasId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RbacException = module.exports.RbacException = function(args) {
  Thrift.TException.call(this, "RbacException");
  this.name = "RbacException";
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(RbacException, Thrift.TException);
RbacException.prototype.name = 'RbacException';
RbacException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RbacException.prototype.write = function(output) {
  output.writeStructBegin('RbacException');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyNotFoundException = module.exports.CompanyNotFoundException = function(args) {
  Thrift.TException.call(this, "CompanyNotFoundException");
  this.name = "CompanyNotFoundException";
};
Thrift.inherits(CompanyNotFoundException, Thrift.TException);
CompanyNotFoundException.prototype.name = 'CompanyNotFoundException';
CompanyNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('CompanyNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupNotFoundException = module.exports.GroupNotFoundException = function(args) {
  Thrift.TException.call(this, "GroupNotFoundException");
  this.name = "GroupNotFoundException";
};
Thrift.inherits(GroupNotFoundException, Thrift.TException);
GroupNotFoundException.prototype.name = 'GroupNotFoundException';
GroupNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('GroupNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupAlreadyExistsException = module.exports.GroupAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "GroupAlreadyExistsException");
  this.name = "GroupAlreadyExistsException";
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field groupId is unset!');
    }
  }
};
Thrift.inherits(GroupAlreadyExistsException, Thrift.TException);
GroupAlreadyExistsException.prototype.name = 'GroupAlreadyExistsException';
GroupAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.groupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('GroupAlreadyExistsException');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I32, 1);
    output.writeI32(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyAlreadyExistsException = module.exports.CompanyAlreadyExistsException = function(args) {
  Thrift.TException.call(this, "CompanyAlreadyExistsException");
  this.name = "CompanyAlreadyExistsException";
  this.companyId = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field companyId is unset!');
    }
  }
};
Thrift.inherits(CompanyAlreadyExistsException, Thrift.TException);
CompanyAlreadyExistsException.prototype.name = 'CompanyAlreadyExistsException';
CompanyAlreadyExistsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyAlreadyExistsException.prototype.write = function(output) {
  output.writeStructBegin('CompanyAlreadyExistsException');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidUserCountException = module.exports.InvalidUserCountException = function(args) {
  Thrift.TException.call(this, "InvalidUserCountException");
  this.name = "InvalidUserCountException";
};
Thrift.inherits(InvalidUserCountException, Thrift.TException);
InvalidUserCountException.prototype.name = 'InvalidUserCountException';
InvalidUserCountException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidUserCountException.prototype.write = function(output) {
  output.writeStructBegin('InvalidUserCountException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserCountTooLargeException = module.exports.UserCountTooLargeException = function(args) {
  Thrift.TException.call(this, "UserCountTooLargeException");
  this.name = "UserCountTooLargeException";
  this.maxUsers = null;
  if (args) {
    if (args.maxUsers !== undefined && args.maxUsers !== null) {
      this.maxUsers = args.maxUsers;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxUsers is unset!');
    }
  }
};
Thrift.inherits(UserCountTooLargeException, Thrift.TException);
UserCountTooLargeException.prototype.name = 'UserCountTooLargeException';
UserCountTooLargeException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxUsers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCountTooLargeException.prototype.write = function(output) {
  output.writeStructBegin('UserCountTooLargeException');
  if (this.maxUsers !== null && this.maxUsers !== undefined) {
    output.writeFieldBegin('maxUsers', Thrift.Type.I32, 1);
    output.writeI32(this.maxUsers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ArchiveNotFoundException = module.exports.ArchiveNotFoundException = function(args) {
  Thrift.TException.call(this, "ArchiveNotFoundException");
  this.name = "ArchiveNotFoundException";
};
Thrift.inherits(ArchiveNotFoundException, Thrift.TException);
ArchiveNotFoundException.prototype.name = 'ArchiveNotFoundException';
ArchiveNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArchiveNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('ArchiveNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileEditabilityException = module.exports.UserProfileEditabilityException = function(args) {
  Thrift.TException.call(this, "UserProfileEditabilityException");
  this.name = "UserProfileEditabilityException";
};
Thrift.inherits(UserProfileEditabilityException, Thrift.TException);
UserProfileEditabilityException.prototype.name = 'UserProfileEditabilityException';
UserProfileEditabilityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileEditabilityException.prototype.write = function(output) {
  output.writeStructBegin('UserProfileEditabilityException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidSearchCriteriaException = module.exports.InvalidSearchCriteriaException = function(args) {
  Thrift.TException.call(this, "InvalidSearchCriteriaException");
  this.name = "InvalidSearchCriteriaException";
};
Thrift.inherits(InvalidSearchCriteriaException, Thrift.TException);
InvalidSearchCriteriaException.prototype.name = 'InvalidSearchCriteriaException';
InvalidSearchCriteriaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidSearchCriteriaException.prototype.write = function(output) {
  output.writeStructBegin('InvalidSearchCriteriaException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyExtendedUserPropertyNotFoundException = module.exports.CompanyExtendedUserPropertyNotFoundException = function(args) {
  Thrift.TException.call(this, "CompanyExtendedUserPropertyNotFoundException");
  this.name = "CompanyExtendedUserPropertyNotFoundException";
  this.companyId = null;
  this.entityDisplayName = null;
  this.propertyName = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.entityDisplayName !== undefined && args.entityDisplayName !== null) {
      this.entityDisplayName = args.entityDisplayName;
    }
    if (args.propertyName !== undefined && args.propertyName !== null) {
      this.propertyName = args.propertyName;
    }
  }
};
Thrift.inherits(CompanyExtendedUserPropertyNotFoundException, Thrift.TException);
CompanyExtendedUserPropertyNotFoundException.prototype.name = 'CompanyExtendedUserPropertyNotFoundException';
CompanyExtendedUserPropertyNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entityDisplayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.propertyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyExtendedUserPropertyNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('CompanyExtendedUserPropertyNotFoundException');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.entityDisplayName !== null && this.entityDisplayName !== undefined) {
    output.writeFieldBegin('entityDisplayName', Thrift.Type.STRING, 2);
    output.writeString(this.entityDisplayName);
    output.writeFieldEnd();
  }
  if (this.propertyName !== null && this.propertyName !== undefined) {
    output.writeFieldBegin('propertyName', Thrift.Type.STRING, 3);
    output.writeString(this.propertyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommunicationPlatformNotFoundException = module.exports.CommunicationPlatformNotFoundException = function(args) {
  Thrift.TException.call(this, "CommunicationPlatformNotFoundException");
  this.name = "CommunicationPlatformNotFoundException";
};
Thrift.inherits(CommunicationPlatformNotFoundException, Thrift.TException);
CommunicationPlatformNotFoundException.prototype.name = 'CommunicationPlatformNotFoundException';
CommunicationPlatformNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationPlatformNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('CommunicationPlatformNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyApplicationNotFoundException = module.exports.CompanyApplicationNotFoundException = function(args) {
  Thrift.TException.call(this, "CompanyApplicationNotFoundException");
  this.name = "CompanyApplicationNotFoundException";
};
Thrift.inherits(CompanyApplicationNotFoundException, Thrift.TException);
CompanyApplicationNotFoundException.prototype.name = 'CompanyApplicationNotFoundException';
CompanyApplicationNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyApplicationNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('CompanyApplicationNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApplicationInstanceNotFoundException = module.exports.ApplicationInstanceNotFoundException = function(args) {
  Thrift.TException.call(this, "ApplicationInstanceNotFoundException");
  this.name = "ApplicationInstanceNotFoundException";
};
Thrift.inherits(ApplicationInstanceNotFoundException, Thrift.TException);
ApplicationInstanceNotFoundException.prototype.name = 'ApplicationInstanceNotFoundException';
ApplicationInstanceNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApplicationInstanceNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('ApplicationInstanceNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RoleNotFoundException = module.exports.RoleNotFoundException = function(args) {
  Thrift.TException.call(this, "RoleNotFoundException");
  this.name = "RoleNotFoundException";
};
Thrift.inherits(RoleNotFoundException, Thrift.TException);
RoleNotFoundException.prototype.name = 'RoleNotFoundException';
RoleNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('RoleNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OperationNotFoundException = module.exports.OperationNotFoundException = function(args) {
  Thrift.TException.call(this, "OperationNotFoundException");
  this.name = "OperationNotFoundException";
};
Thrift.inherits(OperationNotFoundException, Thrift.TException);
OperationNotFoundException.prototype.name = 'OperationNotFoundException';
OperationNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('OperationNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.X_GR_API_VERSION_VALUE = '1.8.0';
ttypes.DELIVERY_TYPE_COLLECT = 'Collect';
ttypes.DELIVERY_TYPE_RECEIVE = 'Receive';
