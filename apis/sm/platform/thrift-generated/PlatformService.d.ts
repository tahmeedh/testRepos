//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./Platform_types');
import UserAliasType = ttypes.UserAliasType
import ServiceSku = ttypes.ServiceSku
import ReportPackCode = ttypes.ReportPackCode
import ApplicationName = ttypes.ApplicationName
import AuthenticationType = ttypes.AuthenticationType
import AttributeVisibility = ttypes.AttributeVisibility
import AttributeEditability = ttypes.AttributeEditability
import DomainType = ttypes.DomainType
import RegionType = ttypes.RegionType
import X_GR_API_VERSION_VALUE = ttypes.X_GR_API_VERSION_VALUE
import DELIVERY_TYPE_COLLECT = ttypes.DELIVERY_TYPE_COLLECT
import DELIVERY_TYPE_RECEIVE = ttypes.DELIVERY_TYPE_RECEIVE
import FailureException = ttypes.FailureException
import UserNotFoundException = ttypes.UserNotFoundException
import SystemUserNotFoundException = ttypes.SystemUserNotFoundException
import UserAliasNotFoundException = ttypes.UserAliasNotFoundException
import UserAliasNotValidMailboxRecoveryAddressException = ttypes.UserAliasNotValidMailboxRecoveryAddressException
import RbacException = ttypes.RbacException
import CompanyNotFoundException = ttypes.CompanyNotFoundException
import GroupNotFoundException = ttypes.GroupNotFoundException
import GroupAlreadyExistsException = ttypes.GroupAlreadyExistsException
import CompanyAlreadyExistsException = ttypes.CompanyAlreadyExistsException
import InvalidUserCountException = ttypes.InvalidUserCountException
import UserCountTooLargeException = ttypes.UserCountTooLargeException
import ArchiveNotFoundException = ttypes.ArchiveNotFoundException
import UserProfileEditabilityException = ttypes.UserProfileEditabilityException
import InvalidSearchCriteriaException = ttypes.InvalidSearchCriteriaException
import CompanyExtendedUserPropertyNotFoundException = ttypes.CompanyExtendedUserPropertyNotFoundException
import CommunicationPlatformNotFoundException = ttypes.CommunicationPlatformNotFoundException
import CompanyApplicationNotFoundException = ttypes.CompanyApplicationNotFoundException
import ApplicationInstanceNotFoundException = ttypes.ApplicationInstanceNotFoundException
import RoleNotFoundException = ttypes.RoleNotFoundException
import OperationNotFoundException = ttypes.OperationNotFoundException
import MailboxRecoveryAddressStruct = ttypes.MailboxRecoveryAddressStruct
import CompanyQueryStruct = ttypes.CompanyQueryStruct
import CompanyStruct = ttypes.CompanyStruct
import CompanyDomainStruct = ttypes.CompanyDomainStruct
import GroupStruct = ttypes.GroupStruct
import GroupQueryStruct = ttypes.GroupQueryStruct
import FindGroupsResultStruct = ttypes.FindGroupsResultStruct
import FindUsersResultsStruct = ttypes.FindUsersResultsStruct
import UserAliasStruct = ttypes.UserAliasStruct
import PagingStruct = ttypes.PagingStruct
import UserAliasQueryStruct = ttypes.UserAliasQueryStruct
import UserInfoStruct = ttypes.UserInfoStruct
import UserInfoBasicStruct = ttypes.UserInfoBasicStruct
import SystemUserInfoStruct = ttypes.SystemUserInfoStruct
import SystemUserNameStruct = ttypes.SystemUserNameStruct
import UserNameStruct = ttypes.UserNameStruct
import UserStruct = ttypes.UserStruct
import CompanyUserCreateStruct = ttypes.CompanyUserCreateStruct
import SamlAuthStruct = ttypes.SamlAuthStruct
import PwdAuthStruct = ttypes.PwdAuthStruct
import CompanyUserLoginStruct = ttypes.CompanyUserLoginStruct
import SystemUserLoginStruct = ttypes.SystemUserLoginStruct
import ArchiveContactStruct = ttypes.ArchiveContactStruct
import ArchiveBasicStruct = ttypes.ArchiveBasicStruct
import CompanyProfileStruct = ttypes.CompanyProfileStruct
import CompanyProfileBasicStruct = ttypes.CompanyProfileBasicStruct
import CompanyLogoStruct = ttypes.CompanyLogoStruct
import ReportsToStruct = ttypes.ReportsToStruct
import UserProfileAttributeSettingStruct = ttypes.UserProfileAttributeSettingStruct
import UserProfileAttributeValueStruct = ttypes.UserProfileAttributeValueStruct
import UserProfileAttributeCollectionValueStruct = ttypes.UserProfileAttributeCollectionValueStruct
import UserProfileUserSetAttributesStruct = ttypes.UserProfileUserSetAttributesStruct
import ProfilePolicyStruct = ttypes.ProfilePolicyStruct
import UserProfileStruct = ttypes.UserProfileStruct
import UserAutoCompleteResultStruct = ttypes.UserAutoCompleteResultStruct
import CommunicationPlatformStruct = ttypes.CommunicationPlatformStruct
import CompanyCommunicationPlatformStruct = ttypes.CompanyCommunicationPlatformStruct
import FindUserAliasesResultStruct = ttypes.FindUserAliasesResultStruct
import RoleStruct = ttypes.RoleStruct
import ApplicationInstanceStruct = ttypes.ApplicationInstanceStruct
import GroupInformationStruct = ttypes.GroupInformationStruct
import SocialMediaAccessTokenStruct = ttypes.SocialMediaAccessTokenStruct
import AccessRightsStruct = ttypes.AccessRightsStruct
import EntitlementStruct = ttypes.EntitlementStruct
import ControlCenterCompanySecurityStruct = ttypes.ControlCenterCompanySecurityStruct
import ControlCenterCompanyStruct = ttypes.ControlCenterCompanyStruct
import CreateExtendedPropertyStruct = ttypes.CreateExtendedPropertyStruct
import EnableCompanyServiceStruct = ttypes.EnableCompanyServiceStruct
import ServiceConfigurationStruct = ttypes.ServiceConfigurationStruct
import ApplicationRoleAssignmentConstraintStruct = ttypes.ApplicationRoleAssignmentConstraintStruct
import EntitlementWithConstraintStruct = ttypes.EntitlementWithConstraintStruct
import MessageAccessExclusionStruct = ttypes.MessageAccessExclusionStruct

/**
 * SERVICE
 */
declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  /**
   * Gets the major, minor, build, and revision numbers of the Service Manager's assembly
   * 
   * @return
   *   A string representing the major, minor, build, and revision numbers of the Service Manager's assembly.
   */
  getVersion(): string;

  /**
   * Gets the major, minor, build, and revision numbers of the Service Manager's assembly
   * 
   * @return
   *   A string representing the major, minor, build, and revision numbers of the Service Manager's assembly.
   */
  getVersion(callback?: (error: void, response: string)=>void): void;

  setPreferredMailboxRecoveryAddress(userId: Int64, userAliasId: Int64): void;

  setPreferredMailboxRecoveryAddress(userId: Int64, userAliasId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException | ttypes.UserAliasNotFoundException | ttypes.UserAliasNotValidMailboxRecoveryAddressException, response: void)=>void): void;

  removePreferredMailboxRecoveryAddress(userId: Int64): void;

  removePreferredMailboxRecoveryAddress(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  getMailboxRecoveryAddresses(userId: Int64): MailboxRecoveryAddressStruct[];

  getMailboxRecoveryAddresses(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: MailboxRecoveryAddressStruct[])=>void): void;

  /**
   * Creates a company that can be used as a container for users, and
   * can be referred to by its unique name, as set by the client, in
   * the future.  For example a test may create a company add users,
   * and then fail without deleting the company & users such the the
   * data can inspected and deleted later.  A test case or suite
   * would use the same company name each time (ensuring it doesn't
   * conflict with existing other tests).
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  createCompany(companyLegalName: string): number;

  /**
   * Creates a company that can be used as a container for users, and
   * can be referred to by its unique name, as set by the client, in
   * the future.  For example a test may create a company add users,
   * and then fail without deleting the company & users such the the
   * data can inspected and deleted later.  A test case or suite
   * would use the same company name each time (ensuring it doesn't
   * conflict with existing other tests).
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  createCompany(companyLegalName: string, callback?: (error: ttypes.FailureException | ttypes.CompanyAlreadyExistsException, response: number)=>void): void;

  /**
   * Deletes the company with the provided company legal name.
   * All users, user aliases, rosters, profile cards, and other dependent entities will be deleted as part of this operation.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteCompany(companyId: number): void;

  /**
   * Deletes the company with the provided company legal name.
   * All users, user aliases, rosters, profile cards, and other dependent entities will be deleted as part of this operation.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteCompany(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Finds the list of companies by legal name or id.
   * 
   * @param companyQueryStruct
   * 
   * 
   * @return
   *   List of CompanyStruct. Company struct contains the Service Manager Company id and , Company name, Company legal name and date the company was created.
   */
  findCompanies(queryStruct: CompanyQueryStruct): CompanyStruct[];

  /**
   * Finds the list of companies by legal name or id.
   * 
   * @param companyQueryStruct
   * 
   * 
   * @return
   *   List of CompanyStruct. Company struct contains the Service Manager Company id and , Company name, Company legal name and date the company was created.
   */
  findCompanies(queryStruct: CompanyQueryStruct, callback?: (error: ttypes.FailureException, response: CompanyStruct[])=>void): void;

  /**
   * Creates the specified number of users in the given company.
   * 
   * @param companyId
   *      The id of the company. Returned when calling createCompany (prerequisite)
   * @param passwordHash
   *      The JSON value as generated from a given password using the GAS shared Password Hash Java library.
   * @param users
   *      List of userNameStruct that holds user name info as well as a list of user aliases to be added for the user).
   *             A maximum of 100 users can be created per method call.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A list of user structs.  User struct contains the Service Manager User Id and the GRCP alias.
   */
  createUsers(companyId: number, passwordHash: string, users: UserNameStruct[]): UserStruct[];

  /**
   * Creates the specified number of users in the given company.
   * 
   * @param companyId
   *      The id of the company. Returned when calling createCompany (prerequisite)
   * @param passwordHash
   *      The JSON value as generated from a given password using the GAS shared Password Hash Java library.
   * @param users
   *      List of userNameStruct that holds user name info as well as a list of user aliases to be added for the user).
   *             A maximum of 100 users can be created per method call.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A list of user structs.  User struct contains the Service Manager User Id and the GRCP alias.
   */
  createUsers(companyId: number, passwordHash: string, users: UserNameStruct[], callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.InvalidUserCountException | ttypes.UserCountTooLargeException | ttypes.CommunicationPlatformNotFoundException, response: UserStruct[])=>void): void;

  /**
   * Delete an existing company user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId
   *      The company user's SM id.
   */
  deleteUser(userId: Int64): void;

  /**
   * Delete an existing company user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId
   *      The company user's SM id.
   */
  deleteUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  createCompanyDomain(companyId: number, domainName: string): CompanyDomainStruct;

  createCompanyDomain(companyId: number, domainName: string, callback?: (error: ttypes.FailureException, response: CompanyDomainStruct)=>void): void;

  deleteCompanyDomain(companyId: number, companyDomainId: Int64): void;

  deleteCompanyDomain(companyId: number, companyDomainId: Int64, callback?: (error: ttypes.FailureException, response: void)=>void): void;

  getCompanyDomains(companyId: number): CompanyDomainStruct[];

  getCompanyDomains(companyId: number, callback?: (error: ttypes.FailureException, response: CompanyDomainStruct[])=>void): void;

  createCompanyDomainV2(companyId: number, domainName: string, isDoingBusinessAs: boolean): CompanyDomainStruct;

  createCompanyDomainV2(companyId: number, domainName: string, isDoingBusinessAs: boolean, callback?: (error: ttypes.FailureException, response: CompanyDomainStruct)=>void): void;

  /**
   * Create a new company-scoped group.
   * 
   * @param companyId
   *      The company that owns the group.
   * @param groupName
   *      The group name.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with the new groups information.
   */
  createGroup(companyId: number, groupName: string): GroupStruct;

  /**
   * Create a new company-scoped group.
   * 
   * @param companyId
   *      The company that owns the group.
   * @param groupName
   *      The group name.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with the new groups information.
   */
  createGroup(companyId: number, groupName: string, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.GroupAlreadyExistsException, response: GroupStruct)=>void): void;

  /**
   * Delete an existing group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteGroup(groupId: number): void;

  /**
   * Delete an existing group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  deleteGroup(groupId: number, callback?: (error: ttypes.FailureException | ttypes.GroupNotFoundException, response: void)=>void): void;

  /**
   * Finds groups by group query values. If group id is specified in query parameters, then
   * group will be returned regardless of scope if it exists, otherwise the group results
   * will be company-scoped.
   * 
   * @param groupQuery
   *      Query values that will be used to find the company groups.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with list of groups that meets the query values.
   */
  findGroups(groupQuery: GroupQueryStruct): FindGroupsResultStruct;

  /**
   * Finds groups by group query values. If group id is specified in query parameters, then
   * group will be returned regardless of scope if it exists, otherwise the group results
   * will be company-scoped.
   * 
   * @param groupQuery
   *      Query values that will be used to find the company groups.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with list of groups that meets the query values.
   */
  findGroups(groupQuery: GroupQueryStruct, callback?: (error: ttypes.FailureException, response: FindGroupsResultStruct)=>void): void;

  /**
   * Add users to a group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * @param userIds
   *      The list of SM user Id's that will be added to the group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  addUsersToGroup(groupId: number, userIds: Int64[]): void;

  /**
   * Add users to a group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * @param userIds
   *      The list of SM user Id's that will be added to the group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  addUsersToGroup(groupId: number, userIds: Int64[], callback?: (error: ttypes.FailureException | ttypes.GroupNotFoundException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Remove users from a group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * @param userIds
   *      The list of SM user Id's that will be removed from the group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  removeUsersFromGroup(groupId: number, userIds: Int64[]): void;

  /**
   * Remove users from a group, regardless of group scope.
   * 
   * @param groupId
   *      The company group's SM id.
   * @param userIds
   *      The list of SM user Id's that will be removed from the group.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   */
  removeUsersFromGroup(groupId: number, userIds: Int64[], callback?: (error: ttypes.FailureException | ttypes.GroupNotFoundException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Finds group users, regardless of group scope.
   * 
   * @param groupId
   *      The company Group that holds the users.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with list of users in the company group.
   */
  findUsersInGroup(groupId: number): FindUsersResultsStruct;

  /**
   * Finds group users, regardless of group scope.
   * 
   * @param groupId
   *      The company Group that holds the users.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @return
   *   A struct with list of users in the company group.
   */
  findUsersInGroup(groupId: number, callback?: (error: ttypes.FailureException | ttypes.GroupNotFoundException, response: FindUsersResultsStruct)=>void): void;

  /**
   * Gets the company's default date time display preference.
   * 
   * @param companyId
   *      The SM company id used to identify the company.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  getCompanyDefaultDateTimeDisplayTimeZone(companyId: number): string;

  /**
   * Gets the company's default date time display preference.
   * 
   * @param companyId
   *      The SM company id used to identify the company.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  getCompanyDefaultDateTimeDisplayTimeZone(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: string)=>void): void;

  /**
   * Gets the time zone preference of the user.
   * 
   * @param userId
   *      The SM company user Id used to identify the user.
   * 
   * @return The time zone preference of the user.
   *      
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  getUserDateTimeDisplayTimeZone(userId: Int64): string;

  /**
   * Gets the time zone preference of the user.
   * 
   * @param userId
   *      The SM company user Id used to identify the user.
   * 
   * @return The time zone preference of the user.
   *      
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  getUserDateTimeDisplayTimeZone(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: string)=>void): void;

  /**
   * Get a list of all the applications a user has access to, identified by the specified user id.
   * 
   * FOR SYSTEM USERS, USE getApplicationsForSystemUser POST SM2.13
   * 
   * @param userId
   *   The SM company user Id used to identify the user.
   * 
   * @return
   *   A list of components the company user is entitled to.
   */
  getApplicationsForUserByUserId(userId: Int64): string[];

  /**
   * Get a list of all the applications a user has access to, identified by the specified user id.
   * 
   * FOR SYSTEM USERS, USE getApplicationsForSystemUser POST SM2.13
   * 
   * @param userId
   *   The SM company user Id used to identify the user.
   * 
   * @return
   *   A list of components the company user is entitled to.
   */
  getApplicationsForUserByUserId(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: string[])=>void): void;

  /**
   * Get a list of all the applications a system user has access to.
   * 
   * @return
   *   A list of components the system user is entitled to.
   */
  getApplicationsForSystemUser(): string[];

  /**
   * Get a list of all the applications a system user has access to.
   * 
   * @return
   *   A list of components the system user is entitled to.
   */
  getApplicationsForSystemUser(callback?: (error: ttypes.FailureException, response: string[])=>void): void;

  /**
   * Get a list of all the applications available from SM.
   * 
   * @return
   *   A list of components.
   */
  getAllApplications(): string[];

  /**
   * Get a list of all the applications available from SM.
   * 
   * @return
   *   A list of components.
   */
  getAllApplications(callback?: (error: ttypes.FailureException, response: string[])=>void): void;

  /**
   * Sets the company's default date time display preference.
   * 
   * @param companyId
   *      The SM company id used to identify the company.
   * @param timeZone
   *      The string representation of the time zone specified for the company. SM users using the company default will use this time zone.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setCompanyDefaultDateTimeDisplayTimeZone(companyId: number, timeZone: string): void;

  /**
   * Sets the company's default date time display preference.
   * 
   * @param companyId
   *      The SM company id used to identify the company.
   * @param timeZone
   *      The string representation of the time zone specified for the company. SM users using the company default will use this time zone.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setCompanyDefaultDateTimeDisplayTimeZone(companyId: number, timeZone: string, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Sets the user's date time display preference.
   * 
   * @param userId
   *      The SM company user Id used to identify the user.
   * @param timeZone
   *      The string representation of the time zone the user wants instead of the company default time zone.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setUserDateTimeDisplayTimeZone(userId: Int64, timeZone: string): void;

  /**
   * Sets the user's date time display preference.
   * 
   * @param userId
   *      The SM company user Id used to identify the user.
   * @param timeZone
   *      The string representation of the time zone the user wants instead of the company default time zone.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setUserDateTimeDisplayTimeZone(userId: Int64, timeZone: string, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Sets the user's date time display preference back to the company default.
   * 
   * @param userId The SM company user Id used to identify the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setUserDateTimeDisplayTimeZoneToCompanyDefault(userId: Int64): void;

  /**
   * Sets the user's date time display preference back to the company default.
   * 
   * @param userId The SM company user Id used to identify the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException If the user is not found.
   */
  setUserDateTimeDisplayTimeZoneToCompanyDefault(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Enables the company to use GR Message by provisioning required services
   * and creating a role with directory entitlements for all existing users.
   *        
   * @param companyId The SM company Id used to provision GRMessage service for.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   * 
   */
  enableGrMessageForCompany(companyId: number): void;

  /**
   * Enables the company to use GR Message by provisioning required services
   * and creating a role with directory entitlements for all existing users.
   *        
   * @param companyId The SM company Id used to provision GRMessage service for.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   * 
   */
  enableGrMessageForCompany(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Enables the company to use all services.
   * 
   * @param companyId The SM company Id used to provision all services for.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableAllServicesForCompany(companyId: number): void;

  /**
   * Enables the company to use all services.
   * 
   * @param companyId The SM company Id used to provision all services for.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableAllServicesForCompany(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Enables the company to use a given service.
   * 
   * @param companyId
   *      The SM company Id used to provision service for.
   * @param serviceSku
   *      The SKU of the service to be provisioned for the company.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableServiceForCompany(companyId: number, serviceSku: ServiceSku): void;

  /**
   * Enables the company to use a given service.
   * 
   * @param companyId
   *      The SM company Id used to provision service for.
   * @param serviceSku
   *      The SKU of the service to be provisioned for the company.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableServiceForCompany(companyId: number, serviceSku: ServiceSku, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Enables the company to use a given service.
   * 
   * @param enableCompanyServiceStruct
   *      Structure containing data relevant to enabling the service.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableServiceForCompanyV2(enableCompanyServiceStruct: EnableCompanyServiceStruct): void;

  /**
   * Enables the company to use a given service.
   * 
   * @param enableCompanyServiceStruct
   *      Structure containing data relevant to enabling the service.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableServiceForCompanyV2(enableCompanyServiceStruct: EnableCompanyServiceStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Enables the company to use a given report pack.
   * 
   * @param companyId
   *      The SM company Id used to provision service for.
   * @param ReportPackCode
   *      The type of the report pack to be provisioned for the company.
   * 
   * USED BY DATA MIGRATION TOOL.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableReportServiceForCompany(companyId: number, reportPackCode: ReportPackCode): void;

  /**
   * Enables the company to use a given report pack.
   * 
   * @param companyId
   *      The SM company Id used to provision service for.
   * @param ReportPackCode
   *      The type of the report pack to be provisioned for the company.
   * 
   * USED BY DATA MIGRATION TOOL.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  enableReportServiceForCompany(companyId: number, reportPackCode: ReportPackCode, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Disables the company to use a given service.
   * 
   * @param companyId
   *      The SM company Id used to disable service for.
   * @param serviceSku
   *      The SKU of the service to be disabled for the company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  disableServiceForCompany(companyId: number, serviceSku: ServiceSku): void;

  /**
   * Disables the company to use a given service.
   * 
   * @param companyId
   *      The SM company Id used to disable service for.
   * @param serviceSku
   *      The SKU of the service to be disabled for the company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException If the company is not found.
   */
  disableServiceForCompany(companyId: number, serviceSku: ServiceSku, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Checks if a given VHost prefix exists in Service Manager.
   * 
   * @param vHostPrefix The prefix to check.
   * 
   * @return True if the VHost exists. False if it does not.
   * 
   * @throws FailureException
   */
  vHostExists(vHostPrefix: string): boolean;

  /**
   * Checks if a given VHost prefix exists in Service Manager.
   * 
   * @param vHostPrefix The prefix to check.
   * 
   * @return True if the VHost exists. False if it does not.
   * 
   * @throws FailureException
   */
  vHostExists(vHostPrefix: string, callback?: (error: ttypes.FailureException, response: boolean)=>void): void;

  /**
   * Gets the archive contact information for a given archive.
   * 
   * @param archiveId The string ID of the archive.
   *   
   * @return Structure containing archive contact information.
   * 
   * @throws FailureException
   * @throws ArchiveNotFoundException Thrown if the specified archive ID is not found.
   */
  getArchiveContactInformation(archiveId: string): ArchiveContactStruct;

  /**
   * Gets the archive contact information for a given archive.
   * 
   * @param archiveId The string ID of the archive.
   *   
   * @return Structure containing archive contact information.
   * 
   * @throws FailureException
   * @throws ArchiveNotFoundException Thrown if the specified archive ID is not found.
   */
  getArchiveContactInformation(archiveId: string, callback?: (error: ttypes.FailureException | ttypes.ArchiveNotFoundException, response: ArchiveContactStruct)=>void): void;

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for all
   * applications.
   * 
   * @param userId The SM User ID of the user.
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getOperationsForUser(userId: Int64): string[];

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for all
   * applications.
   * 
   * @param userId The SM User ID of the user.
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getOperationsForUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: string[])=>void): void;

  /**
   * Gets a list of symbolic names of entitlements that the user has access to for all
   * applications and functions.
   * 
   * @param userId The SM User ID of the user.
   * 
   * @return List of symbolic names of user's entitlements.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getEntitlementsForUser(userId: Int64): EntitlementStruct[];

  /**
   * Gets a list of symbolic names of entitlements that the user has access to for all
   * applications and functions.
   * 
   * @param userId The SM User ID of the user.
   * 
   * @return List of symbolic names of user's entitlements.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getEntitlementsForUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: EntitlementStruct[])=>void): void;

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for all
   * applications.
   * 
   * @param userId The SM User ID of the user.
   * @param companId The SM Comany ID of the company
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException Thrown if the company is not found.
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getServiceManagerOperationsForUser(userId: Int64, companyId: number): string[];

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for all
   * applications.
   * 
   * @param userId The SM User ID of the user.
   * @param companId The SM Comany ID of the company
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws CompanyNotFoundException Thrown if the company is not found.
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getServiceManagerOperationsForUser(userId: Int64, companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.UserNotFoundException, response: string[])=>void): void;

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for the
   * given application.
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getOperationsForUserByApplicationName(userId: Int64, applicationName: ApplicationName): string[];

  /**
   * Gets a list of symbolic names of operations (entitlements) that the user has access to for the
   * given application.
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @return List of symbolic names of operations for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getOperationsForUserByApplicationName(userId: Int64, applicationName: ApplicationName, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: string[])=>void): void;

  /**
   * Return Information for a user.
   *   @param userId Id for User.
   * 
   * @return
   *   User information (CompanyId, CompanyLegalName, FirstMiddleInitialAndLastName (DisplayName), UserAddress (ContactEmailAlias))
   */
  getUserInfo(userId: Int64): UserInfoStruct;

  /**
   * Return Information for a user.
   *   @param userId Id for User.
   * 
   * @return
   *   User information (CompanyId, CompanyLegalName, FirstMiddleInitialAndLastName (DisplayName), UserAddress (ContactEmailAlias))
   */
  getUserInfo(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: UserInfoStruct)=>void): void;

  /**
   * Return Information for a user.
   *   @param email Contact email of the user
   * 
   * @return
   *   User information (CompanyId, CompanyLegalName, FirstMiddleInitialAndLastName (DisplayName), UserAddress (ContactEmailAlias))
   */
  getUserInfoByEmail(email: string): UserInfoStruct;

  /**
   * Return Information for a user.
   *   @param email Contact email of the user
   * 
   * @return
   *   User information (CompanyId, CompanyLegalName, FirstMiddleInitialAndLastName (DisplayName), UserAddress (ContactEmailAlias))
   */
  getUserInfoByEmail(email: string, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: UserInfoStruct)=>void): void;

  /**
   * Return basic Information for a user.
   *   @param userId Id for User.
   * 
   * @return
   *   User information (CompanyId, DisplayName, Email)
   */
  getUserInfoBasic(userId: Int64): UserInfoBasicStruct;

  /**
   * Return basic Information for a user.
   *   @param userId Id for User.
   * 
   * @return
   *   User information (CompanyId, DisplayName, Email)
   */
  getUserInfoBasic(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: UserInfoBasicStruct)=>void): void;

  /**
   * Return Information for a system user.
   *   @param userId Id for System User.
   * 
   * @return
   *   User information (DisplayName, CompanyId, CompanyLegalName)
   */
  getSystemUserInfo(userId: Int64): SystemUserInfoStruct;

  /**
   * Return Information for a system user.
   *   @param userId Id for System User.
   * 
   * @return
   *   User information (DisplayName, CompanyId, CompanyLegalName)
   */
  getSystemUserInfo(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: SystemUserInfoStruct)=>void): void;

  /**
   * Return information for a user, including the contact support message in the specified language.
   * If the contact support message does not exist in the language, the default (english) will be returned.
   * 
   * @param userId
   *  SM user ID of the user.
   * @param language
   *  Requested language for the support message. Default will be used if this language is not set.
   * 
   * @return
   *  User information, including the contact support message they should see.
   */
  getUserInfoWithSupportMessage(userId: Int64, language: string): UserInfoStruct;

  /**
   * Return information for a user, including the contact support message in the specified language.
   * If the contact support message does not exist in the language, the default (english) will be returned.
   * 
   * @param userId
   *  SM user ID of the user.
   * @param language
   *  Requested language for the support message. Default will be used if this language is not set.
   * 
   * @return
   *  User information, including the contact support message they should see.
   */
  getUserInfoWithSupportMessage(userId: Int64, language: string, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: UserInfoStruct)=>void): void;

  /**
   *  * Get a list of serivces provisioned for a given company.
   *  *
   *  * @param companyId Id for the company.
   *  *
   *  * @return List of provisioned service SKUs.
   *  *
   *  * @throws FailureException
   *  * @throws CompanyNotFoundException Thrown if the company is not found.
   *  *
   * *
   */
  getProvisionedServices(companyId: number): string[];

  /**
   *  * Get a list of serivces provisioned for a given company.
   *  *
   *  * @param companyId Id for the company.
   *  *
   *  * @return List of provisioned service SKUs.
   *  *
   *  * @throws FailureException
   *  * @throws CompanyNotFoundException Thrown if the company is not found.
   *  *
   * *
   */
  getProvisionedServices(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: string[])=>void): void;

  /**
   * Sets a user's Customer User ID.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   * @param customerUserId The new value of the customer user ID.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  setUserCustomerUserId(userId: Int64, customerUserId: string): void;

  /**
   * Sets a user's Customer User ID.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   * @param customerUserId The new value of the customer user ID.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  setUserCustomerUserId(userId: Int64, customerUserId: string, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Sets the company's contact support messages for the specified language.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *  SM company ID of the company.
   * @param supportMessages
   *  Support messages to set for the company, in the format <languageCode, message>.
   * @param useSupportMessages
   *  Set to true to have the company use support messages. False means the company uses the standard form.
   */
  setCompanySupportContactInformation(companyId: number, supportMessages: { [k: string]: string; }, useSupportMessages: boolean): void;

  /**
   * Sets the company's contact support messages for the specified language.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *  SM company ID of the company.
   * @param supportMessages
   *  Support messages to set for the company, in the format <languageCode, message>.
   * @param useSupportMessages
   *  Set to true to have the company use support messages. False means the company uses the standard form.
   */
  setCompanySupportContactInformation(companyId: number, supportMessages: { [k: string]: string; }, useSupportMessages: boolean, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Deactivate a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  deactivateUser(userId: Int64): void;

  /**
   * Deactivate a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  deactivateUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Activate a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  activateUser(userId: Int64): void;

  /**
   * Activate a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId SM User Id of the user.
   *  
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  activateUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Gets the company profile of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   */
  getCompanyProfile(companyId: number): CompanyProfileStruct;

  /**
   * Gets the company profile of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   */
  getCompanyProfile(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: CompanyProfileStruct)=>void): void;

  /**
   * Gets basic company profile of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   */
  getCompanyProfileBasic(companyId: number): CompanyProfileBasicStruct;

  /**
   * Gets basic company profile of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   */
  getCompanyProfileBasic(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: CompanyProfileBasicStruct)=>void): void;

  /**
   * Gets the company logo of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   * @param version
   *  The current version of the logo
   */
  getCompanyLogo(companyId: number): CompanyLogoStruct;

  /**
   * Gets the company logo of the given company.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   * @param version
   *  The current version of the logo
   */
  getCompanyLogo(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: CompanyLogoStruct)=>void): void;

  /**
   * Set the company profile with the supplied data.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyProfile
   *  Company profile that will be updated.
   */
  setCompanyProfile(companyProfile: CompanyProfileStruct): void;

  /**
   * Set the company profile with the supplied data.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyProfile
   *  Company profile that will be updated.
   */
  setCompanyProfile(companyProfile: CompanyProfileStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Gets the user profile for the given user.
   * 
   * @param userId
   *  Service Manager ID of the user for whom to retrieve the profile.
   * @param actingUserId
   *  Service Manager ID of the user who is acting. Used to determine which information to return based on visibility settings.
   */
  getUserProfile(userId: Int64, actingUserId: Int64): UserProfileStruct;

  /**
   * Gets the user profile for the given user.
   * 
   * @param userId
   *  Service Manager ID of the user for whom to retrieve the profile.
   * @param actingUserId
   *  Service Manager ID of the user who is acting. Used to determine which information to return based on visibility settings.
   */
  getUserProfile(userId: Int64, actingUserId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: UserProfileStruct)=>void): void;

  /**
   * Set the user profile of the user.
   * 
   * @param userId
   *  Service Manager ID of the user.
   * @param userSetAttributes
   *  User-set attributes that will be updated (if company settings allow for it).
   */
  setUserProfile(userId: Int64, userSetAttributes: UserProfileUserSetAttributesStruct): void;

  /**
   * Set the user profile of the user.
   * 
   * @param userId
   *  Service Manager ID of the user.
   * @param userSetAttributes
   *  User-set attributes that will be updated (if company settings allow for it).
   */
  setUserProfile(userId: Int64, userSetAttributes: UserProfileUserSetAttributesStruct, callback?: (error: ttypes.FailureException | ttypes.UserProfileEditabilityException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Searches users within the scope of the given company for the given search term.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   * @param searchTerm
   *  Term to search for.
   * 
   * @returns
   *  Collection of autocomplete results.
   */
  userAutoComplete(companyId: number, searchTerm: string): UserAutoCompleteResultStruct[];

  /**
   * Searches users within the scope of the given company for the given search term.
   * 
   * @param companyId
   *  Service Manager ID of the company.
   * @param searchTerm
   *  Term to search for.
   * 
   * @returns
   *  Collection of autocomplete results.
   */
  userAutoComplete(companyId: number, searchTerm: string, callback?: (error: ttypes.FailureException | ttypes.InvalidSearchCriteriaException | ttypes.CompanyNotFoundException, response: UserAutoCompleteResultStruct[])=>void): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createExtendedUserProperty(companyId: number, name: string, dataType: string): number;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createExtendedUserProperty(companyId: number, name: string, dataType: string, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: number)=>void): void;

  /**
   * FOR TESTING PURPOSES ONLY.
   */
  createExtendedUserPropertyV2(createStruct: CreateExtendedPropertyStruct): number;

  /**
   * FOR TESTING PURPOSES ONLY.
   */
  createExtendedUserPropertyV2(createStruct: CreateExtendedPropertyStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: number)=>void): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  deleteExtendedUserProperty(extendedUserPropertyId: number): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  deleteExtendedUserProperty(extendedUserPropertyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyExtendedUserPropertyNotFoundException, response: void)=>void): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createExtendedPropertyValues(userId: Int64, extendedPropertyName: string, values: string[]): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createExtendedPropertyValues(userId: Int64, extendedPropertyName: string, values: string[], callback?: (error: ttypes.FailureException, response: void)=>void): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createGroupExtendedPropertyValues(companyGroupId: number, extendedPropertyName: string, values: string[]): void;

  /**
   * USED FOR TESTING PURPOSES ONLY.
   */
  createGroupExtendedPropertyValues(companyGroupId: number, extendedPropertyName: string, values: string[], callback?: (error: ttypes.FailureException, response: void)=>void): void;

  /**
   * Returns list of all supported communication platforms.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @returns
   *  Collection of communication platforms with their long and short names.
   */
  getCommunicationPlatforms(): CommunicationPlatformStruct[];

  /**
   * Returns list of all supported communication platforms.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @returns
   *  Collection of communication platforms with their long and short names.
   */
  getCommunicationPlatforms(callback?: (error: ttypes.FailureException, response: CommunicationPlatformStruct[])=>void): void;

  /**
   * Assign a communication platform to a company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *      The SM company Id of the company.
   * @param platformCode
   *      The code of the communication platform that be assigned to the company.
   * 
   */
  assignCommunicationPlatform(companyId: number, platformCode: string): void;

  /**
   * Assign a communication platform to a company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *      The SM company Id of the company.
   * @param platformCode
   *      The code of the communication platform that be assigned to the company.
   * 
   */
  assignCommunicationPlatform(companyId: number, platformCode: string, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.CommunicationPlatformNotFoundException, response: void)=>void): void;

  /**
   * Returns a list of communication platforms assigned to company.
   */
  getCompanyCommunicationPlatforms(companyId: number): CompanyCommunicationPlatformStruct[];

  /**
   * Returns a list of communication platforms assigned to company.
   */
  getCompanyCommunicationPlatforms(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: CompanyCommunicationPlatformStruct[])=>void): void;

  /**
   * Finds user aliases that satisfy the given parameters.
   * 
   * Note: If the query parameters are not set, and the paging structure is not initialised,
   *       the method will attempt to return ALL the users in the database,
   *       and will fail if there is a large number of users in the database.
   *  
   * @param queryParameters
   *      Parameters to be used for the query.
   * @return
   *      Collection of user aliases that satisfy the given criteria, along with the total results found.
   *      The collection is empty if no such user aliases were found.
   */
  findUserAliases(queryParameters: UserAliasQueryStruct): FindUserAliasesResultStruct;

  /**
   * Finds user aliases that satisfy the given parameters.
   * 
   * Note: If the query parameters are not set, and the paging structure is not initialised,
   *       the method will attempt to return ALL the users in the database,
   *       and will fail if there is a large number of users in the database.
   *  
   * @param queryParameters
   *      Parameters to be used for the query.
   * @return
   *      Collection of user aliases that satisfy the given criteria, along with the total results found.
   *      The collection is empty if no such user aliases were found.
   */
  findUserAliases(queryParameters: UserAliasQueryStruct, callback?: (error: ttypes.FailureException, response: FindUserAliasesResultStruct)=>void): void;

  /**
   * Method that returns all roles that are available for the company's application.
   * 
   * @param companyId
   *      The company ID.
   * @param applicationName
   *      The name of the application.
   * @return
   *      List of roles that are available for the archive.
   */
  getRolesForCompany(companyId: number, applicationName: ApplicationName): RoleStruct[];

  /**
   * Method that returns all roles that are available for the company's application.
   * 
   * @param companyId
   *      The company ID.
   * @param applicationName
   *      The name of the application.
   * @return
   *      List of roles that are available for the archive.
   */
  getRolesForCompany(companyId: number, applicationName: ApplicationName, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.CompanyApplicationNotFoundException, response: RoleStruct[])=>void): void;

  /**
   * Method returns list of roles for a user for specific application instance.
   * 
   * @param userId
   *      The Service Manager key of the user for which the roles will be returned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  getUserRoles(userId: Int64, applicationInstance: ApplicationInstanceStruct): RoleStruct[];

  /**
   * Method returns list of roles for a user for specific application instance.
   * 
   * @param userId
   *      The Service Manager key of the user for which the roles will be returned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  getUserRoles(userId: Int64, applicationInstance: ApplicationInstanceStruct, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException | ttypes.ApplicationInstanceNotFoundException, response: RoleStruct[])=>void): void;

  /**
   * Test method that creates a new custom role for the given company application.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleName
   *      The name of the custom role to be created. Name must be unique per company.
   * @param companyId
   *      The company ID for which the custom role is to be created.
   * @param applicationName
   *      The name of the application.
   * @return
   *      The Service Manager key for the role that was created.
   */
  createRole(roleName: string, companyId: number, applicationName: ApplicationName): Int64;

  /**
   * Test method that creates a new custom role for the given company application.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleName
   *      The name of the custom role to be created. Name must be unique per company.
   * @param companyId
   *      The company ID for which the custom role is to be created.
   * @param applicationName
   *      The name of the application.
   * @return
   *      The Service Manager key for the role that was created.
   */
  createRole(roleName: string, companyId: number, applicationName: ApplicationName, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.CompanyApplicationNotFoundException, response: Int64)=>void): void;

  /**
   * Delete an existing company role.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleId
   *      The company role's SM id.
   */
  deleteRole(roleId: Int64): void;

  /**
   * Delete an existing company role.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleId
   *      The company role's SM id.
   */
  deleteRole(roleId: Int64, callback?: (error: ttypes.FailureException | ttypes.RoleNotFoundException, response: void)=>void): void;

  /**
   * Test method that sets operations for a given role.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleId
   *      The Service Manager key for the role.
   * @param operations
   *      A list of operations that will be assigned to the role. If a role has an existing list of operations, it will be replaced by the provided list.
   *      All operations MUST exist in the seeded set of Service Manager operations.
   */
  setOperationsForRole(roleId: Int64, operations: string[]): void;

  /**
   * Test method that sets operations for a given role.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param roleId
   *      The Service Manager key for the role.
   * @param operations
   *      A list of operations that will be assigned to the role. If a role has an existing list of operations, it will be replaced by the provided list.
   *      All operations MUST exist in the seeded set of Service Manager operations.
   */
  setOperationsForRole(roleId: Int64, operations: string[], callback?: (error: ttypes.FailureException | ttypes.RoleNotFoundException | ttypes.OperationNotFoundException, response: void)=>void): void;

  /**
   * Add the given role to a user. Users can have multiple roles assigned to them.
   * 
   * @param userId
   *      The Service Manager key for the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  addRoleToUser(roleId: Int64, userId: Int64, applicationInstance: ApplicationInstanceStruct): void;

  /**
   * Add the given role to a user. Users can have multiple roles assigned to them.
   * 
   * @param userId
   *      The Service Manager key for the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  addRoleToUser(roleId: Int64, userId: Int64, applicationInstance: ApplicationInstanceStruct, callback?: (error: ttypes.FailureException | ttypes.RoleNotFoundException | ttypes.UserNotFoundException | ttypes.ApplicationInstanceNotFoundException, response: void)=>void): void;

  /**
   * Remove the given role from a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId
   *      The Service Manager key for the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  removeRoleFromUser(roleId: Int64, userId: Int64, applicationInstance: ApplicationInstanceStruct): void;

  /**
   * Remove the given role from a user.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userId
   *      The Service Manager key for the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  removeRoleFromUser(roleId: Int64, userId: Int64, applicationInstance: ApplicationInstanceStruct, callback?: (error: ttypes.FailureException | ttypes.RoleNotFoundException | ttypes.UserNotFoundException | ttypes.ApplicationInstanceNotFoundException, response: void)=>void): void;

  /**
   * Test method that adds the given role to a group. Groups can have multiple roles assigned to them
   * and can be from any scope.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param groupId
   *      The Service Manager key for the group.
   * @param roleId
   *      The Service Manager key of the role to which the group will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  addRoleToGroup(roleId: Int64, groupId: number, applicationInstance: ApplicationInstanceStruct): void;

  /**
   * Test method that adds the given role to a group. Groups can have multiple roles assigned to them
   * and can be from any scope.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param groupId
   *      The Service Manager key for the group.
   * @param roleId
   *      The Service Manager key of the role to which the group will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   */
  addRoleToGroup(roleId: Int64, groupId: number, applicationInstance: ApplicationInstanceStruct, callback?: (error: ttypes.FailureException | ttypes.RoleNotFoundException | ttypes.GroupNotFoundException | ttypes.ApplicationInstanceNotFoundException, response: void)=>void): void;

  /**
   * Deactivates the user alias.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userAlias
   *  Details for user alias to be deactivated.
   *      If the aliasId is set, then it will be used to identify the user alias and ignore other parameters.
   *      Otherwise the userAlias and platformCode are used to find the user alias.
   */
  deactivateUserAlias(userAlias: UserAliasStruct): void;

  /**
   * Deactivates the user alias.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param userAlias
   *  Details for user alias to be deactivated.
   *      If the aliasId is set, then it will be used to identify the user alias and ignore other parameters.
   *      Otherwise the userAlias and platformCode are used to find the user alias.
   */
  deactivateUserAlias(userAlias: UserAliasStruct, callback?: (error: ttypes.FailureException | ttypes.UserAliasNotFoundException, response: void)=>void): void;

  /**
   * Adds an alias to a user
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *      The Service Manager key for the users company
   * @param userId
   *      The Service Manager key for the user
   * @param aliasList
   *      A list of details for the users aliases
   */
  addAliasesToUser(companyId: number, userId: Int64, aliasList: UserAliasStruct[]): void;

  /**
   * Adds an alias to a user
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param companyId
   *      The Service Manager key for the users company
   * @param userId
   *      The Service Manager key for the user
   * @param aliasList
   *      A list of details for the users aliases
   */
  addAliasesToUser(companyId: number, userId: Int64, aliasList: UserAliasStruct[], callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Retrieves group information for a given list of group ids regardless of scope.
   * 
   * NOTE: If a group does not exist and therefore cannot be found the group will not be part of the result
   * 
   * @param groupIds
   *     A list of service manager group ids
   * 
   */
  getGroupInformation(groupIds: number[]): GroupInformationStruct[];

  /**
   * Retrieves group information for a given list of group ids regardless of scope.
   * 
   * NOTE: If a group does not exist and therefore cannot be found the group will not be part of the result
   * 
   * @param groupIds
   *     A list of service manager group ids
   * 
   */
  getGroupInformation(groupIds: number[], callback?: (error: ttypes.FailureException, response: GroupInformationStruct[])=>void): void;

  /**
   * Authorizes a social media account
   * 
   * USED FOR TESTING PURPOSES ONLY
   * 
   * @param userId
   *      Service manager user id to authorize the account for
   * 
   * @param platformCode
   *      Social media platform code to be authorized
   * 
   * @param socialMediaAccessToken
   *      SocialMediaAccessToken used for activation. If no token is provided a random token/secret will be generated
   * 
   */
  authorizeSocialMediaAccount(userId: Int64, platformCode: string, socialMediaAccessToken: SocialMediaAccessTokenStruct): void;

  /**
   * Authorizes a social media account
   * 
   * USED FOR TESTING PURPOSES ONLY
   * 
   * @param userId
   *      Service manager user id to authorize the account for
   * 
   * @param platformCode
   *      Social media platform code to be authorized
   * 
   * @param socialMediaAccessToken
   *      SocialMediaAccessToken used for activation. If no token is provided a random token/secret will be generated
   * 
   */
  authorizeSocialMediaAccount(userId: Int64, platformCode: string, socialMediaAccessToken: SocialMediaAccessTokenStruct, callback?: (error: ttypes.FailureException, response: void)=>void): void;

  /**
   * Retrieves the user profile policy for a company
   * 
   * @param companyId
   *   The Service Manager company id for which the user profile policy should be retrieved
   */
  getUserProfilePolicy(companyId: number): ProfilePolicyStruct;

  /**
   * Retrieves the user profile policy for a company
   * 
   * @param companyId
   *   The Service Manager company id for which the user profile policy should be retrieved
   */
  getUserProfilePolicy(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: ProfilePolicyStruct)=>void): void;

  /**
   * Sets the user profile policy for a company
   * 
   * USED FOR TESTING PURPOSES ONLY
   * 
   * @param companyId
   *   The Service Manager company id for which the user profile should be set
   * 
   * @param profilePolicy
   *   The new profile policy which should be set for the company
   */
  setUserProfilePolicy(companyId: number, profilePolicy: ProfilePolicyStruct): void;

  /**
   * Sets the user profile policy for a company
   * 
   * USED FOR TESTING PURPOSES ONLY
   * 
   * @param companyId
   *   The Service Manager company id for which the user profile should be set
   * 
   * @param profilePolicy
   *   The new profile policy which should be set for the company
   */
  setUserProfilePolicy(companyId: number, profilePolicy: ProfilePolicyStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: void)=>void): void;

  /**
   * Assign access rights to archive
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  assignMessageAccessRightsToArchive(userId: Int64, archiveId: string, accessRights: AccessRightsStruct[]): void;

  /**
   * Assign access rights to archive
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  assignMessageAccessRightsToArchive(userId: Int64, archiveId: string, accessRights: AccessRightsStruct[], callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException | ttypes.ArchiveNotFoundException, response: void)=>void): void;

  /**
   * Enable a user
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  enableUser(userId: Int64): void;

  /**
   * Enable a user
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  enableUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Disable a user
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  disableUser(userId: Int64): void;

  /**
   * Disable a user
   * 
   *  USED FOR TESTING PURPOSES ONLY.
   */
  disableUser(userId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Creates a system user in the given company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  createSystemUser(companyId: number, systemUser: SystemUserNameStruct): Int64;

  /**
   * Creates a system user in the given company.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  createSystemUser(companyId: number, systemUser: SystemUserNameStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: Int64)=>void): void;

  /**
   * Deletes a System User
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  deleteSystemUser(companyId: number, systemUserId: Int64): void;

  /**
   * Deletes a System User
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  deleteSystemUser(companyId: number, systemUserId: Int64, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Updates a System User
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  updateSystemUser(companyId: number, systemUserId: Int64, systemUser: SystemUserNameStruct): void;

  /**
   * Updates a System User
   * 
   * USED FOR TESTING PURPOSES ONLY.
   */
  updateSystemUser(companyId: number, systemUserId: Int64, systemUser: SystemUserNameStruct, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * Creates a specified number of users without aliases or logins in the given company.
   * 
   * This API does not create user aliases or logins for the specified users. To create user aliases
   * and logins, call addAliasesToUser() and createCompanyUserLogin() after creating the users.
   * 
   * @param companyId
   *      The id of the company. Returned when calling createCompany (prerequisite)
   * 
   * @param users
   *      A list of users and their properties to create. A maximum of 100 users can be created per method call.
   * 
   * @return
   *   A list of created users and their ids.
   * 
   */
  createCompanyUsers(companyId: number, users: CompanyUserCreateStruct[]): UserStruct[];

  /**
   * Creates a specified number of users without aliases or logins in the given company.
   * 
   * This API does not create user aliases or logins for the specified users. To create user aliases
   * and logins, call addAliasesToUser() and createCompanyUserLogin() after creating the users.
   * 
   * @param companyId
   *      The id of the company. Returned when calling createCompany (prerequisite)
   * 
   * @param users
   *      A list of users and their properties to create. A maximum of 100 users can be created per method call.
   * 
   * @return
   *   A list of created users and their ids.
   * 
   */
  createCompanyUsers(companyId: number, users: CompanyUserCreateStruct[], callback?: (error: ttypes.CompanyNotFoundException | ttypes.FailureException, response: UserStruct[])=>void): void;

  /**
   * Create login authentication for a Company User.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param login
   *     Company User login authentication information to create.
   */
  createCompanyUserLogin(login: CompanyUserLoginStruct): void;

  /**
   * Create login authentication for a Company User.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param login
   *     Company User login authentication information to create.
   */
  createCompanyUserLogin(login: CompanyUserLoginStruct, callback?: (error: ttypes.CompanyNotFoundException | ttypes.UserNotFoundException | ttypes.FailureException, response: void)=>void): void;

  /**
   * Create login authentication for a System User.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param login
   *     System User login authentication information to create.
   */
  createSystemUserLogin(login: SystemUserLoginStruct): void;

  /**
   * Create login authentication for a System User.
   * 
   * USED FOR TESTING PURPOSES ONLY.
   * 
   * @param login
   *     System User login authentication information to create.
   */
  createSystemUserLogin(login: SystemUserLoginStruct, callback?: (error: ttypes.CompanyNotFoundException | ttypes.UserNotFoundException | ttypes.FailureException, response: void)=>void): void;

  /**
   * Create a new company
   * 
   * USED TO MIGRATE CONTROLCENTER COMPANIES
   */
  migrateCompany(company: ControlCenterCompanyStruct, dryRun: boolean): number;

  /**
   * Create a new company
   * 
   * USED TO MIGRATE CONTROLCENTER COMPANIES
   */
  migrateCompany(company: ControlCenterCompanyStruct, dryRun: boolean, callback?: (error: ttypes.FailureException, response: number)=>void): void;

  /**
   * Finds the company by domain name.
   * 
   * @param domain
   *  Company domain name
   * 
   * @return
   *   CompanyStruct. Company struct contains the Service Manager Company id and , Company name, Company legal name and date the company was created.
   */
  getCompanyByDomain(domain: string): CompanyStruct;

  /**
   * Finds the company by domain name.
   * 
   * @param domain
   *  Company domain name
   * 
   * @return
   *   CompanyStruct. Company struct contains the Service Manager Company id and , Company name, Company legal name and date the company was created.
   */
  getCompanyByDomain(domain: string, callback?: (error: ttypes.CompanyNotFoundException | ttypes.FailureException, response: CompanyStruct)=>void): void;

  /**
   * Creates a company in SM by company name and
   * assigns the given domain to the created company
   * 
   * @param name
   *   Company name
   * @param domain
   *   Valid domain name
   * 
   * @return
   *   The id of the company.
   */
  createCompanyWithDomain(name: string, domain: string): number;

  /**
   * Creates a company in SM by company name and
   * assigns the given domain to the created company
   * 
   * @param name
   *   Company name
   * @param domain
   *   Valid domain name
   * 
   * @return
   *   The id of the company.
   */
  createCompanyWithDomain(name: string, domain: string, callback?: (error: ttypes.FailureException | ttypes.CompanyAlreadyExistsException, response: number)=>void): void;

  /**
   * Creates an user in the given company.
   * 
   * @param companyId
   *      The id of the company.
   * @param passwordHash
   *      The JSON value as generated from a given password using the GAS shared Password Hash Java library.
   * @param user
   *      userNameStruct that holds user name info as well as a list of user aliases to be added for the user.
   * 
   * @return
   *   User struct contains the Service Manager User Id and the GRCP alias.
   * 
   */
  createUser(companyId: number, passwordHash: string, user: UserNameStruct): UserStruct;

  /**
   * Creates an user in the given company.
   * 
   * @param companyId
   *      The id of the company.
   * @param passwordHash
   *      The JSON value as generated from a given password using the GAS shared Password Hash Java library.
   * @param user
   *      userNameStruct that holds user name info as well as a list of user aliases to be added for the user.
   * 
   * @return
   *   User struct contains the Service Manager User Id and the GRCP alias.
   * 
   */
  createUser(companyId: number, passwordHash: string, user: UserNameStruct, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.CommunicationPlatformNotFoundException, response: UserStruct)=>void): void;

  /**
   * Returns all companies that have the specified service provisioned.
   */
  getCompaniesWithServiceEnabled(serviceSku: ServiceSku): CompanyStruct[];

  /**
   * Returns all companies that have the specified service provisioned.
   */
  getCompaniesWithServiceEnabled(serviceSku: ServiceSku, callback?: (error: ttypes.FailureException, response: CompanyStruct[])=>void): void;

  /**
   * Returns all Archives in a company.
   */
  getCompanyArchives(companyId: number): ArchiveBasicStruct[];

  /**
   * Returns all Archives in a company.
   */
  getCompanyArchives(companyId: number, callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException, response: ArchiveBasicStruct[])=>void): void;

  /**
   * Find users who has all specified application entitlements in a company.
   */
  findUsersWithAllEntitlements(companyId: number, applicationName: ApplicationName, entitlements: string[]): UserInfoStruct[];

  /**
   * Find users who has all specified application entitlements in a company.
   */
  findUsersWithAllEntitlements(companyId: number, applicationName: ApplicationName, entitlements: string[], callback?: (error: ttypes.FailureException | ttypes.CompanyNotFoundException | ttypes.CompanyApplicationNotFoundException, response: UserInfoStruct[])=>void): void;

  /**
   * Get company service configuration by Sku
   */
  getCompanyServiceConfigBySku(sku: ServiceSku): ServiceConfigurationStruct[];

  /**
   * Get company service configuration by Sku
   */
  getCompanyServiceConfigBySku(sku: ServiceSku, callback?: (error: ttypes.FailureException, response: ServiceConfigurationStruct[])=>void): void;

  /**
   * Gets a list of symbolic names of entitlements along with possible constraints
   * that the user has access to for the given application.
   * If there are no constraints for the role assignment, the constraint field is not set, but the entitlements
   * for the role are still returned.
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @returns List of symbolic names of entitlements for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getEntitlementsForUserByApplicationNameWithConstraints(userId: Int64, applicationName: ApplicationName): EntitlementWithConstraintStruct[];

  /**
   * Gets a list of symbolic names of entitlements along with possible constraints
   * that the user has access to for the given application.
   * If there are no constraints for the role assignment, the constraint field is not set, but the entitlements
   * for the role are still returned.
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @returns List of symbolic names of entitlements for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getEntitlementsForUserByApplicationNameWithConstraints(userId: Int64, applicationName: ApplicationName, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: EntitlementWithConstraintStruct[])=>void): void;

  /**
   * Sets a list of assigned constraints to user which has GRWebsiteArchive role
   * that the user has access to for the given application.
   * If there are no constraints for the role assignment, ??
   * for the user null still returned.
   * 
   * @param userId The SM User ID of the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   * @param applicationName The name of the application.
   * @paramm listOfConstraints
   *      The list of website URL.
   * 
   * @Set list of constraints for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  setWebsiteRoleConstraintsToUser(userId: Int64, roleId: Int64, applicationInstance: ApplicationInstanceStruct, applicationName: ApplicationName, listOfConstraints: ApplicationRoleAssignmentConstraintStruct[]): void;

  /**
   * Sets a list of assigned constraints to user which has GRWebsiteArchive role
   * that the user has access to for the given application.
   * If there are no constraints for the role assignment, ??
   * for the user null still returned.
   * 
   * @param userId The SM User ID of the user.
   * @param roleId
   *      The Service Manager key of the role to which the users will be assigned.
   * @param applicationInstance
   *      The information to identify the application instance.
   * @param applicationName The name of the application.
   * @paramm listOfConstraints
   *      The list of website URL.
   * 
   * @Set list of constraints for the user.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  setWebsiteRoleConstraintsToUser(userId: Int64, roleId: Int64, applicationInstance: ApplicationInstanceStruct, applicationName: ApplicationName, listOfConstraints: ApplicationRoleAssignmentConstraintStruct[], callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: void)=>void): void;

  /**
   * returns a set of all the exclusions for the given user in different functions and archives.
   * 
   * @param userId The SM User ID of the use.
   * 
   * @returns list of exclusion info for the given user.
   * 
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getMessageAccessExclusions(userId: Int64): MessageAccessExclusionStruct[];

  /**
   * returns a set of all the exclusions for the given user in different functions and archives.
   * 
   * @param userId The SM User ID of the use.
   * 
   * @returns list of exclusion info for the given user.
   * 
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getMessageAccessExclusions(userId: Int64, callback?: (error: ttypes.UserNotFoundException, response: MessageAccessExclusionStruct[])=>void): void;

  /**
   * Gets a list of companies
   * that the user has access to for the given application.
   * Access means one or more role assigned in that application for the user in the appropriate instance
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @returns List of companies matching the application name that the user has access to.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getAccessibleCompanies(userId: Int64, applicationName: ApplicationName): CompanyStruct[];

  /**
   * Gets a list of companies
   * that the user has access to for the given application.
   * Access means one or more role assigned in that application for the user in the appropriate instance
   * 
   * @param userId The SM User ID of the user.
   * @param applicationName The name of the application
   * 
   * @returns List of companies matching the application name that the user has access to.
   * 
   * @throws FailureException
   * @throws UserNotFoundException Thrown if the user is not found.
   */
  getAccessibleCompanies(userId: Int64, applicationName: ApplicationName, callback?: (error: ttypes.FailureException | ttypes.UserNotFoundException, response: CompanyStruct[])=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getVersion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setPreferredMailboxRecoveryAddress(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removePreferredMailboxRecoveryAddress(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getMailboxRecoveryAddresses(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findCompanies(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createUsers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompanyDomain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteCompanyDomain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyDomains(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompanyDomainV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findGroups(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addUsersToGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeUsersFromGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findUsersInGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyDefaultDateTimeDisplayTimeZone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserDateTimeDisplayTimeZone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getApplicationsForUserByUserId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getApplicationsForSystemUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAllApplications(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setCompanyDefaultDateTimeDisplayTimeZone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setUserDateTimeDisplayTimeZone(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setUserDateTimeDisplayTimeZoneToCompanyDefault(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableGrMessageForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableAllServicesForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableServiceForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableServiceForCompanyV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableReportServiceForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_disableServiceForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_vHostExists(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getArchiveContactInformation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getOperationsForUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getEntitlementsForUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getServiceManagerOperationsForUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getOperationsForUserByApplicationName(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserInfoByEmail(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserInfoBasic(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getSystemUserInfo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserInfoWithSupportMessage(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getProvisionedServices(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setUserCustomerUserId(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setCompanySupportContactInformation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deactivateUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_activateUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyProfileBasic(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyLogo(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setCompanyProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setUserProfile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_userAutoComplete(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createExtendedUserProperty(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createExtendedUserPropertyV2(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteExtendedUserProperty(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createExtendedPropertyValues(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createGroupExtendedPropertyValues(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCommunicationPlatforms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_assignCommunicationPlatform(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyCommunicationPlatforms(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findUserAliases(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getRolesForCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserRoles(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createRole(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteRole(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setOperationsForRole(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addRoleToUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_removeRoleFromUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addRoleToGroup(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deactivateUserAlias(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_addAliasesToUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getGroupInformation(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_authorizeSocialMediaAccount(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUserProfilePolicy(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setUserProfilePolicy(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_assignMessageAccessRightsToArchive(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_enableUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_disableUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createSystemUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_deleteSystemUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_updateSystemUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompanyUsers(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompanyUserLogin(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createSystemUserLogin(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_migrateCompany(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyByDomain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createCompanyWithDomain(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_createUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompaniesWithServiceEnabled(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyArchives(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_findUsersWithAllEntitlements(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getCompanyServiceConfigBySku(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getEntitlementsForUserByApplicationNameWithConstraints(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_setWebsiteRoleConstraintsToUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getMessageAccessExclusions(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getAccessibleCompanies(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
