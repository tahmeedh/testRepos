//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.AttributeVisibility = {
  '1' : 'PUBLIC',
  'PUBLIC' : 1,
  '2' : 'COMPANY',
  'COMPANY' : 2
};
ttypes.AttributeEditability = {
  '1' : 'NONE',
  'NONE' : 1,
  '2' : 'TIGHT',
  'TIGHT' : 2,
  '3' : 'LOOSE',
  'LOOSE' : 3
};
ttypes.SearchScope = {
  '1' : 'ALL',
  'ALL' : 1,
  '2' : 'PUBLIC',
  'PUBLIC' : 2,
  '3' : 'COMPANY',
  'COMPANY' : 3
};
var PagingStruct = module.exports.PagingStruct = function(args) {
  this.startIndex = null;
  this.pageSize = null;
  this.sortProperty = null;
  this.sortDirection = null;
  if (args) {
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    }
    if (args.sortProperty !== undefined && args.sortProperty !== null) {
      this.sortProperty = args.sortProperty;
    }
    if (args.sortDirection !== undefined && args.sortDirection !== null) {
      this.sortDirection = args.sortDirection;
    }
  }
};
PagingStruct.prototype = {};
PagingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sortProperty = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sortDirection = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PagingStruct.prototype.write = function(output) {
  output.writeStructBegin('PagingStruct');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.sortProperty !== null && this.sortProperty !== undefined) {
    output.writeFieldBegin('sortProperty', Thrift.Type.STRING, 3);
    output.writeString(this.sortProperty);
    output.writeFieldEnd();
  }
  if (this.sortDirection !== null && this.sortDirection !== undefined) {
    output.writeFieldBegin('sortDirection', Thrift.Type.STRING, 4);
    output.writeString(this.sortDirection);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportsToStruct = module.exports.ReportsToStruct = function(args) {
  this.userId = null;
  this.firstName = null;
  this.lastName = null;
  this.isEnabled = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.isEnabled !== undefined && args.isEnabled !== null) {
      this.isEnabled = args.isEnabled;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
ReportsToStruct.prototype = {};
ReportsToStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportsToStruct.prototype.write = function(output) {
  output.writeStructBegin('ReportsToStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.isEnabled !== null && this.isEnabled !== undefined) {
    output.writeFieldBegin('isEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.isEnabled);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 6);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeSettingStruct = module.exports.UserProfileAttributeSettingStruct = function(args) {
  this.visibility = null;
  this.editability = null;
  if (args) {
    if (args.visibility !== undefined && args.visibility !== null) {
      this.visibility = args.visibility;
    }
    if (args.editability !== undefined && args.editability !== null) {
      this.editability = args.editability;
    }
  }
};
UserProfileAttributeSettingStruct.prototype = {};
UserProfileAttributeSettingStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.visibility = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.editability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeSettingStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeSettingStruct');
  if (this.visibility !== null && this.visibility !== undefined) {
    output.writeFieldBegin('visibility', Thrift.Type.I32, 1);
    output.writeI32(this.visibility);
    output.writeFieldEnd();
  }
  if (this.editability !== null && this.editability !== undefined) {
    output.writeFieldBegin('editability', Thrift.Type.I32, 2);
    output.writeI32(this.editability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileAttributeValueStruct = module.exports.UserProfileAttributeValueStruct = function(args) {
  this.profileValue = null;
  this.profileAttributeSettings = null;
  if (args) {
    if (args.profileValue !== undefined && args.profileValue !== null) {
      this.profileValue = args.profileValue;
    }
    if (args.profileAttributeSettings !== undefined && args.profileAttributeSettings !== null) {
      this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct(args.profileAttributeSettings);
    }
  }
};
UserProfileAttributeValueStruct.prototype = {};
UserProfileAttributeValueStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.profileValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profileAttributeSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.profileAttributeSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileAttributeValueStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileAttributeValueStruct');
  if (this.profileValue !== null && this.profileValue !== undefined) {
    output.writeFieldBegin('profileValue', Thrift.Type.STRING, 1);
    output.writeString(this.profileValue);
    output.writeFieldEnd();
  }
  if (this.profileAttributeSettings !== null && this.profileAttributeSettings !== undefined) {
    output.writeFieldBegin('profileAttributeSettings', Thrift.Type.STRUCT, 2);
    this.profileAttributeSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileUserSetAttributesStruct = module.exports.UserProfileUserSetAttributesStruct = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.customerUserId = null;
  this.jobTitle = null;
  this.workPhone = null;
  this.mobilePhone = null;
  this.homePhone = null;
  this.reportsToUser = null;
  this.location = null;
  this.reportsToEditability = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.email = null;
  if (args) {
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = new ttypes.UserProfileAttributeValueStruct(args.firstName);
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = new ttypes.UserProfileAttributeValueStruct(args.lastName);
    }
    if (args.customerUserId !== undefined && args.customerUserId !== null) {
      this.customerUserId = new ttypes.UserProfileAttributeValueStruct(args.customerUserId);
    }
    if (args.jobTitle !== undefined && args.jobTitle !== null) {
      this.jobTitle = new ttypes.UserProfileAttributeValueStruct(args.jobTitle);
    }
    if (args.workPhone !== undefined && args.workPhone !== null) {
      this.workPhone = new ttypes.UserProfileAttributeValueStruct(args.workPhone);
    }
    if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
      this.mobilePhone = new ttypes.UserProfileAttributeValueStruct(args.mobilePhone);
    }
    if (args.homePhone !== undefined && args.homePhone !== null) {
      this.homePhone = new ttypes.UserProfileAttributeValueStruct(args.homePhone);
    }
    if (args.reportsToUser !== undefined && args.reportsToUser !== null) {
      this.reportsToUser = new ttypes.ReportsToStruct(args.reportsToUser);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.UserProfileAttributeValueStruct(args.location);
    }
    if (args.reportsToEditability !== undefined && args.reportsToEditability !== null) {
      this.reportsToEditability = args.reportsToEditability;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = new ttypes.UserProfileAttributeValueStruct(args.addressLine1);
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = new ttypes.UserProfileAttributeValueStruct(args.addressLine2);
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = new ttypes.UserProfileAttributeValueStruct(args.city);
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = new ttypes.UserProfileAttributeValueStruct(args.province);
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = new ttypes.UserProfileAttributeValueStruct(args.postalCode);
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = new ttypes.UserProfileAttributeValueStruct(args.country);
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = new ttypes.UserProfileAttributeValueStruct(args.email);
    }
  }
};
UserProfileUserSetAttributesStruct.prototype = {};
UserProfileUserSetAttributesStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.firstName = new ttypes.UserProfileAttributeValueStruct();
        this.firstName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastName = new ttypes.UserProfileAttributeValueStruct();
        this.lastName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerUserId = new ttypes.UserProfileAttributeValueStruct();
        this.customerUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobTitle = new ttypes.UserProfileAttributeValueStruct();
        this.jobTitle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.workPhone = new ttypes.UserProfileAttributeValueStruct();
        this.workPhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobilePhone = new ttypes.UserProfileAttributeValueStruct();
        this.mobilePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.homePhone = new ttypes.UserProfileAttributeValueStruct();
        this.homePhone.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportsToUser = new ttypes.ReportsToStruct();
        this.reportsToUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.UserProfileAttributeValueStruct();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.reportsToEditability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine1 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressLine2 = new ttypes.UserProfileAttributeValueStruct();
        this.addressLine2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.city = new ttypes.UserProfileAttributeValueStruct();
        this.city.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.province = new ttypes.UserProfileAttributeValueStruct();
        this.province.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.postalCode = new ttypes.UserProfileAttributeValueStruct();
        this.postalCode.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.country = new ttypes.UserProfileAttributeValueStruct();
        this.country.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.email = new ttypes.UserProfileAttributeValueStruct();
        this.email.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileUserSetAttributesStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileUserSetAttributesStruct');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRUCT, 1);
    this.firstName.write(output);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRUCT, 2);
    this.lastName.write(output);
    output.writeFieldEnd();
  }
  if (this.customerUserId !== null && this.customerUserId !== undefined) {
    output.writeFieldBegin('customerUserId', Thrift.Type.STRUCT, 3);
    this.customerUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.jobTitle !== null && this.jobTitle !== undefined) {
    output.writeFieldBegin('jobTitle', Thrift.Type.STRUCT, 4);
    this.jobTitle.write(output);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRUCT, 5);
    this.workPhone.write(output);
    output.writeFieldEnd();
  }
  if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
    output.writeFieldBegin('mobilePhone', Thrift.Type.STRUCT, 6);
    this.mobilePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.homePhone !== null && this.homePhone !== undefined) {
    output.writeFieldBegin('homePhone', Thrift.Type.STRUCT, 7);
    this.homePhone.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToUser !== null && this.reportsToUser !== undefined) {
    output.writeFieldBegin('reportsToUser', Thrift.Type.STRUCT, 8);
    this.reportsToUser.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 9);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToEditability !== null && this.reportsToEditability !== undefined) {
    output.writeFieldBegin('reportsToEditability', Thrift.Type.I32, 11);
    output.writeI32(this.reportsToEditability);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRUCT, 12);
    this.addressLine1.write(output);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRUCT, 13);
    this.addressLine2.write(output);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRUCT, 14);
    this.city.write(output);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRUCT, 15);
    this.province.write(output);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRUCT, 16);
    this.postalCode.write(output);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRUCT, 17);
    this.country.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRUCT, 18);
    this.email.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanyProfileStruct = module.exports.CompanyProfileStruct = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.phoneNumber = null;
  this.website = null;
  this.email = null;
  this.companyLogo = null;
  this.description = null;
  this.productsAndServices = null;
  this.companyLegalName = null;
  this.lei = null;
  this.legalEntityName = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = args.addressLine1;
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = args.addressLine2;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.website !== undefined && args.website !== null) {
      this.website = args.website;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.companyLogo !== undefined && args.companyLogo !== null) {
      this.companyLogo = args.companyLogo;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.productsAndServices !== undefined && args.productsAndServices !== null) {
      this.productsAndServices = args.productsAndServices;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.lei !== undefined && args.lei !== null) {
      this.lei = args.lei;
    }
    if (args.legalEntityName !== undefined && args.legalEntityName !== null) {
      this.legalEntityName = args.legalEntityName;
    }
  }
};
CompanyProfileStruct.prototype = {};
CompanyProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.companyLogo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.productsAndServices = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.lei = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanyProfileStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRING, 3);
    output.writeString(this.addressLine1);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRING, 4);
    output.writeString(this.addressLine2);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 6);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 7);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 8);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 9);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 10);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.companyLogo !== null && this.companyLogo !== undefined) {
    output.writeFieldBegin('companyLogo', Thrift.Type.STRING, 12);
    output.writeString(this.companyLogo);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 13);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.productsAndServices !== null && this.productsAndServices !== undefined) {
    output.writeFieldBegin('productsAndServices', Thrift.Type.STRING, 14);
    output.writeString(this.productsAndServices);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 15);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.lei !== null && this.lei !== undefined) {
    output.writeFieldBegin('lei', Thrift.Type.STRING, 16);
    output.writeString(this.lei);
    output.writeFieldEnd();
  }
  if (this.legalEntityName !== null && this.legalEntityName !== undefined) {
    output.writeFieldBegin('legalEntityName', Thrift.Type.STRING, 17);
    output.writeString(this.legalEntityName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileStruct = module.exports.UserProfileStruct = function(args) {
  this.userId = null;
  this.userSetAttributes = null;
  this.grid = null;
  this.directReports = null;
  this.isDirectReportsTruncated = null;
  this.companyName = null;
  this.companyLegalName = null;
  this.companyAddressLine1 = null;
  this.companyAddressLine2 = null;
  this.companyCity = null;
  this.companyProvince = null;
  this.companyPostalCode = null;
  this.companyCountry = null;
  this.companyPhoneNumber = null;
  this.companyEmail = null;
  this.companyDateModified = null;
  this.companyId = null;
  this.addressLine1 = null;
  this.addressLine2 = null;
  this.city = null;
  this.province = null;
  this.postalCode = null;
  this.country = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userSetAttributes !== undefined && args.userSetAttributes !== null) {
      this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct(args.userSetAttributes);
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
    if (args.directReports !== undefined && args.directReports !== null) {
      this.directReports = Thrift.copyList(args.directReports, [ttypes.ReportsToStruct]);
    }
    if (args.isDirectReportsTruncated !== undefined && args.isDirectReportsTruncated !== null) {
      this.isDirectReportsTruncated = args.isDirectReportsTruncated;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.companyAddressLine1 !== undefined && args.companyAddressLine1 !== null) {
      this.companyAddressLine1 = args.companyAddressLine1;
    }
    if (args.companyAddressLine2 !== undefined && args.companyAddressLine2 !== null) {
      this.companyAddressLine2 = args.companyAddressLine2;
    }
    if (args.companyCity !== undefined && args.companyCity !== null) {
      this.companyCity = args.companyCity;
    }
    if (args.companyProvince !== undefined && args.companyProvince !== null) {
      this.companyProvince = args.companyProvince;
    }
    if (args.companyPostalCode !== undefined && args.companyPostalCode !== null) {
      this.companyPostalCode = args.companyPostalCode;
    }
    if (args.companyCountry !== undefined && args.companyCountry !== null) {
      this.companyCountry = args.companyCountry;
    }
    if (args.companyPhoneNumber !== undefined && args.companyPhoneNumber !== null) {
      this.companyPhoneNumber = args.companyPhoneNumber;
    }
    if (args.companyEmail !== undefined && args.companyEmail !== null) {
      this.companyEmail = args.companyEmail;
    }
    if (args.companyDateModified !== undefined && args.companyDateModified !== null) {
      this.companyDateModified = args.companyDateModified;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.addressLine1 !== undefined && args.addressLine1 !== null) {
      this.addressLine1 = args.addressLine1;
    }
    if (args.addressLine2 !== undefined && args.addressLine2 !== null) {
      this.addressLine2 = args.addressLine2;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserProfileStruct.prototype = {};
UserProfileStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct();
        this.userSetAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.directReports = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.ReportsToStruct();
          elem3.read(input);
          this.directReports.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectReportsTruncated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.companyAddressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.companyCity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.companyProvince = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.companyPostalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.companyCountry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.companyPhoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.companyEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.companyDateModified = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.addressLine2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileStruct.prototype.write = function(output) {
  output.writeStructBegin('UserProfileStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userSetAttributes !== null && this.userSetAttributes !== undefined) {
    output.writeFieldBegin('userSetAttributes', Thrift.Type.STRUCT, 2);
    this.userSetAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 3);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.directReports !== null && this.directReports !== undefined) {
    output.writeFieldBegin('directReports', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.directReports.length);
    for (var iter4 in this.directReports) {
      if (this.directReports.hasOwnProperty(iter4)) {
        iter4 = this.directReports[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isDirectReportsTruncated !== null && this.isDirectReportsTruncated !== undefined) {
    output.writeFieldBegin('isDirectReportsTruncated', Thrift.Type.BOOL, 7);
    output.writeBool(this.isDirectReportsTruncated);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 8);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 9);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine1 !== null && this.companyAddressLine1 !== undefined) {
    output.writeFieldBegin('companyAddressLine1', Thrift.Type.STRING, 10);
    output.writeString(this.companyAddressLine1);
    output.writeFieldEnd();
  }
  if (this.companyAddressLine2 !== null && this.companyAddressLine2 !== undefined) {
    output.writeFieldBegin('companyAddressLine2', Thrift.Type.STRING, 11);
    output.writeString(this.companyAddressLine2);
    output.writeFieldEnd();
  }
  if (this.companyCity !== null && this.companyCity !== undefined) {
    output.writeFieldBegin('companyCity', Thrift.Type.STRING, 12);
    output.writeString(this.companyCity);
    output.writeFieldEnd();
  }
  if (this.companyProvince !== null && this.companyProvince !== undefined) {
    output.writeFieldBegin('companyProvince', Thrift.Type.STRING, 13);
    output.writeString(this.companyProvince);
    output.writeFieldEnd();
  }
  if (this.companyPostalCode !== null && this.companyPostalCode !== undefined) {
    output.writeFieldBegin('companyPostalCode', Thrift.Type.STRING, 14);
    output.writeString(this.companyPostalCode);
    output.writeFieldEnd();
  }
  if (this.companyCountry !== null && this.companyCountry !== undefined) {
    output.writeFieldBegin('companyCountry', Thrift.Type.STRING, 15);
    output.writeString(this.companyCountry);
    output.writeFieldEnd();
  }
  if (this.companyPhoneNumber !== null && this.companyPhoneNumber !== undefined) {
    output.writeFieldBegin('companyPhoneNumber', Thrift.Type.STRING, 16);
    output.writeString(this.companyPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.companyEmail !== null && this.companyEmail !== undefined) {
    output.writeFieldBegin('companyEmail', Thrift.Type.STRING, 17);
    output.writeString(this.companyEmail);
    output.writeFieldEnd();
  }
  if (this.companyDateModified !== null && this.companyDateModified !== undefined) {
    output.writeFieldBegin('companyDateModified', Thrift.Type.I64, 18);
    output.writeI64(this.companyDateModified);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 19);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.addressLine1 !== null && this.addressLine1 !== undefined) {
    output.writeFieldBegin('addressLine1', Thrift.Type.STRING, 20);
    output.writeString(this.addressLine1);
    output.writeFieldEnd();
  }
  if (this.addressLine2 !== null && this.addressLine2 !== undefined) {
    output.writeFieldBegin('addressLine2', Thrift.Type.STRING, 21);
    output.writeString(this.addressLine2);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 22);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 23);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 24);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 25);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 26);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectorySettingsStruct = module.exports.DirectorySettingsStruct = function(args) {
  this.companyId = null;
  this.publishUsers = null;
  this.firstNameSettings = null;
  this.lastNameSettings = null;
  this.customerUserIdSettings = null;
  this.jobTitleSettings = null;
  this.workPhoneSettings = null;
  this.mobilePhoneSettings = null;
  this.homePhoneSettings = null;
  this.reportsToSettings = null;
  this.emailVisibility = null;
  this.locationVisibility = null;
  this.addressSettings = null;
  this.emailSettings = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.publishUsers !== undefined && args.publishUsers !== null) {
      this.publishUsers = args.publishUsers;
    }
    if (args.firstNameSettings !== undefined && args.firstNameSettings !== null) {
      this.firstNameSettings = new ttypes.UserProfileAttributeSettingStruct(args.firstNameSettings);
    }
    if (args.lastNameSettings !== undefined && args.lastNameSettings !== null) {
      this.lastNameSettings = new ttypes.UserProfileAttributeSettingStruct(args.lastNameSettings);
    }
    if (args.customerUserIdSettings !== undefined && args.customerUserIdSettings !== null) {
      this.customerUserIdSettings = new ttypes.UserProfileAttributeSettingStruct(args.customerUserIdSettings);
    }
    if (args.jobTitleSettings !== undefined && args.jobTitleSettings !== null) {
      this.jobTitleSettings = new ttypes.UserProfileAttributeSettingStruct(args.jobTitleSettings);
    }
    if (args.workPhoneSettings !== undefined && args.workPhoneSettings !== null) {
      this.workPhoneSettings = new ttypes.UserProfileAttributeSettingStruct(args.workPhoneSettings);
    }
    if (args.mobilePhoneSettings !== undefined && args.mobilePhoneSettings !== null) {
      this.mobilePhoneSettings = new ttypes.UserProfileAttributeSettingStruct(args.mobilePhoneSettings);
    }
    if (args.homePhoneSettings !== undefined && args.homePhoneSettings !== null) {
      this.homePhoneSettings = new ttypes.UserProfileAttributeSettingStruct(args.homePhoneSettings);
    }
    if (args.reportsToSettings !== undefined && args.reportsToSettings !== null) {
      this.reportsToSettings = new ttypes.UserProfileAttributeSettingStruct(args.reportsToSettings);
    }
    if (args.emailVisibility !== undefined && args.emailVisibility !== null) {
      this.emailVisibility = args.emailVisibility;
    }
    if (args.locationVisibility !== undefined && args.locationVisibility !== null) {
      this.locationVisibility = args.locationVisibility;
    }
    if (args.addressSettings !== undefined && args.addressSettings !== null) {
      this.addressSettings = new ttypes.UserProfileAttributeSettingStruct(args.addressSettings);
    }
    if (args.emailSettings !== undefined && args.emailSettings !== null) {
      this.emailSettings = new ttypes.UserProfileAttributeSettingStruct(args.emailSettings);
    }
  }
};
DirectorySettingsStruct.prototype = {};
DirectorySettingsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.publishUsers = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.firstNameSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.firstNameSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastNameSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.lastNameSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerUserIdSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.customerUserIdSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.jobTitleSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.jobTitleSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.workPhoneSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.workPhoneSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.mobilePhoneSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.mobilePhoneSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.homePhoneSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.homePhoneSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportsToSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.reportsToSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.emailVisibility = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.locationVisibility = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.addressSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.addressSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.emailSettings = new ttypes.UserProfileAttributeSettingStruct();
        this.emailSettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectorySettingsStruct.prototype.write = function(output) {
  output.writeStructBegin('DirectorySettingsStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.publishUsers !== null && this.publishUsers !== undefined) {
    output.writeFieldBegin('publishUsers', Thrift.Type.BOOL, 2);
    output.writeBool(this.publishUsers);
    output.writeFieldEnd();
  }
  if (this.firstNameSettings !== null && this.firstNameSettings !== undefined) {
    output.writeFieldBegin('firstNameSettings', Thrift.Type.STRUCT, 3);
    this.firstNameSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.lastNameSettings !== null && this.lastNameSettings !== undefined) {
    output.writeFieldBegin('lastNameSettings', Thrift.Type.STRUCT, 4);
    this.lastNameSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.customerUserIdSettings !== null && this.customerUserIdSettings !== undefined) {
    output.writeFieldBegin('customerUserIdSettings', Thrift.Type.STRUCT, 5);
    this.customerUserIdSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.jobTitleSettings !== null && this.jobTitleSettings !== undefined) {
    output.writeFieldBegin('jobTitleSettings', Thrift.Type.STRUCT, 6);
    this.jobTitleSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.workPhoneSettings !== null && this.workPhoneSettings !== undefined) {
    output.writeFieldBegin('workPhoneSettings', Thrift.Type.STRUCT, 7);
    this.workPhoneSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.mobilePhoneSettings !== null && this.mobilePhoneSettings !== undefined) {
    output.writeFieldBegin('mobilePhoneSettings', Thrift.Type.STRUCT, 8);
    this.mobilePhoneSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.homePhoneSettings !== null && this.homePhoneSettings !== undefined) {
    output.writeFieldBegin('homePhoneSettings', Thrift.Type.STRUCT, 9);
    this.homePhoneSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.reportsToSettings !== null && this.reportsToSettings !== undefined) {
    output.writeFieldBegin('reportsToSettings', Thrift.Type.STRUCT, 10);
    this.reportsToSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.emailVisibility !== null && this.emailVisibility !== undefined) {
    output.writeFieldBegin('emailVisibility', Thrift.Type.I32, 11);
    output.writeI32(this.emailVisibility);
    output.writeFieldEnd();
  }
  if (this.locationVisibility !== null && this.locationVisibility !== undefined) {
    output.writeFieldBegin('locationVisibility', Thrift.Type.I32, 13);
    output.writeI32(this.locationVisibility);
    output.writeFieldEnd();
  }
  if (this.addressSettings !== null && this.addressSettings !== undefined) {
    output.writeFieldBegin('addressSettings', Thrift.Type.STRUCT, 15);
    this.addressSettings.write(output);
    output.writeFieldEnd();
  }
  if (this.emailSettings !== null && this.emailSettings !== undefined) {
    output.writeFieldBegin('emailSettings', Thrift.Type.STRUCT, 16);
    this.emailSettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAutoCompleteResultStruct = module.exports.UserAutoCompleteResultStruct = function(args) {
  this.userId = null;
  this.firstName = null;
  this.lastName = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
UserAutoCompleteResultStruct.prototype = {};
UserAutoCompleteResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAutoCompleteResultStruct.prototype.write = function(output) {
  output.writeStructBegin('UserAutoCompleteResultStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryBasicSearchParametersStruct = module.exports.DirectoryBasicSearchParametersStruct = function(args) {
  this.keywords = null;
  this.companyId = null;
  this.echoToken = null;
  if (args) {
    if (args.keywords !== undefined && args.keywords !== null) {
      this.keywords = Thrift.copyList(args.keywords, [null]);
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
  }
};
DirectoryBasicSearchParametersStruct.prototype = {};
DirectoryBasicSearchParametersStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.keywords = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.keywords.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryBasicSearchParametersStruct.prototype.write = function(output) {
  output.writeStructBegin('DirectoryBasicSearchParametersStruct');
  if (this.keywords !== null && this.keywords !== undefined) {
    output.writeFieldBegin('keywords', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keywords.length);
    for (var iter9 in this.keywords) {
      if (this.keywords.hasOwnProperty(iter9)) {
        iter9 = this.keywords[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 3);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryAdvancedSearchParametersStruct = module.exports.DirectoryAdvancedSearchParametersStruct = function(args) {
  this.firstNameFilter = null;
  this.lastNameFilter = null;
  this.emailFilter = null;
  this.gridFilter = null;
  this.companyFilter = null;
  this.cityFilter = null;
  this.companyId = null;
  this.echoToken = null;
  if (args) {
    if (args.firstNameFilter !== undefined && args.firstNameFilter !== null) {
      this.firstNameFilter = args.firstNameFilter;
    }
    if (args.lastNameFilter !== undefined && args.lastNameFilter !== null) {
      this.lastNameFilter = args.lastNameFilter;
    }
    if (args.emailFilter !== undefined && args.emailFilter !== null) {
      this.emailFilter = args.emailFilter;
    }
    if (args.gridFilter !== undefined && args.gridFilter !== null) {
      this.gridFilter = args.gridFilter;
    }
    if (args.companyFilter !== undefined && args.companyFilter !== null) {
      this.companyFilter = args.companyFilter;
    }
    if (args.cityFilter !== undefined && args.cityFilter !== null) {
      this.cityFilter = args.cityFilter;
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
  }
};
DirectoryAdvancedSearchParametersStruct.prototype = {};
DirectoryAdvancedSearchParametersStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.emailFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.gridFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.companyFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cityFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryAdvancedSearchParametersStruct.prototype.write = function(output) {
  output.writeStructBegin('DirectoryAdvancedSearchParametersStruct');
  if (this.firstNameFilter !== null && this.firstNameFilter !== undefined) {
    output.writeFieldBegin('firstNameFilter', Thrift.Type.STRING, 1);
    output.writeString(this.firstNameFilter);
    output.writeFieldEnd();
  }
  if (this.lastNameFilter !== null && this.lastNameFilter !== undefined) {
    output.writeFieldBegin('lastNameFilter', Thrift.Type.STRING, 2);
    output.writeString(this.lastNameFilter);
    output.writeFieldEnd();
  }
  if (this.emailFilter !== null && this.emailFilter !== undefined) {
    output.writeFieldBegin('emailFilter', Thrift.Type.STRING, 3);
    output.writeString(this.emailFilter);
    output.writeFieldEnd();
  }
  if (this.gridFilter !== null && this.gridFilter !== undefined) {
    output.writeFieldBegin('gridFilter', Thrift.Type.STRING, 4);
    output.writeString(this.gridFilter);
    output.writeFieldEnd();
  }
  if (this.companyFilter !== null && this.companyFilter !== undefined) {
    output.writeFieldBegin('companyFilter', Thrift.Type.STRING, 5);
    output.writeString(this.companyFilter);
    output.writeFieldEnd();
  }
  if (this.cityFilter !== null && this.cityFilter !== undefined) {
    output.writeFieldBegin('cityFilter', Thrift.Type.STRING, 6);
    output.writeString(this.cityFilter);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 7);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 8);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectorySearchMatchStruct = module.exports.DirectorySearchMatchStruct = function(args) {
  this.userId = null;
  this.companyName = null;
  this.firstName = null;
  this.lastName = null;
  this.city = null;
  this.grid = null;
  this.companyLegalName = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
DirectorySearchMatchStruct.prototype = {};
DirectorySearchMatchStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectorySearchMatchStruct.prototype.write = function(output) {
  output.writeStructBegin('DirectorySearchMatchStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 3);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 4);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 6);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 7);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 8);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeopleSearchResultStruct = module.exports.PeopleSearchResultStruct = function(args) {
  this.userId = null;
  this.companyName = null;
  this.firstName = null;
  this.lastName = null;
  this.city = null;
  this.grid = null;
  this.companyLegalName = null;
  this.stateProvince = null;
  this.country = null;
  this.email = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.grid !== undefined && args.grid !== null) {
      this.grid = args.grid;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.stateProvince !== undefined && args.stateProvince !== null) {
      this.stateProvince = args.stateProvince;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
PeopleSearchResultStruct.prototype = {};
PeopleSearchResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.grid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.stateProvince = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeopleSearchResultStruct.prototype.write = function(output) {
  output.writeStructBegin('PeopleSearchResultStruct');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 3);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 4);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 5);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.grid !== null && this.grid !== undefined) {
    output.writeFieldBegin('grid', Thrift.Type.STRING, 6);
    output.writeString(this.grid);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 7);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.stateProvince !== null && this.stateProvince !== undefined) {
    output.writeFieldBegin('stateProvince', Thrift.Type.STRING, 8);
    output.writeString(this.stateProvince);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 9);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 10);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanySearchResultStruct = module.exports.CompanySearchResultStruct = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.companyLegalName = null;
  this.city = null;
  this.country = null;
  this.stateProvince = null;
  this.lei = null;
  this.legalEntityName = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.companyLegalName !== undefined && args.companyLegalName !== null) {
      this.companyLegalName = args.companyLegalName;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.stateProvince !== undefined && args.stateProvince !== null) {
      this.stateProvince = args.stateProvince;
    }
    if (args.lei !== undefined && args.lei !== null) {
      this.lei = args.lei;
    }
    if (args.legalEntityName !== undefined && args.legalEntityName !== null) {
      this.legalEntityName = args.legalEntityName;
    }
  }
};
CompanySearchResultStruct.prototype = {};
CompanySearchResultStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.stateProvince = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lei = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.legalEntityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanySearchResultStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanySearchResultStruct');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.companyLegalName !== null && this.companyLegalName !== undefined) {
    output.writeFieldBegin('companyLegalName', Thrift.Type.STRING, 3);
    output.writeString(this.companyLegalName);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 4);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.stateProvince !== null && this.stateProvince !== undefined) {
    output.writeFieldBegin('stateProvince', Thrift.Type.STRING, 6);
    output.writeString(this.stateProvince);
    output.writeFieldEnd();
  }
  if (this.lei !== null && this.lei !== undefined) {
    output.writeFieldBegin('lei', Thrift.Type.STRING, 7);
    output.writeString(this.lei);
    output.writeFieldEnd();
  }
  if (this.legalEntityName !== null && this.legalEntityName !== undefined) {
    output.writeFieldBegin('legalEntityName', Thrift.Type.STRING, 8);
    output.writeString(this.legalEntityName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeopleSearchResultsStruct = module.exports.PeopleSearchResultsStruct = function(args) {
  this.totalNumberOfPeople = null;
  this.people = null;
  this.echoToken = null;
  this.offset = null;
  if (args) {
    if (args.totalNumberOfPeople !== undefined && args.totalNumberOfPeople !== null) {
      this.totalNumberOfPeople = args.totalNumberOfPeople;
    }
    if (args.people !== undefined && args.people !== null) {
      this.people = Thrift.copyList(args.people, [ttypes.PeopleSearchResultStruct]);
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
PeopleSearchResultsStruct.prototype = {};
PeopleSearchResultsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNumberOfPeople = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.people = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.PeopleSearchResultStruct();
          elem13.read(input);
          this.people.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeopleSearchResultsStruct.prototype.write = function(output) {
  output.writeStructBegin('PeopleSearchResultsStruct');
  if (this.totalNumberOfPeople !== null && this.totalNumberOfPeople !== undefined) {
    output.writeFieldBegin('totalNumberOfPeople', Thrift.Type.I32, 1);
    output.writeI32(this.totalNumberOfPeople);
    output.writeFieldEnd();
  }
  if (this.people !== null && this.people !== undefined) {
    output.writeFieldBegin('people', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.people.length);
    for (var iter14 in this.people) {
      if (this.people.hasOwnProperty(iter14)) {
        iter14 = this.people[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 3);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 4);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanySearchResultsStruct = module.exports.CompanySearchResultsStruct = function(args) {
  this.totalNumberOfCompanies = null;
  this.companies = null;
  this.echoToken = null;
  this.offset = null;
  if (args) {
    if (args.totalNumberOfCompanies !== undefined && args.totalNumberOfCompanies !== null) {
      this.totalNumberOfCompanies = args.totalNumberOfCompanies;
    }
    if (args.companies !== undefined && args.companies !== null) {
      this.companies = Thrift.copyList(args.companies, [ttypes.CompanySearchResultStruct]);
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
  }
};
CompanySearchResultsStruct.prototype = {};
CompanySearchResultsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalNumberOfCompanies = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.companies = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.CompanySearchResultStruct();
          elem18.read(input);
          this.companies.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanySearchResultsStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanySearchResultsStruct');
  if (this.totalNumberOfCompanies !== null && this.totalNumberOfCompanies !== undefined) {
    output.writeFieldBegin('totalNumberOfCompanies', Thrift.Type.I32, 1);
    output.writeI32(this.totalNumberOfCompanies);
    output.writeFieldEnd();
  }
  if (this.companies !== null && this.companies !== undefined) {
    output.writeFieldBegin('companies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.companies.length);
    for (var iter19 in this.companies) {
      if (this.companies.hasOwnProperty(iter19)) {
        iter19 = this.companies[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 3);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 4);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeopleSearchFilterStruct = module.exports.PeopleSearchFilterStruct = function(args) {
  this.firstNameFilter = null;
  this.lastNameFilter = null;
  this.emailFilter = null;
  this.gridFilter = null;
  this.companyFilter = null;
  this.cityFilter = null;
  this.countryFilter = null;
  this.provinceFilter = null;
  if (args) {
    if (args.firstNameFilter !== undefined && args.firstNameFilter !== null) {
      this.firstNameFilter = args.firstNameFilter;
    }
    if (args.lastNameFilter !== undefined && args.lastNameFilter !== null) {
      this.lastNameFilter = args.lastNameFilter;
    }
    if (args.emailFilter !== undefined && args.emailFilter !== null) {
      this.emailFilter = args.emailFilter;
    }
    if (args.gridFilter !== undefined && args.gridFilter !== null) {
      this.gridFilter = args.gridFilter;
    }
    if (args.companyFilter !== undefined && args.companyFilter !== null) {
      this.companyFilter = args.companyFilter;
    }
    if (args.cityFilter !== undefined && args.cityFilter !== null) {
      this.cityFilter = args.cityFilter;
    }
    if (args.countryFilter !== undefined && args.countryFilter !== null) {
      this.countryFilter = args.countryFilter;
    }
    if (args.provinceFilter !== undefined && args.provinceFilter !== null) {
      this.provinceFilter = args.provinceFilter;
    }
  }
};
PeopleSearchFilterStruct.prototype = {};
PeopleSearchFilterStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.emailFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.gridFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.companyFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cityFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.countryFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.provinceFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeopleSearchFilterStruct.prototype.write = function(output) {
  output.writeStructBegin('PeopleSearchFilterStruct');
  if (this.firstNameFilter !== null && this.firstNameFilter !== undefined) {
    output.writeFieldBegin('firstNameFilter', Thrift.Type.STRING, 1);
    output.writeString(this.firstNameFilter);
    output.writeFieldEnd();
  }
  if (this.lastNameFilter !== null && this.lastNameFilter !== undefined) {
    output.writeFieldBegin('lastNameFilter', Thrift.Type.STRING, 2);
    output.writeString(this.lastNameFilter);
    output.writeFieldEnd();
  }
  if (this.emailFilter !== null && this.emailFilter !== undefined) {
    output.writeFieldBegin('emailFilter', Thrift.Type.STRING, 3);
    output.writeString(this.emailFilter);
    output.writeFieldEnd();
  }
  if (this.gridFilter !== null && this.gridFilter !== undefined) {
    output.writeFieldBegin('gridFilter', Thrift.Type.STRING, 4);
    output.writeString(this.gridFilter);
    output.writeFieldEnd();
  }
  if (this.companyFilter !== null && this.companyFilter !== undefined) {
    output.writeFieldBegin('companyFilter', Thrift.Type.STRING, 5);
    output.writeString(this.companyFilter);
    output.writeFieldEnd();
  }
  if (this.cityFilter !== null && this.cityFilter !== undefined) {
    output.writeFieldBegin('cityFilter', Thrift.Type.STRING, 6);
    output.writeString(this.cityFilter);
    output.writeFieldEnd();
  }
  if (this.countryFilter !== null && this.countryFilter !== undefined) {
    output.writeFieldBegin('countryFilter', Thrift.Type.STRING, 7);
    output.writeString(this.countryFilter);
    output.writeFieldEnd();
  }
  if (this.provinceFilter !== null && this.provinceFilter !== undefined) {
    output.writeFieldBegin('provinceFilter', Thrift.Type.STRING, 8);
    output.writeString(this.provinceFilter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PeopleSearchParametersStruct = module.exports.PeopleSearchParametersStruct = function(args) {
  this.keywords = null;
  this.companyId = null;
  this.echoToken = null;
  this.paging = null;
  this.filters = null;
  this.userId = null;
  this.scope = null;
  this.excludeRosterEntries = null;
  if (args) {
    if (args.keywords !== undefined && args.keywords !== null) {
      this.keywords = Thrift.copyList(args.keywords, [null]);
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
    if (args.paging !== undefined && args.paging !== null) {
      this.paging = new ttypes.PagingStruct(args.paging);
    }
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = new ttypes.PeopleSearchFilterStruct(args.filters);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.excludeRosterEntries !== undefined && args.excludeRosterEntries !== null) {
      this.excludeRosterEntries = args.excludeRosterEntries;
    }
  }
};
PeopleSearchParametersStruct.prototype = {};
PeopleSearchParametersStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.keywords = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString();
          this.keywords.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.paging = new ttypes.PagingStruct();
        this.paging.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filters = new ttypes.PeopleSearchFilterStruct();
        this.filters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.excludeRosterEntries = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeopleSearchParametersStruct.prototype.write = function(output) {
  output.writeStructBegin('PeopleSearchParametersStruct');
  if (this.keywords !== null && this.keywords !== undefined) {
    output.writeFieldBegin('keywords', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keywords.length);
    for (var iter24 in this.keywords) {
      if (this.keywords.hasOwnProperty(iter24)) {
        iter24 = this.keywords[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 3);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  if (this.paging !== null && this.paging !== undefined) {
    output.writeFieldBegin('paging', Thrift.Type.STRUCT, 4);
    this.paging.write(output);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.STRUCT, 5);
    this.filters.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 6);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 7);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.excludeRosterEntries !== null && this.excludeRosterEntries !== undefined) {
    output.writeFieldBegin('excludeRosterEntries', Thrift.Type.BOOL, 8);
    output.writeBool(this.excludeRosterEntries);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanySearchFilterStruct = module.exports.CompanySearchFilterStruct = function(args) {
  this.companyNameFilter = null;
  this.companyLegalNameFilter = null;
  this.cityFilter = null;
  this.provinceFilter = null;
  this.countryFilter = null;
  this.leiFilter = null;
  if (args) {
    if (args.companyNameFilter !== undefined && args.companyNameFilter !== null) {
      this.companyNameFilter = args.companyNameFilter;
    }
    if (args.companyLegalNameFilter !== undefined && args.companyLegalNameFilter !== null) {
      this.companyLegalNameFilter = args.companyLegalNameFilter;
    }
    if (args.cityFilter !== undefined && args.cityFilter !== null) {
      this.cityFilter = args.cityFilter;
    }
    if (args.provinceFilter !== undefined && args.provinceFilter !== null) {
      this.provinceFilter = args.provinceFilter;
    }
    if (args.countryFilter !== undefined && args.countryFilter !== null) {
      this.countryFilter = args.countryFilter;
    }
    if (args.leiFilter !== undefined && args.leiFilter !== null) {
      this.leiFilter = args.leiFilter;
    }
  }
};
CompanySearchFilterStruct.prototype = {};
CompanySearchFilterStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyLegalNameFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cityFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.provinceFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.countryFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.leiFilter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanySearchFilterStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanySearchFilterStruct');
  if (this.companyNameFilter !== null && this.companyNameFilter !== undefined) {
    output.writeFieldBegin('companyNameFilter', Thrift.Type.STRING, 1);
    output.writeString(this.companyNameFilter);
    output.writeFieldEnd();
  }
  if (this.companyLegalNameFilter !== null && this.companyLegalNameFilter !== undefined) {
    output.writeFieldBegin('companyLegalNameFilter', Thrift.Type.STRING, 2);
    output.writeString(this.companyLegalNameFilter);
    output.writeFieldEnd();
  }
  if (this.cityFilter !== null && this.cityFilter !== undefined) {
    output.writeFieldBegin('cityFilter', Thrift.Type.STRING, 3);
    output.writeString(this.cityFilter);
    output.writeFieldEnd();
  }
  if (this.provinceFilter !== null && this.provinceFilter !== undefined) {
    output.writeFieldBegin('provinceFilter', Thrift.Type.STRING, 4);
    output.writeString(this.provinceFilter);
    output.writeFieldEnd();
  }
  if (this.countryFilter !== null && this.countryFilter !== undefined) {
    output.writeFieldBegin('countryFilter', Thrift.Type.STRING, 5);
    output.writeString(this.countryFilter);
    output.writeFieldEnd();
  }
  if (this.leiFilter !== null && this.leiFilter !== undefined) {
    output.writeFieldBegin('leiFilter', Thrift.Type.STRING, 6);
    output.writeString(this.leiFilter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompanySearchParametersStruct = module.exports.CompanySearchParametersStruct = function(args) {
  this.keywords = null;
  this.companyId = null;
  this.echoToken = null;
  this.paging = null;
  this.filters = null;
  this.actorId = null;
  if (args) {
    if (args.keywords !== undefined && args.keywords !== null) {
      this.keywords = Thrift.copyList(args.keywords, [null]);
    }
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
    if (args.echoToken !== undefined && args.echoToken !== null) {
      this.echoToken = args.echoToken;
    }
    if (args.paging !== undefined && args.paging !== null) {
      this.paging = new ttypes.PagingStruct(args.paging);
    }
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = new ttypes.CompanySearchFilterStruct(args.filters);
    }
    if (args.actorId !== undefined && args.actorId !== null) {
      this.actorId = args.actorId;
    }
  }
};
CompanySearchParametersStruct.prototype = {};
CompanySearchParametersStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.keywords = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString();
          this.keywords.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.echoToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.paging = new ttypes.PagingStruct();
        this.paging.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filters = new ttypes.CompanySearchFilterStruct();
        this.filters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.actorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanySearchParametersStruct.prototype.write = function(output) {
  output.writeStructBegin('CompanySearchParametersStruct');
  if (this.keywords !== null && this.keywords !== undefined) {
    output.writeFieldBegin('keywords', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keywords.length);
    for (var iter29 in this.keywords) {
      if (this.keywords.hasOwnProperty(iter29)) {
        iter29 = this.keywords[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 2);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  if (this.echoToken !== null && this.echoToken !== undefined) {
    output.writeFieldBegin('echoToken', Thrift.Type.STRING, 3);
    output.writeString(this.echoToken);
    output.writeFieldEnd();
  }
  if (this.paging !== null && this.paging !== undefined) {
    output.writeFieldBegin('paging', Thrift.Type.STRUCT, 4);
    this.paging.write(output);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.STRUCT, 5);
    this.filters.write(output);
    output.writeFieldEnd();
  }
  if (this.actorId !== null && this.actorId !== undefined) {
    output.writeFieldBegin('actorId', Thrift.Type.I64, 6);
    output.writeI64(this.actorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FailureException = module.exports.FailureException = function(args) {
  Thrift.TException.call(this, "FailureException");
  this.name = "FailureException";
  this.description = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Thrift.inherits(FailureException, Thrift.TException);
FailureException.prototype.name = 'FailureException';
FailureException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailureException.prototype.write = function(output) {
  output.writeStructBegin('FailureException');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserProfileEditabilityException = module.exports.UserProfileEditabilityException = function(args) {
  Thrift.TException.call(this, "UserProfileEditabilityException");
  this.name = "UserProfileEditabilityException";
};
Thrift.inherits(UserProfileEditabilityException, Thrift.TException);
UserProfileEditabilityException.prototype.name = 'UserProfileEditabilityException';
UserProfileEditabilityException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserProfileEditabilityException.prototype.write = function(output) {
  output.writeStructBegin('UserProfileEditabilityException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidSearchCriteriaException = module.exports.InvalidSearchCriteriaException = function(args) {
  Thrift.TException.call(this, "InvalidSearchCriteriaException");
  this.name = "InvalidSearchCriteriaException";
};
Thrift.inherits(InvalidSearchCriteriaException, Thrift.TException);
InvalidSearchCriteriaException.prototype.name = 'InvalidSearchCriteriaException';
InvalidSearchCriteriaException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidSearchCriteriaException.prototype.write = function(output) {
  output.writeStructBegin('InvalidSearchCriteriaException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserNotFoundException = module.exports.UserNotFoundException = function(args) {
  Thrift.TException.call(this, "UserNotFoundException");
  this.name = "UserNotFoundException";
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
Thrift.inherits(UserNotFoundException, Thrift.TException);
UserNotFoundException.prototype.name = 'UserNotFoundException';
UserNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('UserNotFoundException');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserNotEntitledException = module.exports.UserNotEntitledException = function(args) {
  Thrift.TException.call(this, "UserNotEntitledException");
  this.name = "UserNotEntitledException";
};
Thrift.inherits(UserNotEntitledException, Thrift.TException);
UserNotEntitledException.prototype.name = 'UserNotEntitledException';
UserNotEntitledException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserNotEntitledException.prototype.write = function(output) {
  output.writeStructBegin('UserNotEntitledException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OperationNotFoundException = module.exports.OperationNotFoundException = function(args) {
  Thrift.TException.call(this, "OperationNotFoundException");
  this.name = "OperationNotFoundException";
};
Thrift.inherits(OperationNotFoundException, Thrift.TException);
OperationNotFoundException.prototype.name = 'OperationNotFoundException';
OperationNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('OperationNotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.X_GR_API_VERSION_VALUE = '2.10.1';
