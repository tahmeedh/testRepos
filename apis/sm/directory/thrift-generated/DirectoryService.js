//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./Directory_types');
//HELPER FUNCTIONS AND STRUCTURES

var DirectoryService_getCompanyProfile_args = function(args) {
  this.companyId = null;
  if (args) {
    if (args.companyId !== undefined && args.companyId !== null) {
      this.companyId = args.companyId;
    }
  }
};
DirectoryService_getCompanyProfile_args.prototype = {};
DirectoryService_getCompanyProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.companyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getCompanyProfile_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getCompanyProfile_args');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I32, 1);
    output.writeI32(this.companyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_getCompanyProfile_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompanyProfileStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
DirectoryService_getCompanyProfile_result.prototype = {};
DirectoryService_getCompanyProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompanyProfileStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getCompanyProfile_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getCompanyProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_getUserProfile_args = function(args) {
  this.userId = null;
  this.actingUserId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.actingUserId !== undefined && args.actingUserId !== null) {
      this.actingUserId = args.actingUserId;
    }
  }
};
DirectoryService_getUserProfile_args.prototype = {};
DirectoryService_getUserProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.actingUserId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getUserProfile_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getUserProfile_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.actingUserId !== null && this.actingUserId !== undefined) {
    output.writeFieldBegin('actingUserId', Thrift.Type.I64, 2);
    output.writeI64(this.actingUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_getUserProfile_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserProfileStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
DirectoryService_getUserProfile_result.prototype = {};
DirectoryService_getUserProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserProfileStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getUserProfile_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getUserProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateUserProfile_args = function(args) {
  this.userId = null;
  this.userSetAttributes = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userSetAttributes !== undefined && args.userSetAttributes !== null) {
      this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct(args.userSetAttributes);
    }
  }
};
DirectoryService_updateUserProfile_args.prototype = {};
DirectoryService_updateUserProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userSetAttributes = new ttypes.UserProfileUserSetAttributesStruct();
        this.userSetAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateUserProfile_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateUserProfile_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userSetAttributes !== null && this.userSetAttributes !== undefined) {
    output.writeFieldBegin('userSetAttributes', Thrift.Type.STRUCT, 2);
    this.userSetAttributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateUserProfile_result = function(args) {
  this.failure = null;
  this.userProfileEditability = null;
  this.userNotFound = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.UserProfileEditabilityException) {
    this.userProfileEditability = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.userNotFound = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.userProfileEditability !== undefined && args.userProfileEditability !== null) {
      this.userProfileEditability = args.userProfileEditability;
    }
    if (args.userNotFound !== undefined && args.userNotFound !== null) {
      this.userNotFound = args.userNotFound;
    }
  }
};
DirectoryService_updateUserProfile_result.prototype = {};
DirectoryService_updateUserProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userProfileEditability = new ttypes.UserProfileEditabilityException();
        this.userProfileEditability.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotFound = new ttypes.UserNotFoundException();
        this.userNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateUserProfile_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateUserProfile_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.userProfileEditability !== null && this.userProfileEditability !== undefined) {
    output.writeFieldBegin('userProfileEditability', Thrift.Type.STRUCT, 2);
    this.userProfileEditability.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotFound !== null && this.userNotFound !== undefined) {
    output.writeFieldBegin('userNotFound', Thrift.Type.STRUCT, 3);
    this.userNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_getReportsToUsers_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
DirectoryService_getReportsToUsers_args.prototype = {};
DirectoryService_getReportsToUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getReportsToUsers_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getReportsToUsers_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_getReportsToUsers_result = function(args) {
  this.success = null;
  this.failure = null;
  this.userNotFound = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.userNotFound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PeopleSearchResultsStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.userNotFound !== undefined && args.userNotFound !== null) {
      this.userNotFound = args.userNotFound;
    }
  }
};
DirectoryService_getReportsToUsers_result.prototype = {};
DirectoryService_getReportsToUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PeopleSearchResultsStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotFound = new ttypes.UserNotFoundException();
        this.userNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_getReportsToUsers_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_getReportsToUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotFound !== null && this.userNotFound !== undefined) {
    output.writeFieldBegin('userNotFound', Thrift.Type.STRUCT, 2);
    this.userNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateCompanyProfile_args = function(args) {
  this.companyProfile = null;
  if (args) {
    if (args.companyProfile !== undefined && args.companyProfile !== null) {
      this.companyProfile = new ttypes.CompanyProfileStruct(args.companyProfile);
    }
  }
};
DirectoryService_updateCompanyProfile_args.prototype = {};
DirectoryService_updateCompanyProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.companyProfile = new ttypes.CompanyProfileStruct();
        this.companyProfile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateCompanyProfile_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateCompanyProfile_args');
  if (this.companyProfile !== null && this.companyProfile !== undefined) {
    output.writeFieldBegin('companyProfile', Thrift.Type.STRUCT, 1);
    this.companyProfile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateCompanyProfile_result = function(args) {
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
DirectoryService_updateCompanyProfile_result.prototype = {};
DirectoryService_updateCompanyProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateCompanyProfile_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateCompanyProfile_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateDirectorySettings_args = function(args) {
  this.directorySettings = null;
  if (args) {
    if (args.directorySettings !== undefined && args.directorySettings !== null) {
      this.directorySettings = new ttypes.DirectorySettingsStruct(args.directorySettings);
    }
  }
};
DirectoryService_updateDirectorySettings_args.prototype = {};
DirectoryService_updateDirectorySettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.directorySettings = new ttypes.DirectorySettingsStruct();
        this.directorySettings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateDirectorySettings_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateDirectorySettings_args');
  if (this.directorySettings !== null && this.directorySettings !== undefined) {
    output.writeFieldBegin('directorySettings', Thrift.Type.STRUCT, 1);
    this.directorySettings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_updateDirectorySettings_result = function(args) {
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
DirectoryService_updateDirectorySettings_result.prototype = {};
DirectoryService_updateDirectorySettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_updateDirectorySettings_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_updateDirectorySettings_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_setUserDirectoryOperations_args = function(args) {
  this.userIds = null;
  this.operations = null;
  this.roleName = null;
  if (args) {
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
    if (args.operations !== undefined && args.operations !== null) {
      this.operations = Thrift.copyList(args.operations, [null]);
    }
    if (args.roleName !== undefined && args.roleName !== null) {
      this.roleName = args.roleName;
    }
  }
};
DirectoryService_setUserDirectoryOperations_args.prototype = {};
DirectoryService_setUserDirectoryOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.userIds = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = input.readI64();
          this.userIds.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.operations = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = input.readString();
          this.operations.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.roleName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_setUserDirectoryOperations_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_setUserDirectoryOperations_args');
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter38 in this.userIds) {
      if (this.userIds.hasOwnProperty(iter38)) {
        iter38 = this.userIds[iter38];
        output.writeI64(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.operations !== null && this.operations !== undefined) {
    output.writeFieldBegin('operations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.operations.length);
    for (var iter39 in this.operations) {
      if (this.operations.hasOwnProperty(iter39)) {
        iter39 = this.operations[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.roleName !== null && this.roleName !== undefined) {
    output.writeFieldBegin('roleName', Thrift.Type.STRING, 3);
    output.writeString(this.roleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_setUserDirectoryOperations_result = function(args) {
  this.failure = null;
  this.userNotFound = null;
  this.operationNotFound = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.userNotFound = args;
    return;
  }
  if (args instanceof ttypes.OperationNotFoundException) {
    this.operationNotFound = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.userNotFound !== undefined && args.userNotFound !== null) {
      this.userNotFound = args.userNotFound;
    }
    if (args.operationNotFound !== undefined && args.operationNotFound !== null) {
      this.operationNotFound = args.operationNotFound;
    }
  }
};
DirectoryService_setUserDirectoryOperations_result.prototype = {};
DirectoryService_setUserDirectoryOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotFound = new ttypes.UserNotFoundException();
        this.userNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationNotFound = new ttypes.OperationNotFoundException();
        this.operationNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_setUserDirectoryOperations_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_setUserDirectoryOperations_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotFound !== null && this.userNotFound !== undefined) {
    output.writeFieldBegin('userNotFound', Thrift.Type.STRUCT, 2);
    this.userNotFound.write(output);
    output.writeFieldEnd();
  }
  if (this.operationNotFound !== null && this.operationNotFound !== undefined) {
    output.writeFieldBegin('operationNotFound', Thrift.Type.STRUCT, 3);
    this.operationNotFound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_performCompanySearch_args = function(args) {
  this.parameters = null;
  if (args) {
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = new ttypes.CompanySearchParametersStruct(args.parameters);
    }
  }
};
DirectoryService_performCompanySearch_args.prototype = {};
DirectoryService_performCompanySearch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ttypes.CompanySearchParametersStruct();
        this.parameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_performCompanySearch_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_performCompanySearch_args');
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 1);
    this.parameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_performCompanySearch_result = function(args) {
  this.success = null;
  this.failure = null;
  this.invalidSearchCriteria = null;
  this.actorNotFound = null;
  this.userNotEntitled = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.InvalidSearchCriteriaException) {
    this.invalidSearchCriteria = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.actorNotFound = args;
    return;
  }
  if (args instanceof ttypes.UserNotEntitledException) {
    this.userNotEntitled = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompanySearchResultsStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.invalidSearchCriteria !== undefined && args.invalidSearchCriteria !== null) {
      this.invalidSearchCriteria = args.invalidSearchCriteria;
    }
    if (args.actorNotFound !== undefined && args.actorNotFound !== null) {
      this.actorNotFound = args.actorNotFound;
    }
    if (args.userNotEntitled !== undefined && args.userNotEntitled !== null) {
      this.userNotEntitled = args.userNotEntitled;
    }
  }
};
DirectoryService_performCompanySearch_result.prototype = {};
DirectoryService_performCompanySearch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompanySearchResultsStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalidSearchCriteria = new ttypes.InvalidSearchCriteriaException();
        this.invalidSearchCriteria.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.actorNotFound = new ttypes.UserNotFoundException();
        this.actorNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotEntitled = new ttypes.UserNotEntitledException();
        this.userNotEntitled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_performCompanySearch_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_performCompanySearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.invalidSearchCriteria !== null && this.invalidSearchCriteria !== undefined) {
    output.writeFieldBegin('invalidSearchCriteria', Thrift.Type.STRUCT, 2);
    this.invalidSearchCriteria.write(output);
    output.writeFieldEnd();
  }
  if (this.actorNotFound !== null && this.actorNotFound !== undefined) {
    output.writeFieldBegin('actorNotFound', Thrift.Type.STRUCT, 3);
    this.actorNotFound.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotEntitled !== null && this.userNotEntitled !== undefined) {
    output.writeFieldBegin('userNotEntitled', Thrift.Type.STRUCT, 4);
    this.userNotEntitled.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_performPeopleSearchV2_args = function(args) {
  this.parameters = null;
  if (args) {
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = new ttypes.PeopleSearchParametersStruct(args.parameters);
    }
  }
};
DirectoryService_performPeopleSearchV2_args.prototype = {};
DirectoryService_performPeopleSearchV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ttypes.PeopleSearchParametersStruct();
        this.parameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_performPeopleSearchV2_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_performPeopleSearchV2_args');
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 1);
    this.parameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_performPeopleSearchV2_result = function(args) {
  this.success = null;
  this.failure = null;
  this.invalidSearchCriteria = null;
  this.userNotFound = null;
  this.userNotEntitled = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args instanceof ttypes.InvalidSearchCriteriaException) {
    this.invalidSearchCriteria = args;
    return;
  }
  if (args instanceof ttypes.UserNotFoundException) {
    this.userNotFound = args;
    return;
  }
  if (args instanceof ttypes.UserNotEntitledException) {
    this.userNotEntitled = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PeopleSearchResultsStruct(args.success);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
    if (args.invalidSearchCriteria !== undefined && args.invalidSearchCriteria !== null) {
      this.invalidSearchCriteria = args.invalidSearchCriteria;
    }
    if (args.userNotFound !== undefined && args.userNotFound !== null) {
      this.userNotFound = args.userNotFound;
    }
    if (args.userNotEntitled !== undefined && args.userNotEntitled !== null) {
      this.userNotEntitled = args.userNotEntitled;
    }
  }
};
DirectoryService_performPeopleSearchV2_result.prototype = {};
DirectoryService_performPeopleSearchV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PeopleSearchResultsStruct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalidSearchCriteria = new ttypes.InvalidSearchCriteriaException();
        this.invalidSearchCriteria.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotFound = new ttypes.UserNotFoundException();
        this.userNotFound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.userNotEntitled = new ttypes.UserNotEntitledException();
        this.userNotEntitled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_performPeopleSearchV2_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_performPeopleSearchV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  if (this.invalidSearchCriteria !== null && this.invalidSearchCriteria !== undefined) {
    output.writeFieldBegin('invalidSearchCriteria', Thrift.Type.STRUCT, 2);
    this.invalidSearchCriteria.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotFound !== null && this.userNotFound !== undefined) {
    output.writeFieldBegin('userNotFound', Thrift.Type.STRUCT, 3);
    this.userNotFound.write(output);
    output.writeFieldEnd();
  }
  if (this.userNotEntitled !== null && this.userNotEntitled !== undefined) {
    output.writeFieldBegin('userNotEntitled', Thrift.Type.STRUCT, 4);
    this.userNotEntitled.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_waitForFullTextIndexing_args = function(args) {
};
DirectoryService_waitForFullTextIndexing_args.prototype = {};
DirectoryService_waitForFullTextIndexing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_waitForFullTextIndexing_args.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_waitForFullTextIndexing_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryService_waitForFullTextIndexing_result = function(args) {
  this.failure = null;
  if (args instanceof ttypes.FailureException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = args.failure;
    }
  }
};
DirectoryService_waitForFullTextIndexing_result.prototype = {};
DirectoryService_waitForFullTextIndexing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.FailureException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DirectoryService_waitForFullTextIndexing_result.prototype.write = function(output) {
  output.writeStructBegin('DirectoryService_waitForFullTextIndexing_result');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DirectoryServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
DirectoryServiceClient.prototype = {};
DirectoryServiceClient.prototype.seqid = function() { return this._seqid; };
DirectoryServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

DirectoryServiceClient.prototype.getCompanyProfile = function(companyId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompanyProfile(companyId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompanyProfile(companyId);
  }
};

DirectoryServiceClient.prototype.send_getCompanyProfile = function(companyId) {
  var output = new this.pClass(this.output);
  var params = {
    companyId: companyId
  };
  var args = new DirectoryService_getCompanyProfile_args(params);
  try {
    output.writeMessageBegin('getCompanyProfile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_getCompanyProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_getCompanyProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompanyProfile failed: unknown result');
};

DirectoryServiceClient.prototype.getUserProfile = function(userId, actingUserId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserProfile(userId, actingUserId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserProfile(userId, actingUserId);
  }
};

DirectoryServiceClient.prototype.send_getUserProfile = function(userId, actingUserId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    actingUserId: actingUserId
  };
  var args = new DirectoryService_getUserProfile_args(params);
  try {
    output.writeMessageBegin('getUserProfile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_getUserProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_getUserProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserProfile failed: unknown result');
};

DirectoryServiceClient.prototype.updateUserProfile = function(userId, userSetAttributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserProfile(userId, userSetAttributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserProfile(userId, userSetAttributes);
  }
};

DirectoryServiceClient.prototype.send_updateUserProfile = function(userId, userSetAttributes) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    userSetAttributes: userSetAttributes
  };
  var args = new DirectoryService_updateUserProfile_args(params);
  try {
    output.writeMessageBegin('updateUserProfile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_updateUserProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_updateUserProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.userProfileEditability) {
    return callback(result.userProfileEditability);
  }
  if (null !== result.userNotFound) {
    return callback(result.userNotFound);
  }
  callback(null);
};

DirectoryServiceClient.prototype.getReportsToUsers = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getReportsToUsers(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getReportsToUsers(userId);
  }
};

DirectoryServiceClient.prototype.send_getReportsToUsers = function(userId) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId
  };
  var args = new DirectoryService_getReportsToUsers_args(params);
  try {
    output.writeMessageBegin('getReportsToUsers', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_getReportsToUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_getReportsToUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.userNotFound) {
    return callback(result.userNotFound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getReportsToUsers failed: unknown result');
};

DirectoryServiceClient.prototype.updateCompanyProfile = function(companyProfile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateCompanyProfile(companyProfile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateCompanyProfile(companyProfile);
  }
};

DirectoryServiceClient.prototype.send_updateCompanyProfile = function(companyProfile) {
  var output = new this.pClass(this.output);
  var params = {
    companyProfile: companyProfile
  };
  var args = new DirectoryService_updateCompanyProfile_args(params);
  try {
    output.writeMessageBegin('updateCompanyProfile', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_updateCompanyProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_updateCompanyProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  callback(null);
};

DirectoryServiceClient.prototype.updateDirectorySettings = function(directorySettings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDirectorySettings(directorySettings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDirectorySettings(directorySettings);
  }
};

DirectoryServiceClient.prototype.send_updateDirectorySettings = function(directorySettings) {
  var output = new this.pClass(this.output);
  var params = {
    directorySettings: directorySettings
  };
  var args = new DirectoryService_updateDirectorySettings_args(params);
  try {
    output.writeMessageBegin('updateDirectorySettings', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_updateDirectorySettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_updateDirectorySettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  callback(null);
};

DirectoryServiceClient.prototype.setUserDirectoryOperations = function(userIds, operations, roleName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setUserDirectoryOperations(userIds, operations, roleName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setUserDirectoryOperations(userIds, operations, roleName);
  }
};

DirectoryServiceClient.prototype.send_setUserDirectoryOperations = function(userIds, operations, roleName) {
  var output = new this.pClass(this.output);
  var params = {
    userIds: userIds,
    operations: operations,
    roleName: roleName
  };
  var args = new DirectoryService_setUserDirectoryOperations_args(params);
  try {
    output.writeMessageBegin('setUserDirectoryOperations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_setUserDirectoryOperations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_setUserDirectoryOperations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.userNotFound) {
    return callback(result.userNotFound);
  }
  if (null !== result.operationNotFound) {
    return callback(result.operationNotFound);
  }
  callback(null);
};

DirectoryServiceClient.prototype.performCompanySearch = function(parameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_performCompanySearch(parameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_performCompanySearch(parameters);
  }
};

DirectoryServiceClient.prototype.send_performCompanySearch = function(parameters) {
  var output = new this.pClass(this.output);
  var params = {
    parameters: parameters
  };
  var args = new DirectoryService_performCompanySearch_args(params);
  try {
    output.writeMessageBegin('performCompanySearch', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_performCompanySearch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_performCompanySearch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.invalidSearchCriteria) {
    return callback(result.invalidSearchCriteria);
  }
  if (null !== result.actorNotFound) {
    return callback(result.actorNotFound);
  }
  if (null !== result.userNotEntitled) {
    return callback(result.userNotEntitled);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('performCompanySearch failed: unknown result');
};

DirectoryServiceClient.prototype.performPeopleSearchV2 = function(parameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_performPeopleSearchV2(parameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_performPeopleSearchV2(parameters);
  }
};

DirectoryServiceClient.prototype.send_performPeopleSearchV2 = function(parameters) {
  var output = new this.pClass(this.output);
  var params = {
    parameters: parameters
  };
  var args = new DirectoryService_performPeopleSearchV2_args(params);
  try {
    output.writeMessageBegin('performPeopleSearchV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_performPeopleSearchV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_performPeopleSearchV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  if (null !== result.invalidSearchCriteria) {
    return callback(result.invalidSearchCriteria);
  }
  if (null !== result.userNotFound) {
    return callback(result.userNotFound);
  }
  if (null !== result.userNotEntitled) {
    return callback(result.userNotEntitled);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('performPeopleSearchV2 failed: unknown result');
};

DirectoryServiceClient.prototype.waitForFullTextIndexing = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_waitForFullTextIndexing();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_waitForFullTextIndexing();
  }
};

DirectoryServiceClient.prototype.send_waitForFullTextIndexing = function() {
  var output = new this.pClass(this.output);
  var args = new DirectoryService_waitForFullTextIndexing_args();
  try {
    output.writeMessageBegin('waitForFullTextIndexing', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

DirectoryServiceClient.prototype.recv_waitForFullTextIndexing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DirectoryService_waitForFullTextIndexing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.failure) {
    return callback(result.failure);
  }
  callback(null);
};
var DirectoryServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
DirectoryServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
DirectoryServiceProcessor.prototype.process_getCompanyProfile = function(seqid, input, output) {
  var args = new DirectoryService_getCompanyProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompanyProfile.length === 1) {
    Q.fcall(this._handler.getCompanyProfile.bind(this._handler),
      args.companyId
    ).then(function(result) {
      var result_obj = new DirectoryService_getCompanyProfile_result({success: result});
      output.writeMessageBegin("getCompanyProfile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new DirectoryService_getCompanyProfile_result(err);
        output.writeMessageBegin("getCompanyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompanyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCompanyProfile(args.companyId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new DirectoryService_getCompanyProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCompanyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompanyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_getUserProfile = function(seqid, input, output) {
  var args = new DirectoryService_getUserProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserProfile.length === 2) {
    Q.fcall(this._handler.getUserProfile.bind(this._handler),
      args.userId,
      args.actingUserId
    ).then(function(result) {
      var result_obj = new DirectoryService_getUserProfile_result({success: result});
      output.writeMessageBegin("getUserProfile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new DirectoryService_getUserProfile_result(err);
        output.writeMessageBegin("getUserProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getUserProfile(args.userId, args.actingUserId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new DirectoryService_getUserProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUserProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_updateUserProfile = function(seqid, input, output) {
  var args = new DirectoryService_updateUserProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserProfile.length === 2) {
    Q.fcall(this._handler.updateUserProfile.bind(this._handler),
      args.userId,
      args.userSetAttributes
    ).then(function(result) {
      var result_obj = new DirectoryService_updateUserProfile_result({success: result});
      output.writeMessageBegin("updateUserProfile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.UserProfileEditabilityException || err instanceof ttypes.UserNotFoundException) {
        result = new DirectoryService_updateUserProfile_result(err);
        output.writeMessageBegin("updateUserProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateUserProfile(args.userId, args.userSetAttributes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.UserProfileEditabilityException || err instanceof ttypes.UserNotFoundException) {
        result_obj = new DirectoryService_updateUserProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateUserProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateUserProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_getReportsToUsers = function(seqid, input, output) {
  var args = new DirectoryService_getReportsToUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getReportsToUsers.length === 1) {
    Q.fcall(this._handler.getReportsToUsers.bind(this._handler),
      args.userId
    ).then(function(result) {
      var result_obj = new DirectoryService_getReportsToUsers_result({success: result});
      output.writeMessageBegin("getReportsToUsers", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.UserNotFoundException) {
        result = new DirectoryService_getReportsToUsers_result(err);
        output.writeMessageBegin("getReportsToUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getReportsToUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getReportsToUsers(args.userId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.UserNotFoundException) {
        result_obj = new DirectoryService_getReportsToUsers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getReportsToUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getReportsToUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_updateCompanyProfile = function(seqid, input, output) {
  var args = new DirectoryService_updateCompanyProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateCompanyProfile.length === 1) {
    Q.fcall(this._handler.updateCompanyProfile.bind(this._handler),
      args.companyProfile
    ).then(function(result) {
      var result_obj = new DirectoryService_updateCompanyProfile_result({success: result});
      output.writeMessageBegin("updateCompanyProfile", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new DirectoryService_updateCompanyProfile_result(err);
        output.writeMessageBegin("updateCompanyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateCompanyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateCompanyProfile(args.companyProfile, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new DirectoryService_updateCompanyProfile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateCompanyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateCompanyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_updateDirectorySettings = function(seqid, input, output) {
  var args = new DirectoryService_updateDirectorySettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDirectorySettings.length === 1) {
    Q.fcall(this._handler.updateDirectorySettings.bind(this._handler),
      args.directorySettings
    ).then(function(result) {
      var result_obj = new DirectoryService_updateDirectorySettings_result({success: result});
      output.writeMessageBegin("updateDirectorySettings", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new DirectoryService_updateDirectorySettings_result(err);
        output.writeMessageBegin("updateDirectorySettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDirectorySettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateDirectorySettings(args.directorySettings, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new DirectoryService_updateDirectorySettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateDirectorySettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDirectorySettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_setUserDirectoryOperations = function(seqid, input, output) {
  var args = new DirectoryService_setUserDirectoryOperations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setUserDirectoryOperations.length === 3) {
    Q.fcall(this._handler.setUserDirectoryOperations.bind(this._handler),
      args.userIds,
      args.operations,
      args.roleName
    ).then(function(result) {
      var result_obj = new DirectoryService_setUserDirectoryOperations_result({success: result});
      output.writeMessageBegin("setUserDirectoryOperations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.OperationNotFoundException) {
        result = new DirectoryService_setUserDirectoryOperations_result(err);
        output.writeMessageBegin("setUserDirectoryOperations", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setUserDirectoryOperations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setUserDirectoryOperations(args.userIds, args.operations, args.roleName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.OperationNotFoundException) {
        result_obj = new DirectoryService_setUserDirectoryOperations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setUserDirectoryOperations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setUserDirectoryOperations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_performCompanySearch = function(seqid, input, output) {
  var args = new DirectoryService_performCompanySearch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.performCompanySearch.length === 1) {
    Q.fcall(this._handler.performCompanySearch.bind(this._handler),
      args.parameters
    ).then(function(result) {
      var result_obj = new DirectoryService_performCompanySearch_result({success: result});
      output.writeMessageBegin("performCompanySearch", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.InvalidSearchCriteriaException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.UserNotEntitledException) {
        result = new DirectoryService_performCompanySearch_result(err);
        output.writeMessageBegin("performCompanySearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("performCompanySearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.performCompanySearch(args.parameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.InvalidSearchCriteriaException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.UserNotEntitledException) {
        result_obj = new DirectoryService_performCompanySearch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("performCompanySearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("performCompanySearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_performPeopleSearchV2 = function(seqid, input, output) {
  var args = new DirectoryService_performPeopleSearchV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.performPeopleSearchV2.length === 1) {
    Q.fcall(this._handler.performPeopleSearchV2.bind(this._handler),
      args.parameters
    ).then(function(result) {
      var result_obj = new DirectoryService_performPeopleSearchV2_result({success: result});
      output.writeMessageBegin("performPeopleSearchV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException || err instanceof ttypes.InvalidSearchCriteriaException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.UserNotEntitledException) {
        result = new DirectoryService_performPeopleSearchV2_result(err);
        output.writeMessageBegin("performPeopleSearchV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("performPeopleSearchV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.performPeopleSearchV2(args.parameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException || err instanceof ttypes.InvalidSearchCriteriaException || err instanceof ttypes.UserNotFoundException || err instanceof ttypes.UserNotEntitledException) {
        result_obj = new DirectoryService_performPeopleSearchV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("performPeopleSearchV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("performPeopleSearchV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DirectoryServiceProcessor.prototype.process_waitForFullTextIndexing = function(seqid, input, output) {
  var args = new DirectoryService_waitForFullTextIndexing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.waitForFullTextIndexing.length === 0) {
    Q.fcall(this._handler.waitForFullTextIndexing.bind(this._handler)
    ).then(function(result) {
      var result_obj = new DirectoryService_waitForFullTextIndexing_result({success: result});
      output.writeMessageBegin("waitForFullTextIndexing", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.FailureException) {
        result = new DirectoryService_waitForFullTextIndexing_result(err);
        output.writeMessageBegin("waitForFullTextIndexing", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("waitForFullTextIndexing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.waitForFullTextIndexing(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.FailureException) {
        result_obj = new DirectoryService_waitForFullTextIndexing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("waitForFullTextIndexing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("waitForFullTextIndexing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
