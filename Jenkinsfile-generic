def email_recipients = 'sam.leung@globalrelay.net'
def nodeVersion = 'v18.18.0'
def buildsToKeep = 20
def timeOutTime = 80
def buildNumber = env.BUILD_NUMBER.toInteger()
def buildImageVersion = '1.0.0'
def buildImage = "docker-repo.globalrelay.net/test-automation/va-test-image:${buildImageVersion}"
def buildNode = 'linux'
def targetEnvChocies = ['cpqa2-va1', 'cpqa2-pd1', 'cpqa2-pd2', 'cpqa2-ca1', 'cpqa2-sq1', 'cpqa2', 'cpqa1']
def defaultTestCommand = 'npx playwright test'

pipeline {
    agent {
        label "${buildNode}"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "${buildsToKeep}"))
        timestamps()
        timeout(time: timeOutTime, unit: 'MINUTES')
    }
    parameters {
        string(name: 'testCommandParam', defaultValue: defaultTestCommand, description: 'npx playwright commands')
        choice(name:'targetEnvParam', choices: targetEnvChocies, description:'Test enviroment to run on')
        gitParameter(branch: '',
                     branchFilter: 'origin/(.*)',
                     defaultValue: 'master',
                     description: '',
                     name: 'jsatE2EChatWindowParam',
                     quickFilterEnabled: true,
                     selectedValue: 'NONE',
                     sortMode: 'ASCENDING',
                     tagFilter: '*',
                     type: 'PT_BRANCH')
    }
    stages {
        stage('Preparation') {
            steps {
                    // Wipe out workspace for clean build each time
                    deleteDir()
                    script {
                        // Clone and checkout the correct JSAT-E2E-CHAT-WINDOW branch
                        sh """
                            git clone ssh://git@stash.globalrelay.net:7999/portal/jsat-e2e-chat-window.git
                            cd ./jsat-e2e-chat-window
                            git checkout ${params.jsatE2EChatWindowParam}
                            git status
                            echo "SERVER='${params.targetEnvParam}'" > .env
                        """
                        // Get admin username and password rom secret server and write it into .env file
                        with_ss_token() {
                            with_ss_credentials([[secret_id: 110646, field: 'Username', variable: 'LOGIN_NAME'], [secret_id: 110646, field: 'Password', variable: 'PASSWORD']]) {
                                sh """
                              echo "ADMIN_USERNAME='${LOGIN_NAME}'" >> .env
                              echo "ADMIN_PASSWORD='${PASSWORD}'" >> .env
                            """
                            }
                        }

                        def commitHash = sh(script: 'cd ./jsat-e2e-chat-window && git rev-parse --short HEAD', returnStdout: true)
                        // Tag current build to run
                        currentBuild.displayName = "#${buildNumber} ${params.targetEnvParam}"
                        currentBuild.description = "ENV: ${params.targetEnvParam}<br>" +
                                                    "HASH: ${commitHash}<br>" + 
                                                    "CMD: ${params.testCommandParam}<br>" +
                                                    "BR: ${params.jsatE2EChatWindowParam}<br>"
                    }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image "${buildImage}"
                    alwaysPull true
                    reuseNode true
                }
            }
            environment {
                NVM_INC = "~/.nvm/versions/node/${nodeVersion}/include/node"
                NVM_DIR = '~/.nvm'
                PATH = "~/.nvm/versions/node/${nodeVersion}/bin:$PATH"
                NVM_BIN = "~/.nvm/versions/node/${nodeVersion}/bin"
                STASH_CREDS = credentials('bitbucket_username_password')
            }
            steps {
                nvm(nvmInstallURL: 'https://raw.githubusercontent.com/creationix/nvm/v0.37.2/install.sh',
                    nvmInstallDir: '~/.nvm',
                    nvmIoJsOrgMirror: 'https://nodejs.org/dist',
                    nvmNodeJsOrgMirror: 'https://nodejs.org/dist',
                    version: "${nodeVersion}") {
                    script {
                        // Install Playwright and run tests
                        sh  """
                        export PATH="$NVM_BIN:$PATH"
                        echo "PATH is set to [$PATH]"
                        echo "NVM_BIN is set to [$NVM_BIN]"
                        cd ./jsat-e2e-chat-window
                        npm ci
                        echo "Test command is set to [$params.testCommandParam] on [$params.targetEnvParam]"
                        echo 'Install playwright'
                        ${NVM_BIN}/npx playwright install chromium
                        echo "Running tests with the test command [$params.testCommandParam]"
                        ${NVM_BIN}/$params.testCommandParam | tee playwright_tests.log || exit 0
                        grep "Running [0-9]* test" playwright_tests.log
                        """
                    }
                    }
            }
        }

        stage('Publishing reports and archiving videos in parallel') {
            parallel {
                    stage('Publishing Reports') {
                        steps {
                            script {
                                echo 'Publish test result report'
                                publishHTML target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: './jsat-e2e-chat-window/playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Jsat-E2E-chat-window HTML Report'
                ]
                                echo 'Publishing Allure reports'
                                allure commandline: 'Allure-2.12.1', includeProperties: true, jdk: '', properties: [[key: 'allure.tests.management.pattern', value: 'https://testrail.globalrelay.net/index.php?/cases/view/%s'], [key: 'allure.issues.tracker.pattern', value: 'https://jira.globalrelay.net/browse/%s']], results: [[path: 'jsat-e2e-chat-window/allure-results']]
                            }
                        }
                    }

                    stage('Archiving Videos') {
                        steps {
                            script {
                                echo 'Archiving screen captures and videos'
                                sh '''
                                tar czvf test-results.tar.gz jsat-e2e-chat-window/test-results/
                            '''
                                archiveArtifacts artifacts: 'test-results.tar.gz', allowEmptyArchive: 'true'
                            }
                        }
                    }
            }
        }
    }

    post {
        failure {
            script {
                echo "Sending notification email to $email_recipients"
                emailext body: "Build failed, see: $JOB_URL", recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Jenkins job failed: $JOB_NAME", to: email_recipients
            }
        }
    }
}
