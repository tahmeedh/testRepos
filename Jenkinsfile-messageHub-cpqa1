def email_recipients = 'sam.leung@globalrelay.net'
def nodeVersion = 'v18.18.0'
def buildsToKeep = 20
def timeOutTime = 40
def buildNumber = env.BUILD_NUMBER.toInteger()
def buildImageVersion = '1.0.0'
def buildImage = "docker-repo.globalrelay.net/test-automation/va-test-image:${buildImageVersion}"
def buildNode = 'linux'
def targetEnv = 'cpqa1'
def testCommand = 'npx playwright test -g @message-hub'

pipeline {
    agent {
        label "${buildNode}"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "${buildsToKeep}"))
        timestamps()
        timeout(time: timeOutTime, unit: 'MINUTES')
    }
    parameters {
        string(name: 'testCommand', defaultValue: "${testCommand}", description: 'Test command to run. Envrioment variable will not work here.')
    }
    stages {
        stage('Preparation') {
            steps {
                    // Wipe out workspace for clean build each time
                    deleteDir()
                    sh '''
                        git clone ssh://git@stash.globalrelay.net:7999/portal/jsat-e2e-chat-window.git
                    '''
            }
        }

        stage('Test') {
            agent {
                docker {
                    image "${buildImage}"
                    alwaysPull true
                    reuseNode true
                }
            }
            environment {
                NVM_INC = "~/.nvm/versions/node/${nodeVersion}/include/node"
                NVM_DIR = '~/.nvm'
                PATH = "~/.nvm/versions/node/${nodeVersion}/bin:$PATH"
                NVM_BIN = "~/.nvm/versions/node/${nodeVersion}/bin"
                STASH_CREDS = credentials('bitbucket_username_password')
            }
            steps {
                nvm(nvmInstallURL: 'https://raw.githubusercontent.com/creationix/nvm/v0.37.2/install.sh',
                    nvmInstallDir: '~/.nvm',
                    nvmIoJsOrgMirror: 'https://nodejs.org/dist',
                    nvmNodeJsOrgMirror: 'https://nodejs.org/dist',
                    version: "${nodeVersion}") {
                    script {
                        with_ss_token() {
                            with_ss_credentials([[secret_id: 110646, field: 'Username', variable: 'LOGIN_NAME'], [secret_id: 110646, field: 'Password', variable: 'PASSWORD']]) {
                                sh """
                              echo "ADMIN_USERNAME='${LOGIN_NAME}'" > jsat-e2e-chat-window/.env
                              echo "ADMIN_PASSWORD='${PASSWORD}'" >> jsat-e2e-chat-window/.env
                            """
                            }
                        }

                        sh """
                              echo "SERVER='${targetEnv}'" >> jsat-e2e-chat-window/.env
                    """

                        sh  '''
                        export PATH="$NVM_BIN:$PATH"
                        echo "PATH is set to [$PATH]"
                        echo "NVM_BIN is set to [$NVM_BIN]"
                        echo "Test command is set to [$testCommand]"
                        cd ./jsat-e2e-chat-window
                        npm ci
                        git status
                        echo 'Install playwright'
                        ${NVM_BIN}/npx playwright install chromium
                        echo "Running tests with the test command [$testCommand] on [${targetEnv}]"
                        set +e
                        ${NVM_BIN}/$testCommand| tee playwright_tests.log
                        echo "Playwright test command exit code is [$?]"
                        set -e
                        grep "Running [0-9]* test. using [0-9]* worker" playwright_tests.log
                        '''
                    }
                    }
            }
        }

        stage('Publishing reports and archiving videos in parallel') {
            parallel {
                stage('Publishing Reports') {
                    steps {
                        script {
                                echo 'Publish test result report'
                                publishHTML target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: './jsat-e2e-chat-window/playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'jsat-e2e-chat-window Test Report'
                ]
                                currentBuild.displayName = "#${buildNumber} Target Env.: ${targetEnv} "

                                echo 'Publishing Allure reports'
                                allure commandline: 'Allure-2.12.1', includeProperties: true, jdk: '', properties: [[key: 'allure.tests.management.pattern', value: 'https://testrail.globalrelay.net/index.php?/cases/view/%s'], [key: 'allure.issues.tracker.pattern', value: 'https://jira.globalrelay.net/browse/%s']], results: [[path: 'jsat-mock-chat-window/allure-results']]
                        }
                    }
                }

                    stage('Archiving Videos') {
                        steps {
                            script {
                                echo 'Archiving screen captures and videos'
                                sh '''
                                tar czvf test-results.tar.gz jsat-e2e-chat-window/test-results/
                            '''
                                archiveArtifacts artifacts: 'test-results.tar.gz', allowEmptyArchive: 'true'
                            }
                        }
                    }
            }
        }
    }

    post {
        failure {
            script {
                echo "Sending notification email to $email_recipients"
                emailext body: "Build failed, see: $JOB_URL", recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Jenkins job failed: $JOB_NAME", to: email_recipients
            }
        }
    }
}
